//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


//////////////////////////////////////////
uniform float u_tiling;


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec3 a_tangent;
IN vec3 a_bitangent;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_positionCS;
OUT vec3 v_normalOS;
OUT vec3 v_normalWS;
OUT vec3 v_tangentWS;
OUT vec3 v_bitangentWS;
OUT vec2 v_uv0;
OUT vec3 v_viewDirWS;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
    
    vec4 normalOS = vec4(a_normal, 1.0);
    vec4 tangentOS = vec4(a_tangent, 1.0);
    vec4 bitangentOS = vec4(a_bitangent, 1.0);
    
    mat3 normalMatrix = mat3(MAZE_INVERSE(modelMatrix));
    
    
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_positionCS = positionCS;
    
    vec3 normalWS = normalize(normalOS.xyz * normalMatrix).xyz;
        
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 tangentWS = normalize(tangentOS.xyz * normalMatrix).xyz;
    vec3 bitangentWS = normalize(bitangentOS.xyz * normalMatrix).xyz;
    
    v_tangentWS = tangentWS.xyz;
    v_bitangentWS = bitangentWS.xyz;
#endif
        
    v_normalOS = normalOS.xyz;
    v_normalWS = normalWS.xyz;
    
    v_uv0 = a_texCoords0 * u_tiling;
    
    v_viewDirWS = u_viewPosition - v_positionWS;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_reflectionMap;
uniform sampler2D u_refractionMap;
uniform sampler2D u_depthMap;
uniform sampler2D u_dudvMap;
uniform vec4 u_color;
uniform vec4 u_ambientLightColor;
uniform float u_shininess;
uniform vec4 u_specularColor;
uniform float u_waveStrength;
uniform float u_waveSpeed;
uniform float u_refractiveFactor;
uniform float u_depthDistortionFactor;
uniform float u_depthSpecularFactor;
uniform float u_depthTransparencyFactor;
uniform float u_normalYFactor;

// NORMAL_MAP
uniform sampler2D u_normalMap;
uniform float u_normalScale;



//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec4 v_positionCS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec3 v_tangentWS;
IN vec3 v_bitangentWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec3 v_viewDirWS;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;
    
    // View direction
    vec3 fragmentToViewDirection = normalize(v_viewDirWS);

    float waveSpeed = u_waveSpeed * u_time;
    vec2 distortedUV = MAZE_GET_TEXEL2D(u_dudvMap, vec2(v_uv0.x + waveSpeed, v_uv0.y)).rg * 0.1;
    distortedUV = v_uv0 + vec2(distortedUV.x, distortedUV.y + waveSpeed);
    

    // Normal
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 normalTS = SampleNormalTS(u_normalMap, distortedUV, u_normalScale);
    mat3 tangentToWorld = mat3(normalize(v_tangentWS), normalize(v_bitangentWS), normalize(v_normalWS));
    vec3 normalWS = normalize(TransformTangentToWorld(normalTS, tangentToWorld));
#else
    vec3 normalWS = normalize(v_normalWS);
#endif

    normalWS.y *= u_normalYFactor;
    normalWS = normalize(normalWS);
    

    vec2 screenUV = (v_positionCS.xy / v_positionCS.w) * 0.5 + 0.5;
    
    vec2 reflectionUV = vec2(screenUV.x, 1.0 - screenUV.y);
    vec2 refractionUV = screenUV;
    
    // Depth
    float near = u_projectionParams[0];
    float far = u_projectionParams[1];
    float depth = MAZE_GET_TEXEL2D(u_depthMap, screenUV).r;
    float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    depth = gl_FragCoord.z;
    float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    float waterDepth = floorDistance - waterDistance;
    
    vec2 totalDistortion = (MAZE_GET_TEXEL2D(u_dudvMap, distortedUV).rg * 2.0 - 1.0) * u_waveStrength * clamp(waterDepth/u_depthDistortionFactor, 0.0, 1.0);
    
    reflectionUV += totalDistortion;
    reflectionUV = clamp(reflectionUV, 0.001, 0.999);
    
    refractionUV += totalDistortion;
    refractionUV = clamp(refractionUV, 0.001, 0.999);
    
    vec4 reflectionColor = MAZE_GET_TEXEL2D(u_reflectionMap, reflectionUV);
    vec4 refractionColor = MAZE_GET_TEXEL2D(u_refractionMap, refractionUV);
    
    float refractiveFactor = clamp(dot(fragmentToViewDirection, normalWS), 0.001, 1.0);
    refractiveFactor = pow(refractiveFactor, u_refractiveFactor);
    
    
    // Light
    vec3 lightToFragment = normalize(u_mainLightDirection);
    vec3 reflectedLight = reflect(lightToFragment, normalWS);
    float specular = max(dot(reflectedLight, fragmentToViewDirection), 0.0);
    specular = pow(specular, u_shininess);
    vec3 specularHighlights = u_mainLightColor.rgb * specular * u_specularColor.rgb * clamp(waterDepth/u_depthSpecularFactor, 0.0, 1.0);
    
    float waterAlpha = clamp(waterDepth/u_depthTransparencyFactor, 0.0, 1.0);
    vec3 waterColor = mix(reflectionColor.rgb, refractionColor.rgb, refractiveFactor);
    
    waterColor = mix(waterColor, u_color.rgb, u_color.a);
    out_color = vec4(waterColor.rgb + specularHighlights.rgb, waterAlpha);
}
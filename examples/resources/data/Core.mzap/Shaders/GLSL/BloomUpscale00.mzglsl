//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"


//////////////////////////////////////////
uniform mat4 u_projectionMatrix;
uniform mat4 u_viewMatrix;
uniform vec3 u_viewPosition;
uniform vec2 u_baseMapTexelSize;
uniform float u_bloomSpread;


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_color;
OUT vec2 v_uv0;
OUT vec4 v_uv12;
OUT vec4 v_uv34;
OUT vec4 v_uv56;
OUT vec4 v_uv78;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = positionOS * modelMatrix;
    vec4 positionVS = positionWS * u_viewMatrix;
    vec4 positionCS = positionVS * u_projectionMatrix;
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_color = a_color;
    v_uv0 = a_texCoords0;
    
    vec2 bloomTexelSpread = u_baseMapTexelSize * u_bloomSpread;
    v_uv12.xy = a_texCoords0 + vec2(1.0, 1.0) * bloomTexelSpread;
    v_uv12.zw = a_texCoords0 + vec2(-1.0, 1.0) * bloomTexelSpread;
    v_uv34.xy = a_texCoords0 + vec2(-1.0, -1.0) * bloomTexelSpread;
    v_uv34.zw = a_texCoords0 + vec2(1.0, -1.0) * bloomTexelSpread;
    v_uv56.xy = a_texCoords0 + vec2(0.0, 2.0) * bloomTexelSpread;
    v_uv56.zw = a_texCoords0 + vec2(0.0, -2.0) * bloomTexelSpread;
    v_uv78.xy = a_texCoords0 + vec2(2.0, 0.0) * bloomTexelSpread;
    v_uv78.zw = a_texCoords0 + vec2(-2.0, 0.0) * bloomTexelSpread;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_baseMap;
uniform vec3 u_viewPosition;
uniform vec4 u_color;
uniform float u_bloomThreshold;


//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec4 v_uv12;
IN vec4 v_uv34;
IN vec4 v_uv56;
IN vec4 v_uv78;


//////////////////////////////////////////
layout(location=0) out vec4 out_color;


//////////////////////////////////////////
uniform sampler2D u_modelMatricesTexture;


//////////////////////////////////////////
// Main
void main()
{
    const float halfSix = 0.1666666 * 0.5;
    const float halfThree = 0.3333333 * 0.5;

    float bloomThreshold = u_bloomThreshold;

    vec3 diffuseColor0 = texture(u_baseMap, v_uv0).rgb;
    vec3 diffuseColor1 = texture(u_baseMap, v_uv12.xy).rgb;
    vec3 diffuseColor2 = texture(u_baseMap, v_uv12.zw).rgb;
    vec3 diffuseColor3 = texture(u_baseMap, v_uv34.xy).rgb;
    vec3 diffuseColor4 = texture(u_baseMap, v_uv34.zw).rgb;
    vec3 diffuseColor5 = texture(u_baseMap, v_uv56.xy).rgb;
    vec3 diffuseColor6 = texture(u_baseMap, v_uv56.zw).rgb;
    vec3 diffuseColor7 = texture(u_baseMap, v_uv78.xy).rgb;
    vec3 diffuseColor8 = texture(u_baseMap, v_uv78.zw).rgb;
    
    vec3 diffuseColor = 
        diffuseColor0 * 0.5 +
        (diffuseColor1 * halfThree + diffuseColor2 * halfThree + diffuseColor3 * halfThree + diffuseColor4 * halfThree +
        diffuseColor5 * halfSix + diffuseColor6 * halfSix + diffuseColor7 * halfSix + diffuseColor8 * halfSix) * 0.5;
        
    // Linear color
    vec3 linearColor = diffuseColor;
        
    out_color = vec4(linearColor, 1.0);
}

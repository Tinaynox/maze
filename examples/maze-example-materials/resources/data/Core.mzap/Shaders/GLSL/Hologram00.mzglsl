//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


// HOLOGRAM
uniform float u_hologramDistortionSpeed;
uniform float u_hologramDistortionYFactor;
uniform float u_hologramDistortionValue;
uniform float u_hologramDistortionStep;
uniform float u_hologramDistortionGradientSpeed;


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec3 a_tangent;
IN vec3 a_bitangent;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_positionCS;
OUT vec3 v_normalOS;
OUT vec3 v_normalWS;
OUT vec3 v_tangentWS;
OUT vec3 v_bitangentWS;
OUT vec4 v_color;
OUT vec2 v_uv0;
OUT vec3 v_viewDirWS;
OUT float v_distortionPower;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"
#include "Utils/Math.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;

    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    
    vec3 cameraXAxisWS = normalize(inverse(viewMatrix)[0].xyz);
    float distortionValue = sin(u_time * u_hologramDistortionSpeed + positionOS.y * u_hologramDistortionYFactor) * u_hologramDistortionValue;
    float randTime = MazeGradientNoise(vec2(u_time * u_hologramDistortionGradientSpeed, 0.0));
    v_distortionPower = pow((randTime + 1.0) * 0.5, 3.0);
    positionWS.xyz += cameraXAxisWS * distortionValue * v_distortionPower;
    
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
    
    vec4 normalOS = vec4(a_normal, 1.0);
    vec4 tangentOS = vec4(a_tangent, 1.0);
    vec4 bitangentOS = vec4(a_bitangent, 1.0);
    
    mat3 normalMatrix = mat3(modelMatrix);
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_positionCS = positionCS;
    
    vec3 normalWS = normalize(normalMatrix * normalOS.xyz).xyz;
    
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 tangentWS = normalize(normalMatrix * tangentOS.xyz).xyz;
    vec3 bitangentWS = normalize(normalMatrix * bitangentOS.xyz).xyz;
    
    v_tangentWS = tangentWS.xyz;
    v_bitangentWS = bitangentWS.xyz;
#endif
    
    v_normalOS = normalOS.xyz;
    v_normalWS = normalWS.xyz;
    
    v_color = a_color;
    v_uv0 = a_texCoords0;

    v_viewDirWS = u_viewPosition - v_positionWS;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_baseMap;
uniform vec4 u_color;
uniform float u_progress;
uniform float u_fresnelPower;

// NORMAL_MAP
uniform sampler2D u_normalMap;
uniform float u_normalScale;

// HOLOGRAM
uniform float u_hologramLines1;
uniform float u_hologramLines2;

//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec4 v_positionCS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec3 v_tangentWS;
IN vec3 v_bitangentWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec3 v_viewDirWS;
IN float v_distortionPower;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
uniform sampler2D u_modelMatricesTexture;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"
#include "Utils/Math.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;
    
    // View direction
    vec3 toView = normalize(v_viewDirWS);

    // Normal
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 normalTS = SampleNormalTS(u_normalMap, v_uv0, u_normalScale);
    mat3 tangentToWorld = mat3(normalize(v_tangentWS), normalize(v_bitangentWS), normalize(v_normalWS));
    vec3 normalWS = normalize(TransformTangentToWorld(normalTS, tangentToWorld));
#else
    vec3 normalWS = normalize(v_normalWS);
#endif

    float NdotV = dot(normalWS, toView);
    float fresnel = clamp(1.0 - NdotV, 0.0, 1.0);
    fresnel = pow(fresnel, u_fresnelPower);


    vec2 screenUV = (v_positionCS.xy / v_positionCS.w) * 0.5 + 0.5;
    
    
    // Noise
    float noise = MazeRandom(screenUV * u_time);
    
    // Lines 1
    vec2 igrid = floor(screenUV * u_hologramLines1);
    float l1 = mod(igrid.y, 2.0);
    l1 = mix(0.4, 1.0, l1);
    
    // Lines 2
    vec2 uv2 = screenUV;
    uv2.y += u_time * 0.06;
    vec2 igrid2 = floor(uv2 * u_hologramLines2);
    float l2 = MazeRandom(igrid2.y);
    l2 = step(0.2, l2);
    l2 = mix(0.2, 1.0, l2);
    
    // Final mask
    float mask = fresnel * fresnel * noise * noise * l1 * l2;
    
    // Linear color
    vec3 linearColor = vec3(mask, mask, mask) * u_color.rgb * mix(1.0, 4.0, v_distortionPower);
    
    out_color = vec4(linearColor * u_progress, u_color.a);
}

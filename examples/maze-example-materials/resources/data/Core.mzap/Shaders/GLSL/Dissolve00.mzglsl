//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec3 a_tangent;
IN vec3 a_bitangent;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec3 v_normalOS;
OUT vec3 v_normalWS;
OUT vec3 v_tangentWS;
OUT vec3 v_bitangentWS;
OUT vec4 v_color;
OUT vec2 v_uv0;
OUT vec3 v_viewDirWS;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
    
    vec4 normalOS = vec4(a_normal, 1.0);
    vec4 tangentOS = vec4(a_tangent, 1.0);
    vec4 bitangentOS = vec4(a_bitangent, 1.0);
    
    mat3 normalMatrix = mat3(modelMatrix);
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    
    vec3 normalWS = normalize(normalMatrix * normalOS.xyz).xyz;
    
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 tangentWS = normalize(normalMatrix * tangentOS.xyz).xyz;
    vec3 bitangentWS = normalize(normalMatrix * bitangentOS.xyz).xyz;
    
    v_tangentWS = tangentWS.xyz;
    v_bitangentWS = bitangentWS.xyz;
#endif
    
    v_normalOS = normalOS.xyz;
    v_normalWS = normalWS.xyz;
    
    v_color = a_color;
    v_uv0 = a_texCoords0;

    v_viewDirWS = u_viewPosition - v_positionWS;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_baseMap;
uniform vec4 u_color;
uniform vec4 u_ambientLightColor;
uniform float u_shininess;
uniform vec4 u_specularColor;

uniform sampler2D u_emissionMap;
uniform vec4 u_emissionColor;

// SPECULAR_MAP
uniform sampler2D u_specularMap;

// NORMAL_MAP
uniform sampler2D u_normalMap;
uniform float u_normalScale;

//////////////////////////////////////////
uniform float u_wavesNoise;
uniform float u_dissolveProgress;
uniform float u_edgeWidth;
uniform vec4 u_edgeColor;



//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec3 v_tangentWS;
IN vec3 v_bitangentWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec3 v_viewDirWS;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"
#include "Utils/Math.mzglsl"


//////////////////////////////////////////
float LerpInvEdgeFactor(float t)
{
    float x = (t * 2.0 - 1.0);
    float y = -(pow(abs(x), 0.75)) + 1.0;
    return y;
}
            

//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;
    
    float dissolveProgress = (sin(u_time) + 1.0) * 0.5;
    
    // Dissolve
    MAZE_HIGHP vec2 noiseUV = v_uv0 * u_wavesNoise;
    MAZE_HIGHP float noiseFactor = (MazeGradientNoise(noiseUV) + 1.0) * 0.5;
    
    float dissolveFactor = noiseFactor - dissolveProgress;
    if (dissolveFactor < 0.0)
    {
#if (MAZE_GL_CORE_PROFILE)
        out_color = vec4(0.0, 0.0, 0.0, 0.0);
        return;
#else
        discard;
#endif
    }
    
    float invDissolveProgress = 1.0 - dissolveProgress;
    
    float isEdgeZone = step(noiseFactor, dissolveProgress + u_edgeWidth);
    float edgeL = dissolveFactor / u_edgeWidth;
    float edgeFactor = LerpInvEdgeFactor(edgeL);
    edgeFactor = edgeFactor;

    // View direction
    vec3 fragmentToViewDirection = normalize(v_viewDirWS);

    // Normal
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 normalTS = SampleNormalTS(u_normalMap, v_uv0, u_normalScale);
    mat3 tangentToWorld = mat3(normalize(v_tangentWS), normalize(v_bitangentWS), normalize(v_normalWS));
    vec3 normalWS = normalize(TransformTangentToWorld(normalTS, tangentToWorld));
#else
    vec3 normalWS = normalize(v_normalWS);
#endif

    // Albedo
    vec4 albedo = texture(u_baseMap, v_uv0);
    
    // Diffuse color
    vec3 diffuseColor = albedo.rgb * u_color.rgb;
    diffuseColor.rgb *= invDissolveProgress * invDissolveProgress;
    
    // Ambient light
    vec3 ambientLightColor = u_ambientLightColor.rgb;
    
    // Main light
    vec3 mainLightDirection = u_mainLightDirection;
    vec3 fragmentToMainLightDirection = -mainLightDirection;
    vec3 mainLightColor = u_mainLightColor.rgb;
    float mainLightAttenuation = 1.0;
    
    // Lambertian
    float NdotL = dot(normalWS, fragmentToMainLightDirection);
    float lambertian = clamp(NdotL, 0.0, 1.0);
    
    // Main light final
    vec3 mainLightColorFinal = mainLightColor * mainLightAttenuation;
    
    // Half vector
    vec3 H = normalize(fragmentToMainLightDirection + fragmentToViewDirection);
    
    // Shininess
    float shininess = u_shininess;
    
    // Specular map
    float NdotH = dot(normalWS, H);
    float specular = pow(clamp(NdotH, 0.0, 1.0), max(pow(shininess, 3.0) * 512.0, 1.0));
    vec3 specularColor = u_specularColor.rgb * specular;
    
    // Specular map
#if defined(SPECULAR_MAP) && (SPECULAR_MAP)
    specularColor *= MAZE_GET_TEXEL2D(u_specularMap, v_uv0).rgb;
#endif
    
    // Linear color
    vec3 linearColor = 
        diffuseColor * ambientLightColor +
        diffuseColor * lambertian * mainLightColorFinal +
        specularColor * mainLightColorFinal;

    // Dissolve edge
    linearColor += mix(u_edgeColor.rgb, vec3(1,1,1), edgeFactor) * isEdgeZone * 5.0;

    // Emission map
#if defined(EMISSION_MAP) && (EMISSION_MAP)
    vec3 emissionColor = u_emissionColor.rgb * MAZE_GET_TEXEL2D(u_emissionMap, v_uv0).rgb;
    linearColor += emissionColor;
#endif
    
    out_color = vec4(linearColor, albedo.a);
}
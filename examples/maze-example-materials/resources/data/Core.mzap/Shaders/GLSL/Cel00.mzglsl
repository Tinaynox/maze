//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


//////////////////////////////////////////
uniform vec4 u_baseMapST;


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec3 a_tangent;
IN vec3 a_bitangent;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec3 v_normalOS;
OUT vec3 v_normalWS;
OUT vec3 v_tangentOS;
OUT vec3 v_tangentWS;
OUT vec3 v_bitangentOS;
OUT vec3 v_bitangentWS;
OUT vec4 v_color;
OUT vec2 v_uv0;
OUT vec3 v_viewDirWS;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
    
    vec4 normalOS = vec4(a_normal, 1.0);
    vec4 tangentOS = vec4(a_tangent, 1.0);
    vec4 bitangentOS = vec4(a_bitangent, 1.0);
    
    mat3 normalMatrix = mat3(modelMatrix);
    
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    
    vec3 normalWS = normalize(normalMatrix * normalOS.xyz).xyz;
    
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 tangentWS = normalize(normalMatrix * tangentOS.xyz).xyz;
    vec3 bitangentWS = normalize(normalMatrix * bitangentOS.xyz).xyz;
    
    v_tangentOS = tangentOS.xyz;
    v_tangentWS = tangentWS.xyz;
    v_bitangentOS = bitangentOS.xyz;
    v_bitangentWS = bitangentWS.xyz;
#endif
    
    v_normalOS = normalOS.xyz;
    v_normalWS = normalWS.xyz;
    
    v_color = a_color;
       
    v_uv0 = u_baseMapST.xy * a_texCoords0 + u_baseMapST.zw;

    v_viewDirWS = u_viewPosition - v_positionWS;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_baseMap;
uniform vec4 u_color;
uniform vec4 u_ambientLightColor;
uniform float u_shininess;
uniform vec4 u_specularColor;

// EMISSION_MAP
uniform sampler2D u_emissionMap;
uniform vec4 u_emissionColor;

// SPECULAR_MAP
uniform sampler2D u_specularMap;

// NORMAL_MAP
uniform sampler2D u_normalMap;
uniform float u_normalScale;

// LAMBERT_THRESHOLD
uniform float u_lambertThreshold;

// Cel shading
uniform int u_celLevel;


//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec3 v_tangentOS;
IN vec3 v_tangentWS;
IN vec3 v_bitangentOS;
IN vec3 v_bitangentWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec3 v_viewDirWS;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
// BlinnPhong
vec3 BlinnPhongLighting(
    vec3 diffuseColor,
    vec3 normalWS,
    vec3 fragmentToViewDirection,
    vec3 lightDirection,
    vec3 lightColor)
{
    // Light
    vec3 fragmentToLightDirection = -lightDirection;
    float lightAttenuation = 1.0;
    
    // Lambertian
    float NdotL = dot(normalWS, fragmentToLightDirection);
    float lambertian = clamp(NdotL, 0.0, 1.0);
    
    // Lambertian threshold
#if defined(LAMBERT_THRESHOLD) && (LAMBERT_THRESHOLD)
    lambertian = u_lambertThreshold + lambertian * (1.0f - u_lambertThreshold);
#endif
    
    // Light final
    vec3 lightColorFinal = lightColor * lightAttenuation;
    
    // Half vector
    vec3 H = normalize(fragmentToLightDirection + fragmentToViewDirection);
    
    // Shininess
    float shininess = u_shininess;
#if defined(SPECULAR_MAP) && (SPECULAR_MAP)
    shininess *= max(0.01, MAZE_GET_TEXEL2D(u_specularMap, v_uv0).a);
#endif
    
    // Specular
    float NdotH = dot(normalWS, H);    
    float specular = pow(clamp(NdotH, 0.0, 1.0), shininess * 512.0);
    vec3 specularColor = u_specularColor.rgb * specular;    
    
    // Specular map
#if defined(SPECULAR_MAP) && (SPECULAR_MAP)
    specularColor *= MAZE_GET_TEXEL2D(u_specularMap, v_uv0).rgb;
#endif

    return 
        diffuseColor * lambertian * lightColorFinal +
        specularColor * lightColorFinal;
}


//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;
    
    // View direction
    vec3 fragmentToViewDirection = normalize(v_viewDirWS);

    // Normal
#if defined(NORMAL_MAP) && (NORMAL_MAP)
    vec3 normalTS = SampleNormalTS(u_normalMap, v_uv0, u_normalScale);
    mat3 tangentToWorld = mat3(normalize(v_tangentWS), normalize(v_bitangentWS), normalize(v_normalWS));
    vec3 normalWS = normalize(TransformTangentToWorld(normalTS, tangentToWorld));
    
    
#else
    vec3 normalWS = normalize(v_normalWS);
#endif
        
    // Albedo
    vec4 albedo = MAZE_GET_TEXEL2D(u_baseMap, v_uv0) * u_color;
    
    // Diffuse color
    vec3 diffuseColor = albedo.rgb;
        
    // Linear color
    vec3 linearColor = diffuseColor;
               
    // Reset to LDR
    linearColor.r = min(linearColor.r, 1.0);
    linearColor.g = min(linearColor.g, 1.0);
    linearColor.b = min(linearColor.b, 1.0);
    
    // Emission map
#if defined(EMISSION_MAP) && (EMISSION_MAP)
    vec3 emissionColor = u_emissionColor.rgb * MAZE_GET_TEXEL2D(u_emissionMap, v_uv0).rgb;
    linearColor += emissionColor;
#endif

    vec3 fragmentToLightDirection = -normalize(u_mainLightDirection);
    // Lambertian
    float NdotL = dot(normalWS, fragmentToLightDirection);
    float lambertian = clamp(NdotL, 0.0, 1.0);
    
    float toonValue = float(u_celLevel) * lambertian;
    float toonLevel = ceil(toonValue) / float(u_celLevel);
        
    out_color = vec4(linearColor * toonLevel, albedo.a);
}
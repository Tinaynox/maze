//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_positionCS;
OUT vec3 v_normalOS;
OUT vec3 v_normalWS;
OUT vec4 v_color;
OUT vec2 v_uv0;
OUT vec3 v_viewDirWS;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
    
    vec4 normalOS = vec4(a_normal, 1.0);
    
    mat3 normalMatrix = mat3(MAZE_INVERSE(modelMatrix));
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_positionCS = positionCS;
    
    vec3 normalWS = normalize(normalOS.xyz * normalMatrix).xyz;
    
    v_normalOS = normalOS.xyz;
    v_normalWS = normalWS.xyz;
    
    v_color = a_color;
    v_uv0 = a_texCoords0;
    
    v_viewDirWS = u_viewPosition - v_positionWS;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"


//////////////////////////////////////////
uniform vec4 u_color;
uniform float u_refractionIndex; 
uniform float u_refractionFactor;
uniform sampler2D u_depthMap;


//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec4 v_positionCS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec3 v_viewDirWS;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;    
    
    // Check depth buffer
    vec2 screenUV = (v_positionCS.xy / v_positionCS.w) * 0.5 + 0.5;
    float depth0 = MAZE_GET_TEXEL2D(u_depthMap, screenUV).r;
    float depth1 = (v_positionCS.z / v_positionCS.w) * 0.5 + 0.5;
        
    if (depth1 >= depth0)
        discard;

    // View direction
    vec3 viewToFragmentDirection = -normalize(v_viewDirWS);
    
    // Calculate the refraction vector
    vec3 refractDir = refract(viewToFragmentDirection, v_normalWS, 1.0 / u_refractionIndex);
    
    vec2 distortion = refractDir.xy * vec2(u_refractionFactor, u_refractionFactor);
    out_color = vec4(distortion * u_color.rg, 0.0, 1.0);
}

//////////////////////////////////////////
float MazeRemap(
    float inMin, float inMax,
    float outMin, float outMax,
    float value)
{
    return outMin + (value - inMin) * (outMax - outMin) / (inMax - inMin);
}

//////////////////////////////////////////
float MazeRandom(vec2 st) 
{
    return fract(
        sin(
            dot(
                st.xy,
                vec2(12.9898, 78.233))) * 43758.5453123);
}

//////////////////////////////////////////
vec2 MazeRandom2(vec2 st)
{
    st = vec2(
        dot(st, vec2(127.1, 311.7)),
        dot(st, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);
}

//////////////////////////////////////////
float MazeGradientNoise(vec2 st)
{
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(
        mix(dot(MazeRandom2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),
            dot(MazeRandom2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),
        mix(dot(MazeRandom2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),
            dot(MazeRandom2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);
}

//////////////////////////////////////////
float MazeMod289(float x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

//////////////////////////////////////////
vec4 MazeMod289(vec4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

//////////////////////////////////////////
vec4 MazePerm(vec4 x)
{
    return MazeMod289(((x * 34.0) + 1.0) * x);
}

//////////////////////////////////////////
float MazeNoise3D(vec3 p)
{
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = MazePerm(b.xyxy);
    vec4 k2 = MazePerm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = MazePerm(c);
    vec4 k4 = MazePerm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}
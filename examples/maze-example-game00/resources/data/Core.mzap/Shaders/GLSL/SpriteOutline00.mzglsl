//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_color;
OUT vec2 v_uv0;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_color = a_color;
    v_uv0 = a_texCoords0;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_baseMap;
uniform vec2 u_baseMapTexelSize;
uniform vec4 u_color;


//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec4 v_color;
IN vec2 v_uv0;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
uniform sampler2D u_modelMatricesTexture;


//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;
    
    vec4 textureColor = texture(u_baseMap, v_uv0);
    
    float leftPixel = texture(u_baseMap, v_uv0 + vec2(-u_baseMapTexelSize.x, 0.0)).a;
    float rightPixel = texture(u_baseMap, v_uv0 + vec2(+u_baseMapTexelSize.x, 0.0)).a;
    float downPixel = texture(u_baseMap, v_uv0 + vec2(0.0, -u_baseMapTexelSize.y)).a;
    float upPixel = texture(u_baseMap, v_uv0 + vec2(0.0, +u_baseMapTexelSize.y)).a;
    
    float outline = max(max(leftPixel, upPixel), max(rightPixel, downPixel)) - textureColor.a;
    // float outline = (1.0 - leftPixel * upPixel * rightPixel * downPixel) * textureColor.a;

    // Albedo
    vec4 albedo = textureColor * v_color * u_color;
    
    // Diffuse color
    vec3 diffuseColor = albedo.rgb;
        
    // Linear color
    vec3 linearColor = diffuseColor;
    
    out_color = mix(vec4(linearColor, albedo.a), vec4(0, 0, 0, 1), outline);
}

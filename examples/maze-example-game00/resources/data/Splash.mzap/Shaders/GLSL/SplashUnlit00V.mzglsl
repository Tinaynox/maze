//////////////////////////////////////////
#if (defined(GL_ES))
    precision highp float;
    #if (MAZE_GLSL_VERSION > 100)
        precision highp usampler2D;
    #endif
#endif


//////////////////////////////////////////
uniform mat4 u_projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 u_viewPosition;


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_color;
OUT vec2 v_uv0;


//////////////////////////////////////////
#if (MAZE_MODEL_MATRICES_VIA_TEXTURE)
    uniform sampler2D u_modelMatricesTexture;
    uniform int u_modelMatricesTextureSize;
    uniform int u_modelMatriciesOffset;


    //////////////////////////////////////////
    mat4 GetModelMatrix(int instanceId)
    {
        int modelMatrixIndex = instanceId + u_modelMatriciesOffset;
        int r = 4 * modelMatrixIndex / u_modelMatricesTextureSize;
        int c = 4 * modelMatrixIndex % u_modelMatricesTextureSize;

        ivec2 pos0 = ivec2(c + 0, r);
        ivec2 pos1 = ivec2(c + 1, r);
        ivec2 pos2 = ivec2(c + 2, r);
        ivec2 pos3 = ivec2(c + 3, r);
    
        return mat4( 
            texelFetch(u_modelMatricesTexture, pos0, 0).xyzw,
            texelFetch(u_modelMatricesTexture, pos1, 0).xyzw,
            texelFetch(u_modelMatricesTexture, pos2, 0).xyzw,
            texelFetch(u_modelMatricesTexture, pos3, 0).xyzw);
    }
    
#elif (MAZE_MODEL_MATRICES_VIA_ARRAY)
    uniform mat4 u_modelMatrices[32];

    //////////////////////////////////////////
    mat4 GetModelMatrix(int instanceId)
    {
        return u_modelMatrices[instanceId];
    }

#endif


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = positionOS * modelMatrix;
    vec4 positionVS = positionWS * viewMatrix;
    vec4 positionCS = positionVS * u_projectionMatrix;
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_color = a_color;
    v_uv0 = a_texCoords0;

    gl_Position = positionCS;
}

//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"

#if (SKIN)
    #include "Utils/Skinning.mzglsl"
#endif


//////////////////////////////////////////
IN vec3 a_position;
IN vec4 a_blendWeights;
IN vec4 a_blendIndices;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    
#if (SKIN)
#if (SKIN_ZERO_WEIGHT_SUPPORT)
    if (a_blendWeights.x + a_blendWeights.y + a_blendWeights.z + a_blendWeights.w > 0.0)
#endif
    {
        vec4 skinnedPositionOS = vec4(0.0);

        for (int bone = 0; bone < 4; ++bone)
        {
            int boneIndex = int(a_blendIndices[bone]);
            float boneWeight = a_blendWeights[bone];
            
            int boneTransformIndex = boneIndex * 4;
            vec3 row0 = u_boneSkinningTransforms[boneTransformIndex];
            vec3 row1 = u_boneSkinningTransforms[boneTransformIndex + 1];
            vec3 row2 = u_boneSkinningTransforms[boneTransformIndex + 2];
            vec3 row3 = u_boneSkinningTransforms[boneTransformIndex + 3];
        
            mat4 boneMatrix = mat4(
                vec4(row0, 0.0),
                vec4(row1, 0.0),
                vec4(row2, 0.0),
                vec4(row3, 1.0));
            skinnedPositionOS += (boneMatrix * vec4(a_position, 1.0)) * boneWeight;
        }
        positionOS = vec4(skinnedPositionOS.xyz, 1.0);
    }
#endif
    
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
    
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
}

//////////////////////////////////////////
// Vertex Shader
//
//////////////////////////////////////////
#type vertex

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Vertex.mzglsl"


//////////////////////////////////////////
uniform vec2 u_baseMapTexelSize;
uniform float u_bloomSpread;


//////////////////////////////////////////
IN vec3 a_position;
IN vec3 a_normal;
IN vec4 a_color;
IN vec2 a_texCoords0;


//////////////////////////////////////////
OUT vec3 v_positionOS;
OUT vec3 v_positionWS;
OUT vec3 v_positionVS;
OUT vec4 v_color;
OUT vec2 v_uv0;
OUT vec4 v_uv12;
OUT vec4 v_uv34;


//////////////////////////////////////////
#include "Utils/Core.mzglsl"


//////////////////////////////////////////
// Main
void main()
{
    
    int instanceId = gl_InstanceID;
    
    mat4 modelMatrix = GetModelMatrix(instanceId);
    mat4 viewMatrix = GetViewMatrix();

    vec4 positionOS = vec4(a_position, 1.0);
    vec4 positionWS = modelMatrix * positionOS;
    MAZE_CLIP_DISTANCE_VERTEX(positionWS);
    vec4 positionVS = viewMatrix * positionWS;
    vec4 positionCS = u_projectionMatrix * positionVS;
        
#if (MAZE_LHCS)
    positionCS.z = -positionCS.z;
#endif
    
    v_positionOS = positionOS.xyz;
    v_positionWS = positionWS.xyz;
    v_positionVS = positionVS.xyz;
    v_color = a_color;
    v_uv0 = a_texCoords0;
    
    vec2 bloomTexelSpread = u_baseMapTexelSize * u_bloomSpread;
    v_uv12.xy = a_texCoords0 + vec2(1.0, 1.0) * bloomTexelSpread;
    v_uv12.zw = a_texCoords0 + vec2(-1.0, 1.0) * bloomTexelSpread;
    v_uv34.xy = a_texCoords0 + vec2(-1.0, -1.0) * bloomTexelSpread;
    v_uv34.zw = a_texCoords0 + vec2(1.0, -1.0) * bloomTexelSpread;

    gl_Position = positionCS;
}


//////////////////////////////////////////
// Fragment Shader
//
//////////////////////////////////////////
#type fragment

//////////////////////////////////////////
#include "Utils/PrecisionHigh.mzglsl"
#include "Utils/Fragment.mzglsl"


//////////////////////////////////////////
uniform sampler2D u_baseMap;
uniform vec4 u_color;
uniform float u_bloomThreshold;


//////////////////////////////////////////
IN vec3 v_positionOS;
IN vec3 v_positionWS;
IN vec3 v_positionVS;
IN vec3 v_normalOS;
IN vec3 v_normalWS;
IN vec4 v_color;
IN vec2 v_uv0;
IN vec4 v_uv12;
IN vec4 v_uv34;


//////////////////////////////////////////
MAZE_LAYOUT_LOCATION(0) out vec4 out_color;


//////////////////////////////////////////
uniform sampler2D u_modelMatricesTexture;


//////////////////////////////////////////
// Main
void main()
{
    MAZE_CLIP_DISTANCE_FRAGMENT;
    
    float bloomThreshold = u_bloomThreshold;

    vec3 diffuseColor0 = texture(u_baseMap, v_uv0).rgb;
    vec3 diffuseColor1 = texture(u_baseMap, v_uv12.xy).rgb;
    vec3 diffuseColor2 = texture(u_baseMap, v_uv12.zw).rgb;
    vec3 diffuseColor3 = texture(u_baseMap, v_uv34.xy).rgb;
    vec3 diffuseColor4 = texture(u_baseMap, v_uv34.zw).rgb;
    
    vec3 diffuseColor = diffuseColor0 * 0.5 + diffuseColor1 * 0.125 + diffuseColor2 * 0.125 + diffuseColor3 * 0.125 + diffuseColor4 * 0.125;
        
    // Linear color
    vec3 linearColor = vec3(
        max(0.0, diffuseColor.r - bloomThreshold),
        max(0.0, diffuseColor.g - bloomThreshold),
        max(0.0, diffuseColor.b - bloomThreshold)) * 1.25;
            
    out_color = vec4(linearColor, 1.0);
}

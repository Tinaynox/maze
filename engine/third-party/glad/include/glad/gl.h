/**
 * Loader generated by glad 2.0.0-beta on Wed Jul 17 20:53:00 2019
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 44
 *
 * APIs:
 *  - gl:compatibility=1.1
 *  - gles1:common=1.0
 *
 * Options:
 *  - MX_GLOBAL = False
 *  - ON_DEMAND = False
 *  - LOADER = False
 *  - ALIAS = True
 *  - HEADER_ONLY = True
 *  - DEBUG = False
 *  - MX = False
 *
 * Commandline:
 *    --merge --api='gl:compatibility=1.1,gles1:common=1.0' --extensions='GL_ARB_copy_buffer,GL_ARB_fragment_shader,GL_ARB_framebuffer_object,GL_ARB_geometry_shader4,GL_ARB_get_program_binary,GL_ARB_imaging,GL_ARB_multitexture,GL_ARB_separate_shader_objects,GL_ARB_shader_objects,GL_ARB_shading_language_100,GL_ARB_texture_non_power_of_two,GL_ARB_vertex_buffer_object,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_EXT_blend_equation_separate,GL_EXT_blend_func_separate,GL_EXT_blend_minmax,GL_EXT_blend_subtract,GL_EXT_copy_texture,GL_EXT_framebuffer_blit,GL_EXT_framebuffer_multisample,GL_EXT_framebuffer_object,GL_EXT_geometry_shader4,GL_EXT_packed_depth_stencil,GL_EXT_subtexture,GL_EXT_texture_array,GL_EXT_texture_object,GL_EXT_texture_sRGB,GL_EXT_vertex_array,GL_INGR_blend_func_separate,GL_KHR_debug,GL_NV_geometry_program4,GL_NV_vertex_program,GL_SGIS_texture_edge_clamp,GL_EXT_sRGB,GL_OES_blend_equation_separate,GL_OES_blend_func_separate,GL_OES_blend_subtract,GL_OES_depth24,GL_OES_depth32,GL_OES_framebuffer_object,GL_OES_packed_depth_stencil,GL_OES_single_precision,GL_OES_texture_npot' c --alias --header-only
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acompatibility%3D1.1%2Cgles1%3Acommon%3D1.0&extensions=GL_ARB_copy_buffer%2CGL_ARB_fragment_shader%2CGL_ARB_framebuffer_object%2CGL_ARB_geometry_shader4%2CGL_ARB_get_program_binary%2CGL_ARB_imaging%2CGL_ARB_multitexture%2CGL_ARB_separate_shader_objects%2CGL_ARB_shader_objects%2CGL_ARB_shading_language_100%2CGL_ARB_texture_non_power_of_two%2CGL_ARB_vertex_buffer_object%2CGL_ARB_vertex_program%2CGL_ARB_vertex_shader%2CGL_EXT_blend_equation_separate%2CGL_EXT_blend_func_separate%2CGL_EXT_blend_minmax%2CGL_EXT_blend_subtract%2CGL_EXT_copy_texture%2CGL_EXT_framebuffer_blit%2CGL_EXT_framebuffer_multisample%2CGL_EXT_framebuffer_object%2CGL_EXT_geometry_shader4%2CGL_EXT_packed_depth_stencil%2CGL_EXT_subtexture%2CGL_EXT_texture_array%2CGL_EXT_texture_object%2CGL_EXT_texture_sRGB%2CGL_EXT_vertex_array%2CGL_INGR_blend_func_separate%2CGL_KHR_debug%2CGL_NV_geometry_program4%2CGL_NV_vertex_program%2CGL_SGIS_texture_edge_clamp%2CGL_EXT_sRGB%2CGL_OES_blend_equation_separate%2CGL_OES_blend_func_separate%2CGL_OES_blend_subtract%2CGL_OES_depth24%2CGL_OES_depth32%2CGL_OES_framebuffer_object%2CGL_OES_packed_depth_stencil%2CGL_OES_single_precision%2CGL_OES_texture_npot&generator=c&options=MERGE%2CALIAS%2CHEADER_ONLY
 *
 */

#ifndef MAZE_GLAD_GL_H_
#define MAZE_GLAD_GL_H_

#ifdef __gl_h_
    #error OpenGL header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1


#define MAZE_GLAD_GL
#define GLAD_OPTION_GL_ALIAS
#define GLAD_OPTION_GL_HEADER_ONLY

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.0-beta"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_ADD 0x0104
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_SCALE 0x0D1A
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_BUFFER 0x82E0
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CCW 0x0901
#define GL_CLAMP 0x2900
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_CLEAR 0x1500
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_CW 0x0900
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DISPLAY_LIST 0x82E7
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FILL 0x1B02
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_SCALE 0x0D18
#define GL_HINT_BIT 0x00008000
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_IDENTITY_NV 0x862A
#define GL_INCR 0x1E02
#define GL_INDEX 0x8222
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INT 0x1404
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4_ARB 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERSE_NV 0x862B
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX7_NV 0x8637
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX_MODE 0x0BA0
#define GL_MAX 0x8008
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_EXT 0x8008
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MIN 0x8007
#define GL_MINMAX 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MIN_EXT 0x8007
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_N3F_V3F 0x2A25
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_PLANE 0x2501
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADS 0x0007
#define GL_QUAD_STRIP 0x0008
#define GL_QUERY 0x82E3
#define GL_R 0x2002
#define GL_R3_G3_B2 0x2A10
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_READ_WRITE_ARB 0x88BA
#define GL_RED 0x1903
#define GL_REDUCE 0x8016
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_SCALE 0x0D14
#define GL_RENDER 0x1C00
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERER 0x1F01
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_REPLICATE_BORDER 0x8153
#define GL_RETURN 0x0102
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA_MODE 0x0C31
#define GL_RIGHT 0x0407
#define GL_S 0x2000
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SEPARABLE_2D 0x8012
#define GL_SET 0x150F
#define GL_SHADER 0x82E1
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADE_MODEL 0x0B54
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SMOOTH 0x1D01
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB_EXT 0x8C40
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ_ARB 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31_ARB 0x84DF
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_TRANSPOSE_NV 0x862C
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRUE 1
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ADD_SIGNED 0x8574
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CONSTANT 0x8576
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_FIXED 0x140C
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_FUNC_ADD_OES 0x8006
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_INTERPOLATE 0x8575
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MULTISAMPLE 0x809D
#define GL_NONE_OES 0
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_RESCALE_NORMAL 0x803A
#define GL_RGB565_OES 0x8D62
#define GL_RGB5_A1_OES 0x8057
#define GL_RGBA4_OES 0x8056
#define GL_RGB_SCALE 0x8573
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_STATIC_DRAW 0x88E4
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_SUBTRACT 0x84E7
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(KHRONOS_STATIC)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void ( *GLVULKANPROCNV)(void);


#define GL_VERSION_1_0 1
GLAD_API_CALL int MAZE_GLAD_GL_VERSION_1_0;
#define GL_VERSION_1_1 1
GLAD_API_CALL int MAZE_GLAD_GL_VERSION_1_1;
#define GL_VERSION_ES_CM_1_0 1
GLAD_API_CALL int MAZE_GLAD_GL_VERSION_ES_CM_1_0;
#define GL_ARB_copy_buffer 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_copy_buffer;
#define GL_ARB_fragment_shader 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_fragment_shader;
#define GL_ARB_framebuffer_object 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_framebuffer_object;
#define GL_ARB_geometry_shader4 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_geometry_shader4;
#define GL_ARB_get_program_binary 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_get_program_binary;
#define GL_ARB_imaging 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_imaging;
#define GL_ARB_multitexture 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_multitexture;
#define GL_ARB_separate_shader_objects 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_separate_shader_objects;
#define GL_ARB_shader_objects 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_shader_objects;
#define GL_ARB_shading_language_100 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_shading_language_100;
#define GL_ARB_texture_non_power_of_two 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_texture_non_power_of_two;
#define GL_ARB_vertex_buffer_object 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_vertex_buffer_object;
#define GL_ARB_vertex_program 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_vertex_program;
#define GL_ARB_vertex_shader 1
GLAD_API_CALL int MAZE_GLAD_GL_ARB_vertex_shader;
#define GL_EXT_blend_equation_separate 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_blend_equation_separate;
#define GL_EXT_blend_func_separate 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_blend_func_separate;
#define GL_EXT_blend_minmax 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_blend_minmax;
#define GL_EXT_blend_subtract 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_blend_subtract;
#define GL_EXT_copy_texture 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_copy_texture;
#define GL_EXT_framebuffer_blit 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_framebuffer_blit;
#define GL_EXT_framebuffer_multisample 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_framebuffer_multisample;
#define GL_EXT_framebuffer_object 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_framebuffer_object;
#define GL_EXT_geometry_shader4 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_geometry_shader4;
#define GL_EXT_packed_depth_stencil 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_packed_depth_stencil;
#define GL_EXT_subtexture 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_subtexture;
#define GL_EXT_texture_array 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_texture_array;
#define GL_EXT_texture_object 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_texture_object;
#define GL_EXT_texture_sRGB 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_texture_sRGB;
#define GL_EXT_vertex_array 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_vertex_array;
#define GL_INGR_blend_func_separate 1
GLAD_API_CALL int MAZE_GLAD_GL_INGR_blend_func_separate;
#define GL_KHR_debug 1
GLAD_API_CALL int MAZE_GLAD_GL_KHR_debug;
#define GL_NV_geometry_program4 1
GLAD_API_CALL int MAZE_GLAD_GL_NV_geometry_program4;
#define GL_NV_vertex_program 1
GLAD_API_CALL int MAZE_GLAD_GL_NV_vertex_program;
#define GL_SGIS_texture_edge_clamp 1
GLAD_API_CALL int MAZE_GLAD_GL_SGIS_texture_edge_clamp;
#define GL_EXT_sRGB 1
GLAD_API_CALL int MAZE_GLAD_GL_EXT_sRGB;
#define GL_OES_blend_equation_separate 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_blend_equation_separate;
#define GL_OES_blend_func_separate 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_blend_func_separate;
#define GL_OES_blend_subtract 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_blend_subtract;
#define GL_OES_depth24 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_depth24;
#define GL_OES_depth32 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_depth32;
#define GL_OES_framebuffer_object 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_framebuffer_object;
#define GL_OES_packed_depth_stencil 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_packed_depth_stencil;
#define GL_OES_single_precision 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_single_precision;
#define GL_OES_texture_npot 1
GLAD_API_CALL int MAZE_GLAD_GL_OES_texture_npot;


typedef void (GLAD_API_PTR *PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef GLboolean (GLAD_API_PTR *PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint * programs, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLBEGINPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef void (GLAD_API_PTR *PFNGLCALLLISTPROC)(GLuint list);
typedef void (GLAD_API_PTR *PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void * lists);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void (GLAD_API_PTR *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGVPROC)(const GLboolean * flag);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDLISTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (GLAD_API_PTR *PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT1PROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (GLAD_API_PTR *PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat * buffer);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFOGFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFOGIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint (GLAD_API_PTR *PFNGLGENLISTSPROC)(GLsizei range);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void * table);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void * image);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef GLhandleARB (GLAD_API_PTR *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVEXTPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint * params);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXDPROC)(GLdouble c);
typedef void (GLAD_API_PTR *PFNGLINDEXDVPROC)(const GLdouble * c);
typedef void (GLAD_API_PTR *PFNGLINDEXFPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLINDEXFVPROC)(const GLfloat * c);
typedef void (GLAD_API_PTR *PFNGLINDEXIPROC)(GLint c);
typedef void (GLAD_API_PTR *PFNGLINDEXIVPROC)(const GLint * c);
typedef void (GLAD_API_PTR *PFNGLINDEXSPROC)(GLshort c);
typedef void (GLAD_API_PTR *PFNGLINDEXSVPROC)(const GLshort * c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBPROC)(GLubyte c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBVPROC)(const GLubyte * c);
typedef void (GLAD_API_PTR *PFNGLINITNAMESPROC)(void);
typedef void (GLAD_API_PTR *PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void * pointer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISLISTPROC)(GLuint list);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREEXTPROC)(GLuint texture);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLLISTBASEPROC)(GLuint base);
typedef void (GLAD_API_PTR *PFNGLLOADIDENTITYPROC)(void);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (GLAD_API_PTR *PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPOLYGONSTIPPLEPROC)(const GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLPOPATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPNAMEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
typedef void (GLAD_API_PTR *PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (GLAD_API_PTR *PFNGLPUSHMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (GLAD_API_PTR *PFNGLRECTDVPROC)(const GLdouble * v1, const GLdouble * v2);
typedef void (GLAD_API_PTR *PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (GLAD_API_PTR *PFNGLRECTFVPROC)(const GLfloat * v1, const GLfloat * v2);
typedef void (GLAD_API_PTR *PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (GLAD_API_PTR *PFNGLRECTIVPROC)(const GLint * v1, const GLint * v2);
typedef void (GLAD_API_PTR *PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (GLAD_API_PTR *PFNGLRECTSVPROC)(const GLshort * v1, const GLshort * v2);
typedef GLint (GLAD_API_PTR *PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLRESETHISTOGRAMPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESETMINMAXPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint * buffer);
typedef void (GLAD_API_PTR *PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void (GLAD_API_PTR *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCXPROC)(GLenum func, GLfixed ref);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEROESPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEROESPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONOESPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEOESPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEOESPROC)(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSOESPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORXPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFOESPROC)(GLclampf depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHXPROC)(GLfixed depth);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFPROC)(GLenum p, const GLfloat * eqn);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEXPROC)(GLenum plane, const GLfixed * equation);
typedef void (GLAD_API_PTR *PFNGLCOLOR4XPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSOESPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSOESPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFOESPROC)(GLclampf n, GLclampf f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEXPROC)(GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLFOGXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLFOGXVPROC)(GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEROESPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DOESPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMFPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMXPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSOESPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSOESPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPOESPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEFPROC)(GLenum plane, GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEXPROC)(GLenum plane, GLfixed * equation);
typedef void (GLAD_API_PTR *PFNGLGETFIXEDVPROC)(GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTXVPROC)(GLenum light, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALXVPROC)(GLenum face, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVOESPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVXVPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERXVPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEROESPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEROESPROC)(GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELXVPROC)(GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLLIGHTXPROC)(GLenum light, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLLIGHTXVPROC)(GLenum light, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHXPROC)(GLfixed width);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXXPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLMATERIALXPROC)(GLenum face, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLMATERIALXVPROC)(GLenum face, GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXXPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4XPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (GLAD_API_PTR *PFNGLNORMAL3XPROC)(GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (GLAD_API_PTR *PFNGLORTHOFPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLORTHOXPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERXVPROC)(GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEXPROC)(GLfixed size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETXPROC)(GLfixed factor, GLfixed units);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEOESPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLROTATEXPROC)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEXPROC)(GLclampx value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSCALEXPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLTEXENVXPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXENVXVPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERXPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERXVPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEXPROC)(GLfixed x, GLfixed y, GLfixed z);

GLAD_API_CALL PFNGLACCUMPROC mz_glad_glAccum;
#define glAccum mz_glad_glAccum
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC mz_glad_glActiveShaderProgram;
#define glActiveShaderProgram mz_glad_glActiveShaderProgram
GLAD_API_CALL PFNGLACTIVETEXTUREPROC mz_glad_glActiveTexture;
#define glActiveTexture mz_glad_glActiveTexture
GLAD_API_CALL PFNGLACTIVETEXTUREARBPROC mz_glad_glActiveTextureARB;
#define glActiveTextureARB mz_glad_glActiveTextureARB
GLAD_API_CALL PFNGLALPHAFUNCPROC mz_glad_glAlphaFunc;
#define glAlphaFunc mz_glad_glAlphaFunc
GLAD_API_CALL PFNGLAREPROGRAMSRESIDENTNVPROC mz_glad_glAreProgramsResidentNV;
#define glAreProgramsResidentNV mz_glad_glAreProgramsResidentNV
GLAD_API_CALL PFNGLARETEXTURESRESIDENTPROC mz_glad_glAreTexturesResident;
#define glAreTexturesResident mz_glad_glAreTexturesResident
GLAD_API_CALL PFNGLARETEXTURESRESIDENTEXTPROC mz_glad_glAreTexturesResidentEXT;
#define glAreTexturesResidentEXT mz_glad_glAreTexturesResidentEXT
GLAD_API_CALL PFNGLARRAYELEMENTPROC mz_glad_glArrayElement;
#define glArrayElement mz_glad_glArrayElement
GLAD_API_CALL PFNGLARRAYELEMENTEXTPROC mz_glad_glArrayElementEXT;
#define glArrayElementEXT mz_glad_glArrayElementEXT
GLAD_API_CALL PFNGLATTACHOBJECTARBPROC mz_glad_glAttachObjectARB;
#define glAttachObjectARB mz_glad_glAttachObjectARB
GLAD_API_CALL PFNGLATTACHSHADERPROC mz_glad_glAttachShader;
#define glAttachShader mz_glad_glAttachShader
GLAD_API_CALL PFNGLBEGINPROC mz_glad_glBegin;
#define glBegin mz_glad_glBegin
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC mz_glad_glBindAttribLocation;
#define glBindAttribLocation mz_glad_glBindAttribLocation
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONARBPROC mz_glad_glBindAttribLocationARB;
#define glBindAttribLocationARB mz_glad_glBindAttribLocationARB
GLAD_API_CALL PFNGLBINDBUFFERPROC mz_glad_glBindBuffer;
#define glBindBuffer mz_glad_glBindBuffer
GLAD_API_CALL PFNGLBINDBUFFERARBPROC mz_glad_glBindBufferARB;
#define glBindBufferARB mz_glad_glBindBufferARB
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC mz_glad_glBindFramebuffer;
#define glBindFramebuffer mz_glad_glBindFramebuffer
GLAD_API_CALL PFNGLBINDFRAMEBUFFEREXTPROC mz_glad_glBindFramebufferEXT;
#define glBindFramebufferEXT mz_glad_glBindFramebufferEXT
GLAD_API_CALL PFNGLBINDPROGRAMARBPROC mz_glad_glBindProgramARB;
#define glBindProgramARB mz_glad_glBindProgramARB
GLAD_API_CALL PFNGLBINDPROGRAMNVPROC mz_glad_glBindProgramNV;
#define glBindProgramNV mz_glad_glBindProgramNV
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC mz_glad_glBindProgramPipeline;
#define glBindProgramPipeline mz_glad_glBindProgramPipeline
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC mz_glad_glBindRenderbuffer;
#define glBindRenderbuffer mz_glad_glBindRenderbuffer
GLAD_API_CALL PFNGLBINDRENDERBUFFEREXTPROC mz_glad_glBindRenderbufferEXT;
#define glBindRenderbufferEXT mz_glad_glBindRenderbufferEXT
GLAD_API_CALL PFNGLBINDTEXTUREPROC mz_glad_glBindTexture;
#define glBindTexture mz_glad_glBindTexture
GLAD_API_CALL PFNGLBINDTEXTUREEXTPROC mz_glad_glBindTextureEXT;
#define glBindTextureEXT mz_glad_glBindTextureEXT
GLAD_API_CALL PFNGLBITMAPPROC mz_glad_glBitmap;
#define glBitmap mz_glad_glBitmap
GLAD_API_CALL PFNGLBLENDCOLORPROC mz_glad_glBlendColor;
#define glBlendColor mz_glad_glBlendColor
GLAD_API_CALL PFNGLBLENDEQUATIONPROC mz_glad_glBlendEquation;
#define glBlendEquation mz_glad_glBlendEquation
GLAD_API_CALL PFNGLBLENDEQUATIONEXTPROC mz_glad_glBlendEquationEXT;
#define glBlendEquationEXT mz_glad_glBlendEquationEXT
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC mz_glad_glBlendEquationSeparate;
#define glBlendEquationSeparate mz_glad_glBlendEquationSeparate
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEEXTPROC mz_glad_glBlendEquationSeparateEXT;
#define glBlendEquationSeparateEXT mz_glad_glBlendEquationSeparateEXT
GLAD_API_CALL PFNGLBLENDFUNCPROC mz_glad_glBlendFunc;
#define glBlendFunc mz_glad_glBlendFunc
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC mz_glad_glBlendFuncSeparate;
#define glBlendFuncSeparate mz_glad_glBlendFuncSeparate
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEEXTPROC mz_glad_glBlendFuncSeparateEXT;
#define glBlendFuncSeparateEXT mz_glad_glBlendFuncSeparateEXT
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINGRPROC mz_glad_glBlendFuncSeparateINGR;
#define glBlendFuncSeparateINGR mz_glad_glBlendFuncSeparateINGR
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC mz_glad_glBlitFramebuffer;
#define glBlitFramebuffer mz_glad_glBlitFramebuffer
GLAD_API_CALL PFNGLBLITFRAMEBUFFEREXTPROC mz_glad_glBlitFramebufferEXT;
#define glBlitFramebufferEXT mz_glad_glBlitFramebufferEXT
GLAD_API_CALL PFNGLBUFFERDATAPROC mz_glad_glBufferData;
#define glBufferData mz_glad_glBufferData
GLAD_API_CALL PFNGLBUFFERDATAARBPROC mz_glad_glBufferDataARB;
#define glBufferDataARB mz_glad_glBufferDataARB
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC mz_glad_glBufferSubData;
#define glBufferSubData mz_glad_glBufferSubData
GLAD_API_CALL PFNGLBUFFERSUBDATAARBPROC mz_glad_glBufferSubDataARB;
#define glBufferSubDataARB mz_glad_glBufferSubDataARB
GLAD_API_CALL PFNGLCALLLISTPROC mz_glad_glCallList;
#define glCallList mz_glad_glCallList
GLAD_API_CALL PFNGLCALLLISTSPROC mz_glad_glCallLists;
#define glCallLists mz_glad_glCallLists
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC mz_glad_glCheckFramebufferStatus;
#define glCheckFramebufferStatus mz_glad_glCheckFramebufferStatus
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC mz_glad_glCheckFramebufferStatusEXT;
#define glCheckFramebufferStatusEXT mz_glad_glCheckFramebufferStatusEXT
GLAD_API_CALL PFNGLCLEARPROC mz_glad_glClear;
#define glClear mz_glad_glClear
GLAD_API_CALL PFNGLCLEARACCUMPROC mz_glad_glClearAccum;
#define glClearAccum mz_glad_glClearAccum
GLAD_API_CALL PFNGLCLEARCOLORPROC mz_glad_glClearColor;
#define glClearColor mz_glad_glClearColor
GLAD_API_CALL PFNGLCLEARDEPTHPROC mz_glad_glClearDepth;
#define glClearDepth mz_glad_glClearDepth
GLAD_API_CALL PFNGLCLEARINDEXPROC mz_glad_glClearIndex;
#define glClearIndex mz_glad_glClearIndex
GLAD_API_CALL PFNGLCLEARSTENCILPROC mz_glad_glClearStencil;
#define glClearStencil mz_glad_glClearStencil
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREPROC mz_glad_glClientActiveTexture;
#define glClientActiveTexture mz_glad_glClientActiveTexture
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREARBPROC mz_glad_glClientActiveTextureARB;
#define glClientActiveTextureARB mz_glad_glClientActiveTextureARB
GLAD_API_CALL PFNGLCLIPPLANEPROC mz_glad_glClipPlane;
#define glClipPlane mz_glad_glClipPlane
GLAD_API_CALL PFNGLCOLOR3BPROC mz_glad_glColor3b;
#define glColor3b mz_glad_glColor3b
GLAD_API_CALL PFNGLCOLOR3BVPROC mz_glad_glColor3bv;
#define glColor3bv mz_glad_glColor3bv
GLAD_API_CALL PFNGLCOLOR3DPROC mz_glad_glColor3d;
#define glColor3d mz_glad_glColor3d
GLAD_API_CALL PFNGLCOLOR3DVPROC mz_glad_glColor3dv;
#define glColor3dv mz_glad_glColor3dv
GLAD_API_CALL PFNGLCOLOR3FPROC mz_glad_glColor3f;
#define glColor3f mz_glad_glColor3f
GLAD_API_CALL PFNGLCOLOR3FVPROC mz_glad_glColor3fv;
#define glColor3fv mz_glad_glColor3fv
GLAD_API_CALL PFNGLCOLOR3IPROC mz_glad_glColor3i;
#define glColor3i mz_glad_glColor3i
GLAD_API_CALL PFNGLCOLOR3IVPROC mz_glad_glColor3iv;
#define glColor3iv mz_glad_glColor3iv
GLAD_API_CALL PFNGLCOLOR3SPROC mz_glad_glColor3s;
#define glColor3s mz_glad_glColor3s
GLAD_API_CALL PFNGLCOLOR3SVPROC mz_glad_glColor3sv;
#define glColor3sv mz_glad_glColor3sv
GLAD_API_CALL PFNGLCOLOR3UBPROC mz_glad_glColor3ub;
#define glColor3ub mz_glad_glColor3ub
GLAD_API_CALL PFNGLCOLOR3UBVPROC mz_glad_glColor3ubv;
#define glColor3ubv mz_glad_glColor3ubv
GLAD_API_CALL PFNGLCOLOR3UIPROC mz_glad_glColor3ui;
#define glColor3ui mz_glad_glColor3ui
GLAD_API_CALL PFNGLCOLOR3UIVPROC mz_glad_glColor3uiv;
#define glColor3uiv mz_glad_glColor3uiv
GLAD_API_CALL PFNGLCOLOR3USPROC mz_glad_glColor3us;
#define glColor3us mz_glad_glColor3us
GLAD_API_CALL PFNGLCOLOR3USVPROC mz_glad_glColor3usv;
#define glColor3usv mz_glad_glColor3usv
GLAD_API_CALL PFNGLCOLOR4BPROC mz_glad_glColor4b;
#define glColor4b mz_glad_glColor4b
GLAD_API_CALL PFNGLCOLOR4BVPROC mz_glad_glColor4bv;
#define glColor4bv mz_glad_glColor4bv
GLAD_API_CALL PFNGLCOLOR4DPROC mz_glad_glColor4d;
#define glColor4d mz_glad_glColor4d
GLAD_API_CALL PFNGLCOLOR4DVPROC mz_glad_glColor4dv;
#define glColor4dv mz_glad_glColor4dv
GLAD_API_CALL PFNGLCOLOR4FPROC mz_glad_glColor4f;
#define glColor4f mz_glad_glColor4f
GLAD_API_CALL PFNGLCOLOR4FVPROC mz_glad_glColor4fv;
#define glColor4fv mz_glad_glColor4fv
GLAD_API_CALL PFNGLCOLOR4IPROC mz_glad_glColor4i;
#define glColor4i mz_glad_glColor4i
GLAD_API_CALL PFNGLCOLOR4IVPROC mz_glad_glColor4iv;
#define glColor4iv mz_glad_glColor4iv
GLAD_API_CALL PFNGLCOLOR4SPROC mz_glad_glColor4s;
#define glColor4s mz_glad_glColor4s
GLAD_API_CALL PFNGLCOLOR4SVPROC mz_glad_glColor4sv;
#define glColor4sv mz_glad_glColor4sv
GLAD_API_CALL PFNGLCOLOR4UBPROC mz_glad_glColor4ub;
#define glColor4ub mz_glad_glColor4ub
GLAD_API_CALL PFNGLCOLOR4UBVPROC mz_glad_glColor4ubv;
#define glColor4ubv mz_glad_glColor4ubv
GLAD_API_CALL PFNGLCOLOR4UIPROC mz_glad_glColor4ui;
#define glColor4ui mz_glad_glColor4ui
GLAD_API_CALL PFNGLCOLOR4UIVPROC mz_glad_glColor4uiv;
#define glColor4uiv mz_glad_glColor4uiv
GLAD_API_CALL PFNGLCOLOR4USPROC mz_glad_glColor4us;
#define glColor4us mz_glad_glColor4us
GLAD_API_CALL PFNGLCOLOR4USVPROC mz_glad_glColor4usv;
#define glColor4usv mz_glad_glColor4usv
GLAD_API_CALL PFNGLCOLORMASKPROC mz_glad_glColorMask;
#define glColorMask mz_glad_glColorMask
GLAD_API_CALL PFNGLCOLORMATERIALPROC mz_glad_glColorMaterial;
#define glColorMaterial mz_glad_glColorMaterial
GLAD_API_CALL PFNGLCOLORPOINTERPROC mz_glad_glColorPointer;
#define glColorPointer mz_glad_glColorPointer
GLAD_API_CALL PFNGLCOLORPOINTEREXTPROC mz_glad_glColorPointerEXT;
#define glColorPointerEXT mz_glad_glColorPointerEXT
GLAD_API_CALL PFNGLCOLORSUBTABLEPROC mz_glad_glColorSubTable;
#define glColorSubTable mz_glad_glColorSubTable
GLAD_API_CALL PFNGLCOLORTABLEPROC mz_glad_glColorTable;
#define glColorTable mz_glad_glColorTable
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERFVPROC mz_glad_glColorTableParameterfv;
#define glColorTableParameterfv mz_glad_glColorTableParameterfv
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERIVPROC mz_glad_glColorTableParameteriv;
#define glColorTableParameteriv mz_glad_glColorTableParameteriv
GLAD_API_CALL PFNGLCOMPILESHADERPROC mz_glad_glCompileShader;
#define glCompileShader mz_glad_glCompileShader
GLAD_API_CALL PFNGLCOMPILESHADERARBPROC mz_glad_glCompileShaderARB;
#define glCompileShaderARB mz_glad_glCompileShaderARB
GLAD_API_CALL PFNGLCONVOLUTIONFILTER1DPROC mz_glad_glConvolutionFilter1D;
#define glConvolutionFilter1D mz_glad_glConvolutionFilter1D
GLAD_API_CALL PFNGLCONVOLUTIONFILTER2DPROC mz_glad_glConvolutionFilter2D;
#define glConvolutionFilter2D mz_glad_glConvolutionFilter2D
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFPROC mz_glad_glConvolutionParameterf;
#define glConvolutionParameterf mz_glad_glConvolutionParameterf
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFVPROC mz_glad_glConvolutionParameterfv;
#define glConvolutionParameterfv mz_glad_glConvolutionParameterfv
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIPROC mz_glad_glConvolutionParameteri;
#define glConvolutionParameteri mz_glad_glConvolutionParameteri
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIVPROC mz_glad_glConvolutionParameteriv;
#define glConvolutionParameteriv mz_glad_glConvolutionParameteriv
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC mz_glad_glCopyBufferSubData;
#define glCopyBufferSubData mz_glad_glCopyBufferSubData
GLAD_API_CALL PFNGLCOPYCOLORSUBTABLEPROC mz_glad_glCopyColorSubTable;
#define glCopyColorSubTable mz_glad_glCopyColorSubTable
GLAD_API_CALL PFNGLCOPYCOLORTABLEPROC mz_glad_glCopyColorTable;
#define glCopyColorTable mz_glad_glCopyColorTable
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER1DPROC mz_glad_glCopyConvolutionFilter1D;
#define glCopyConvolutionFilter1D mz_glad_glCopyConvolutionFilter1D
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER2DPROC mz_glad_glCopyConvolutionFilter2D;
#define glCopyConvolutionFilter2D mz_glad_glCopyConvolutionFilter2D
GLAD_API_CALL PFNGLCOPYPIXELSPROC mz_glad_glCopyPixels;
#define glCopyPixels mz_glad_glCopyPixels
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC mz_glad_glCopyTexImage1D;
#define glCopyTexImage1D mz_glad_glCopyTexImage1D
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DEXTPROC mz_glad_glCopyTexImage1DEXT;
#define glCopyTexImage1DEXT mz_glad_glCopyTexImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC mz_glad_glCopyTexImage2D;
#define glCopyTexImage2D mz_glad_glCopyTexImage2D
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DEXTPROC mz_glad_glCopyTexImage2DEXT;
#define glCopyTexImage2DEXT mz_glad_glCopyTexImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC mz_glad_glCopyTexSubImage1D;
#define glCopyTexSubImage1D mz_glad_glCopyTexSubImage1D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DEXTPROC mz_glad_glCopyTexSubImage1DEXT;
#define glCopyTexSubImage1DEXT mz_glad_glCopyTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC mz_glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D mz_glad_glCopyTexSubImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DEXTPROC mz_glad_glCopyTexSubImage2DEXT;
#define glCopyTexSubImage2DEXT mz_glad_glCopyTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC mz_glad_glCopyTexSubImage3D;
#define glCopyTexSubImage3D mz_glad_glCopyTexSubImage3D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DEXTPROC mz_glad_glCopyTexSubImage3DEXT;
#define glCopyTexSubImage3DEXT mz_glad_glCopyTexSubImage3DEXT
GLAD_API_CALL PFNGLCREATEPROGRAMPROC mz_glad_glCreateProgram;
#define glCreateProgram mz_glad_glCreateProgram
GLAD_API_CALL PFNGLCREATEPROGRAMOBJECTARBPROC mz_glad_glCreateProgramObjectARB;
#define glCreateProgramObjectARB mz_glad_glCreateProgramObjectARB
GLAD_API_CALL PFNGLCREATESHADERPROC mz_glad_glCreateShader;
#define glCreateShader mz_glad_glCreateShader
GLAD_API_CALL PFNGLCREATESHADEROBJECTARBPROC mz_glad_glCreateShaderObjectARB;
#define glCreateShaderObjectARB mz_glad_glCreateShaderObjectARB
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC mz_glad_glCreateShaderProgramv;
#define glCreateShaderProgramv mz_glad_glCreateShaderProgramv
GLAD_API_CALL PFNGLCULLFACEPROC mz_glad_glCullFace;
#define glCullFace mz_glad_glCullFace
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC mz_glad_glDebugMessageCallback;
#define glDebugMessageCallback mz_glad_glDebugMessageCallback
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLPROC mz_glad_glDebugMessageControl;
#define glDebugMessageControl mz_glad_glDebugMessageControl
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTPROC mz_glad_glDebugMessageInsert;
#define glDebugMessageInsert mz_glad_glDebugMessageInsert
GLAD_API_CALL PFNGLDELETEBUFFERSPROC mz_glad_glDeleteBuffers;
#define glDeleteBuffers mz_glad_glDeleteBuffers
GLAD_API_CALL PFNGLDELETEBUFFERSARBPROC mz_glad_glDeleteBuffersARB;
#define glDeleteBuffersARB mz_glad_glDeleteBuffersARB
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC mz_glad_glDeleteFramebuffers;
#define glDeleteFramebuffers mz_glad_glDeleteFramebuffers
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSEXTPROC mz_glad_glDeleteFramebuffersEXT;
#define glDeleteFramebuffersEXT mz_glad_glDeleteFramebuffersEXT
GLAD_API_CALL PFNGLDELETELISTSPROC mz_glad_glDeleteLists;
#define glDeleteLists mz_glad_glDeleteLists
GLAD_API_CALL PFNGLDELETEOBJECTARBPROC mz_glad_glDeleteObjectARB;
#define glDeleteObjectARB mz_glad_glDeleteObjectARB
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC mz_glad_glDeleteProgramPipelines;
#define glDeleteProgramPipelines mz_glad_glDeleteProgramPipelines
GLAD_API_CALL PFNGLDELETEPROGRAMSARBPROC mz_glad_glDeleteProgramsARB;
#define glDeleteProgramsARB mz_glad_glDeleteProgramsARB
GLAD_API_CALL PFNGLDELETEPROGRAMSNVPROC mz_glad_glDeleteProgramsNV;
#define glDeleteProgramsNV mz_glad_glDeleteProgramsNV
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC mz_glad_glDeleteRenderbuffers;
#define glDeleteRenderbuffers mz_glad_glDeleteRenderbuffers
GLAD_API_CALL PFNGLDELETERENDERBUFFERSEXTPROC mz_glad_glDeleteRenderbuffersEXT;
#define glDeleteRenderbuffersEXT mz_glad_glDeleteRenderbuffersEXT
GLAD_API_CALL PFNGLDELETETEXTURESPROC mz_glad_glDeleteTextures;
#define glDeleteTextures mz_glad_glDeleteTextures
GLAD_API_CALL PFNGLDELETETEXTURESEXTPROC mz_glad_glDeleteTexturesEXT;
#define glDeleteTexturesEXT mz_glad_glDeleteTexturesEXT
GLAD_API_CALL PFNGLDEPTHFUNCPROC mz_glad_glDepthFunc;
#define glDepthFunc mz_glad_glDepthFunc
GLAD_API_CALL PFNGLDEPTHMASKPROC mz_glad_glDepthMask;
#define glDepthMask mz_glad_glDepthMask
GLAD_API_CALL PFNGLDEPTHRANGEPROC mz_glad_glDepthRange;
#define glDepthRange mz_glad_glDepthRange
GLAD_API_CALL PFNGLDETACHOBJECTARBPROC mz_glad_glDetachObjectARB;
#define glDetachObjectARB mz_glad_glDetachObjectARB
GLAD_API_CALL PFNGLDETACHSHADERPROC mz_glad_glDetachShader;
#define glDetachShader mz_glad_glDetachShader
GLAD_API_CALL PFNGLDISABLEPROC mz_glad_glDisable;
#define glDisable mz_glad_glDisable
GLAD_API_CALL PFNGLDISABLECLIENTSTATEPROC mz_glad_glDisableClientState;
#define glDisableClientState mz_glad_glDisableClientState
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC mz_glad_glDisableVertexAttribArray;
#define glDisableVertexAttribArray mz_glad_glDisableVertexAttribArray
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYARBPROC mz_glad_glDisableVertexAttribArrayARB;
#define glDisableVertexAttribArrayARB mz_glad_glDisableVertexAttribArrayARB
GLAD_API_CALL PFNGLDRAWARRAYSPROC mz_glad_glDrawArrays;
#define glDrawArrays mz_glad_glDrawArrays
GLAD_API_CALL PFNGLDRAWARRAYSEXTPROC mz_glad_glDrawArraysEXT;
#define glDrawArraysEXT mz_glad_glDrawArraysEXT
GLAD_API_CALL PFNGLDRAWBUFFERPROC mz_glad_glDrawBuffer;
#define glDrawBuffer mz_glad_glDrawBuffer
GLAD_API_CALL PFNGLDRAWELEMENTSPROC mz_glad_glDrawElements;
#define glDrawElements mz_glad_glDrawElements
GLAD_API_CALL PFNGLDRAWPIXELSPROC mz_glad_glDrawPixels;
#define glDrawPixels mz_glad_glDrawPixels
GLAD_API_CALL PFNGLEDGEFLAGPROC mz_glad_glEdgeFlag;
#define glEdgeFlag mz_glad_glEdgeFlag
GLAD_API_CALL PFNGLEDGEFLAGPOINTERPROC mz_glad_glEdgeFlagPointer;
#define glEdgeFlagPointer mz_glad_glEdgeFlagPointer
GLAD_API_CALL PFNGLEDGEFLAGPOINTEREXTPROC mz_glad_glEdgeFlagPointerEXT;
#define glEdgeFlagPointerEXT mz_glad_glEdgeFlagPointerEXT
GLAD_API_CALL PFNGLEDGEFLAGVPROC mz_glad_glEdgeFlagv;
#define glEdgeFlagv mz_glad_glEdgeFlagv
GLAD_API_CALL PFNGLENABLEPROC mz_glad_glEnable;
#define glEnable mz_glad_glEnable
GLAD_API_CALL PFNGLENABLECLIENTSTATEPROC mz_glad_glEnableClientState;
#define glEnableClientState mz_glad_glEnableClientState
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC mz_glad_glEnableVertexAttribArray;
#define glEnableVertexAttribArray mz_glad_glEnableVertexAttribArray
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYARBPROC mz_glad_glEnableVertexAttribArrayARB;
#define glEnableVertexAttribArrayARB mz_glad_glEnableVertexAttribArrayARB
GLAD_API_CALL PFNGLENDPROC mz_glad_glEnd;
#define glEnd mz_glad_glEnd
GLAD_API_CALL PFNGLENDLISTPROC mz_glad_glEndList;
#define glEndList mz_glad_glEndList
GLAD_API_CALL PFNGLEVALCOORD1DPROC mz_glad_glEvalCoord1d;
#define glEvalCoord1d mz_glad_glEvalCoord1d
GLAD_API_CALL PFNGLEVALCOORD1DVPROC mz_glad_glEvalCoord1dv;
#define glEvalCoord1dv mz_glad_glEvalCoord1dv
GLAD_API_CALL PFNGLEVALCOORD1FPROC mz_glad_glEvalCoord1f;
#define glEvalCoord1f mz_glad_glEvalCoord1f
GLAD_API_CALL PFNGLEVALCOORD1FVPROC mz_glad_glEvalCoord1fv;
#define glEvalCoord1fv mz_glad_glEvalCoord1fv
GLAD_API_CALL PFNGLEVALCOORD2DPROC mz_glad_glEvalCoord2d;
#define glEvalCoord2d mz_glad_glEvalCoord2d
GLAD_API_CALL PFNGLEVALCOORD2DVPROC mz_glad_glEvalCoord2dv;
#define glEvalCoord2dv mz_glad_glEvalCoord2dv
GLAD_API_CALL PFNGLEVALCOORD2FPROC mz_glad_glEvalCoord2f;
#define glEvalCoord2f mz_glad_glEvalCoord2f
GLAD_API_CALL PFNGLEVALCOORD2FVPROC mz_glad_glEvalCoord2fv;
#define glEvalCoord2fv mz_glad_glEvalCoord2fv
GLAD_API_CALL PFNGLEVALMESH1PROC mz_glad_glEvalMesh1;
#define glEvalMesh1 mz_glad_glEvalMesh1
GLAD_API_CALL PFNGLEVALMESH2PROC mz_glad_glEvalMesh2;
#define glEvalMesh2 mz_glad_glEvalMesh2
GLAD_API_CALL PFNGLEVALPOINT1PROC mz_glad_glEvalPoint1;
#define glEvalPoint1 mz_glad_glEvalPoint1
GLAD_API_CALL PFNGLEVALPOINT2PROC mz_glad_glEvalPoint2;
#define glEvalPoint2 mz_glad_glEvalPoint2
GLAD_API_CALL PFNGLEXECUTEPROGRAMNVPROC mz_glad_glExecuteProgramNV;
#define glExecuteProgramNV mz_glad_glExecuteProgramNV
GLAD_API_CALL PFNGLFEEDBACKBUFFERPROC mz_glad_glFeedbackBuffer;
#define glFeedbackBuffer mz_glad_glFeedbackBuffer
GLAD_API_CALL PFNGLFINISHPROC mz_glad_glFinish;
#define glFinish mz_glad_glFinish
GLAD_API_CALL PFNGLFLUSHPROC mz_glad_glFlush;
#define glFlush mz_glad_glFlush
GLAD_API_CALL PFNGLFOGFPROC mz_glad_glFogf;
#define glFogf mz_glad_glFogf
GLAD_API_CALL PFNGLFOGFVPROC mz_glad_glFogfv;
#define glFogfv mz_glad_glFogfv
GLAD_API_CALL PFNGLFOGIPROC mz_glad_glFogi;
#define glFogi mz_glad_glFogi
GLAD_API_CALL PFNGLFOGIVPROC mz_glad_glFogiv;
#define glFogiv mz_glad_glFogiv
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC mz_glad_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer mz_glad_glFramebufferRenderbuffer
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC mz_glad_glFramebufferRenderbufferEXT;
#define glFramebufferRenderbufferEXT mz_glad_glFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC mz_glad_glFramebufferTexture;
#define glFramebufferTexture mz_glad_glFramebufferTexture
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC mz_glad_glFramebufferTexture1D;
#define glFramebufferTexture1D mz_glad_glFramebufferTexture1D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DEXTPROC mz_glad_glFramebufferTexture1DEXT;
#define glFramebufferTexture1DEXT mz_glad_glFramebufferTexture1DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC mz_glad_glFramebufferTexture2D;
#define glFramebufferTexture2D mz_glad_glFramebufferTexture2D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DEXTPROC mz_glad_glFramebufferTexture2DEXT;
#define glFramebufferTexture2DEXT mz_glad_glFramebufferTexture2DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC mz_glad_glFramebufferTexture3D;
#define glFramebufferTexture3D mz_glad_glFramebufferTexture3D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DEXTPROC mz_glad_glFramebufferTexture3DEXT;
#define glFramebufferTexture3DEXT mz_glad_glFramebufferTexture3DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREARBPROC mz_glad_glFramebufferTextureARB;
#define glFramebufferTextureARB mz_glad_glFramebufferTextureARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREEXTPROC mz_glad_glFramebufferTextureEXT;
#define glFramebufferTextureEXT mz_glad_glFramebufferTextureEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEARBPROC mz_glad_glFramebufferTextureFaceARB;
#define glFramebufferTextureFaceARB mz_glad_glFramebufferTextureFaceARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC mz_glad_glFramebufferTextureFaceEXT;
#define glFramebufferTextureFaceEXT mz_glad_glFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC mz_glad_glFramebufferTextureLayer;
#define glFramebufferTextureLayer mz_glad_glFramebufferTextureLayer
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERARBPROC mz_glad_glFramebufferTextureLayerARB;
#define glFramebufferTextureLayerARB mz_glad_glFramebufferTextureLayerARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC mz_glad_glFramebufferTextureLayerEXT;
#define glFramebufferTextureLayerEXT mz_glad_glFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLFRONTFACEPROC mz_glad_glFrontFace;
#define glFrontFace mz_glad_glFrontFace
GLAD_API_CALL PFNGLFRUSTUMPROC mz_glad_glFrustum;
#define glFrustum mz_glad_glFrustum
GLAD_API_CALL PFNGLGENBUFFERSPROC mz_glad_glGenBuffers;
#define glGenBuffers mz_glad_glGenBuffers
GLAD_API_CALL PFNGLGENBUFFERSARBPROC mz_glad_glGenBuffersARB;
#define glGenBuffersARB mz_glad_glGenBuffersARB
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC mz_glad_glGenFramebuffers;
#define glGenFramebuffers mz_glad_glGenFramebuffers
GLAD_API_CALL PFNGLGENFRAMEBUFFERSEXTPROC mz_glad_glGenFramebuffersEXT;
#define glGenFramebuffersEXT mz_glad_glGenFramebuffersEXT
GLAD_API_CALL PFNGLGENLISTSPROC mz_glad_glGenLists;
#define glGenLists mz_glad_glGenLists
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC mz_glad_glGenProgramPipelines;
#define glGenProgramPipelines mz_glad_glGenProgramPipelines
GLAD_API_CALL PFNGLGENPROGRAMSARBPROC mz_glad_glGenProgramsARB;
#define glGenProgramsARB mz_glad_glGenProgramsARB
GLAD_API_CALL PFNGLGENPROGRAMSNVPROC mz_glad_glGenProgramsNV;
#define glGenProgramsNV mz_glad_glGenProgramsNV
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC mz_glad_glGenRenderbuffers;
#define glGenRenderbuffers mz_glad_glGenRenderbuffers
GLAD_API_CALL PFNGLGENRENDERBUFFERSEXTPROC mz_glad_glGenRenderbuffersEXT;
#define glGenRenderbuffersEXT mz_glad_glGenRenderbuffersEXT
GLAD_API_CALL PFNGLGENTEXTURESPROC mz_glad_glGenTextures;
#define glGenTextures mz_glad_glGenTextures
GLAD_API_CALL PFNGLGENTEXTURESEXTPROC mz_glad_glGenTexturesEXT;
#define glGenTexturesEXT mz_glad_glGenTexturesEXT
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC mz_glad_glGenerateMipmap;
#define glGenerateMipmap mz_glad_glGenerateMipmap
GLAD_API_CALL PFNGLGENERATEMIPMAPEXTPROC mz_glad_glGenerateMipmapEXT;
#define glGenerateMipmapEXT mz_glad_glGenerateMipmapEXT
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC mz_glad_glGetActiveAttrib;
#define glGetActiveAttrib mz_glad_glGetActiveAttrib
GLAD_API_CALL PFNGLGETACTIVEATTRIBARBPROC mz_glad_glGetActiveAttribARB;
#define glGetActiveAttribARB mz_glad_glGetActiveAttribARB
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC mz_glad_glGetActiveUniform;
#define glGetActiveUniform mz_glad_glGetActiveUniform
GLAD_API_CALL PFNGLGETACTIVEUNIFORMARBPROC mz_glad_glGetActiveUniformARB;
#define glGetActiveUniformARB mz_glad_glGetActiveUniformARB
GLAD_API_CALL PFNGLGETATTACHEDOBJECTSARBPROC mz_glad_glGetAttachedObjectsARB;
#define glGetAttachedObjectsARB mz_glad_glGetAttachedObjectsARB
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC mz_glad_glGetAttribLocation;
#define glGetAttribLocation mz_glad_glGetAttribLocation
GLAD_API_CALL PFNGLGETATTRIBLOCATIONARBPROC mz_glad_glGetAttribLocationARB;
#define glGetAttribLocationARB mz_glad_glGetAttribLocationARB
GLAD_API_CALL PFNGLGETBOOLEANVPROC mz_glad_glGetBooleanv;
#define glGetBooleanv mz_glad_glGetBooleanv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC mz_glad_glGetBufferParameteriv;
#define glGetBufferParameteriv mz_glad_glGetBufferParameteriv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVARBPROC mz_glad_glGetBufferParameterivARB;
#define glGetBufferParameterivARB mz_glad_glGetBufferParameterivARB
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC mz_glad_glGetBufferPointerv;
#define glGetBufferPointerv mz_glad_glGetBufferPointerv
GLAD_API_CALL PFNGLGETBUFFERPOINTERVARBPROC mz_glad_glGetBufferPointervARB;
#define glGetBufferPointervARB mz_glad_glGetBufferPointervARB
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC mz_glad_glGetBufferSubData;
#define glGetBufferSubData mz_glad_glGetBufferSubData
GLAD_API_CALL PFNGLGETBUFFERSUBDATAARBPROC mz_glad_glGetBufferSubDataARB;
#define glGetBufferSubDataARB mz_glad_glGetBufferSubDataARB
GLAD_API_CALL PFNGLGETCLIPPLANEPROC mz_glad_glGetClipPlane;
#define glGetClipPlane mz_glad_glGetClipPlane
GLAD_API_CALL PFNGLGETCOLORTABLEPROC mz_glad_glGetColorTable;
#define glGetColorTable mz_glad_glGetColorTable
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERFVPROC mz_glad_glGetColorTableParameterfv;
#define glGetColorTableParameterfv mz_glad_glGetColorTableParameterfv
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERIVPROC mz_glad_glGetColorTableParameteriv;
#define glGetColorTableParameteriv mz_glad_glGetColorTableParameteriv
GLAD_API_CALL PFNGLGETCONVOLUTIONFILTERPROC mz_glad_glGetConvolutionFilter;
#define glGetConvolutionFilter mz_glad_glGetConvolutionFilter
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERFVPROC mz_glad_glGetConvolutionParameterfv;
#define glGetConvolutionParameterfv mz_glad_glGetConvolutionParameterfv
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERIVPROC mz_glad_glGetConvolutionParameteriv;
#define glGetConvolutionParameteriv mz_glad_glGetConvolutionParameteriv
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGPROC mz_glad_glGetDebugMessageLog;
#define glGetDebugMessageLog mz_glad_glGetDebugMessageLog
GLAD_API_CALL PFNGLGETDOUBLEVPROC mz_glad_glGetDoublev;
#define glGetDoublev mz_glad_glGetDoublev
GLAD_API_CALL PFNGLGETERRORPROC mz_glad_glGetError;
#define glGetError mz_glad_glGetError
GLAD_API_CALL PFNGLGETFLOATVPROC mz_glad_glGetFloatv;
#define glGetFloatv mz_glad_glGetFloatv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC mz_glad_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv mz_glad_glGetFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC mz_glad_glGetFramebufferAttachmentParameterivEXT;
#define glGetFramebufferAttachmentParameterivEXT mz_glad_glGetFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETHANDLEARBPROC mz_glad_glGetHandleARB;
#define glGetHandleARB mz_glad_glGetHandleARB
GLAD_API_CALL PFNGLGETHISTOGRAMPROC mz_glad_glGetHistogram;
#define glGetHistogram mz_glad_glGetHistogram
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERFVPROC mz_glad_glGetHistogramParameterfv;
#define glGetHistogramParameterfv mz_glad_glGetHistogramParameterfv
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERIVPROC mz_glad_glGetHistogramParameteriv;
#define glGetHistogramParameteriv mz_glad_glGetHistogramParameteriv
GLAD_API_CALL PFNGLGETINFOLOGARBPROC mz_glad_glGetInfoLogARB;
#define glGetInfoLogARB mz_glad_glGetInfoLogARB
GLAD_API_CALL PFNGLGETINTEGERVPROC mz_glad_glGetIntegerv;
#define glGetIntegerv mz_glad_glGetIntegerv
GLAD_API_CALL PFNGLGETLIGHTFVPROC mz_glad_glGetLightfv;
#define glGetLightfv mz_glad_glGetLightfv
GLAD_API_CALL PFNGLGETLIGHTIVPROC mz_glad_glGetLightiv;
#define glGetLightiv mz_glad_glGetLightiv
GLAD_API_CALL PFNGLGETMAPDVPROC mz_glad_glGetMapdv;
#define glGetMapdv mz_glad_glGetMapdv
GLAD_API_CALL PFNGLGETMAPFVPROC mz_glad_glGetMapfv;
#define glGetMapfv mz_glad_glGetMapfv
GLAD_API_CALL PFNGLGETMAPIVPROC mz_glad_glGetMapiv;
#define glGetMapiv mz_glad_glGetMapiv
GLAD_API_CALL PFNGLGETMATERIALFVPROC mz_glad_glGetMaterialfv;
#define glGetMaterialfv mz_glad_glGetMaterialfv
GLAD_API_CALL PFNGLGETMATERIALIVPROC mz_glad_glGetMaterialiv;
#define glGetMaterialiv mz_glad_glGetMaterialiv
GLAD_API_CALL PFNGLGETMINMAXPROC mz_glad_glGetMinmax;
#define glGetMinmax mz_glad_glGetMinmax
GLAD_API_CALL PFNGLGETMINMAXPARAMETERFVPROC mz_glad_glGetMinmaxParameterfv;
#define glGetMinmaxParameterfv mz_glad_glGetMinmaxParameterfv
GLAD_API_CALL PFNGLGETMINMAXPARAMETERIVPROC mz_glad_glGetMinmaxParameteriv;
#define glGetMinmaxParameteriv mz_glad_glGetMinmaxParameteriv
GLAD_API_CALL PFNGLGETOBJECTLABELPROC mz_glad_glGetObjectLabel;
#define glGetObjectLabel mz_glad_glGetObjectLabel
GLAD_API_CALL PFNGLGETOBJECTPARAMETERFVARBPROC mz_glad_glGetObjectParameterfvARB;
#define glGetObjectParameterfvARB mz_glad_glGetObjectParameterfvARB
GLAD_API_CALL PFNGLGETOBJECTPARAMETERIVARBPROC mz_glad_glGetObjectParameterivARB;
#define glGetObjectParameterivARB mz_glad_glGetObjectParameterivARB
GLAD_API_CALL PFNGLGETOBJECTPTRLABELPROC mz_glad_glGetObjectPtrLabel;
#define glGetObjectPtrLabel mz_glad_glGetObjectPtrLabel
GLAD_API_CALL PFNGLGETPIXELMAPFVPROC mz_glad_glGetPixelMapfv;
#define glGetPixelMapfv mz_glad_glGetPixelMapfv
GLAD_API_CALL PFNGLGETPIXELMAPUIVPROC mz_glad_glGetPixelMapuiv;
#define glGetPixelMapuiv mz_glad_glGetPixelMapuiv
GLAD_API_CALL PFNGLGETPIXELMAPUSVPROC mz_glad_glGetPixelMapusv;
#define glGetPixelMapusv mz_glad_glGetPixelMapusv
GLAD_API_CALL PFNGLGETPOINTERVPROC mz_glad_glGetPointerv;
#define glGetPointerv mz_glad_glGetPointerv
GLAD_API_CALL PFNGLGETPOINTERVEXTPROC mz_glad_glGetPointervEXT;
#define glGetPointervEXT mz_glad_glGetPointervEXT
GLAD_API_CALL PFNGLGETPOLYGONSTIPPLEPROC mz_glad_glGetPolygonStipple;
#define glGetPolygonStipple mz_glad_glGetPolygonStipple
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC mz_glad_glGetProgramBinary;
#define glGetProgramBinary mz_glad_glGetProgramBinary
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERDVARBPROC mz_glad_glGetProgramEnvParameterdvARB;
#define glGetProgramEnvParameterdvARB mz_glad_glGetProgramEnvParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERFVARBPROC mz_glad_glGetProgramEnvParameterfvARB;
#define glGetProgramEnvParameterfvARB mz_glad_glGetProgramEnvParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC mz_glad_glGetProgramLocalParameterdvARB;
#define glGetProgramLocalParameterdvARB mz_glad_glGetProgramLocalParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC mz_glad_glGetProgramLocalParameterfvARB;
#define glGetProgramLocalParameterfvARB mz_glad_glGetProgramLocalParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERDVNVPROC mz_glad_glGetProgramParameterdvNV;
#define glGetProgramParameterdvNV mz_glad_glGetProgramParameterdvNV
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERFVNVPROC mz_glad_glGetProgramParameterfvNV;
#define glGetProgramParameterfvNV mz_glad_glGetProgramParameterfvNV
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC mz_glad_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog mz_glad_glGetProgramPipelineInfoLog
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC mz_glad_glGetProgramPipelineiv;
#define glGetProgramPipelineiv mz_glad_glGetProgramPipelineiv
GLAD_API_CALL PFNGLGETPROGRAMSTRINGARBPROC mz_glad_glGetProgramStringARB;
#define glGetProgramStringARB mz_glad_glGetProgramStringARB
GLAD_API_CALL PFNGLGETPROGRAMSTRINGNVPROC mz_glad_glGetProgramStringNV;
#define glGetProgramStringNV mz_glad_glGetProgramStringNV
GLAD_API_CALL PFNGLGETPROGRAMIVARBPROC mz_glad_glGetProgramivARB;
#define glGetProgramivARB mz_glad_glGetProgramivARB
GLAD_API_CALL PFNGLGETPROGRAMIVNVPROC mz_glad_glGetProgramivNV;
#define glGetProgramivNV mz_glad_glGetProgramivNV
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC mz_glad_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv mz_glad_glGetRenderbufferParameteriv
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC mz_glad_glGetRenderbufferParameterivEXT;
#define glGetRenderbufferParameterivEXT mz_glad_glGetRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETSEPARABLEFILTERPROC mz_glad_glGetSeparableFilter;
#define glGetSeparableFilter mz_glad_glGetSeparableFilter
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC mz_glad_glGetShaderSource;
#define glGetShaderSource mz_glad_glGetShaderSource
GLAD_API_CALL PFNGLGETSHADERSOURCEARBPROC mz_glad_glGetShaderSourceARB;
#define glGetShaderSourceARB mz_glad_glGetShaderSourceARB
GLAD_API_CALL PFNGLGETSTRINGPROC mz_glad_glGetString;
#define glGetString mz_glad_glGetString
GLAD_API_CALL PFNGLGETTEXENVFVPROC mz_glad_glGetTexEnvfv;
#define glGetTexEnvfv mz_glad_glGetTexEnvfv
GLAD_API_CALL PFNGLGETTEXENVIVPROC mz_glad_glGetTexEnviv;
#define glGetTexEnviv mz_glad_glGetTexEnviv
GLAD_API_CALL PFNGLGETTEXGENDVPROC mz_glad_glGetTexGendv;
#define glGetTexGendv mz_glad_glGetTexGendv
GLAD_API_CALL PFNGLGETTEXGENFVPROC mz_glad_glGetTexGenfv;
#define glGetTexGenfv mz_glad_glGetTexGenfv
GLAD_API_CALL PFNGLGETTEXGENIVPROC mz_glad_glGetTexGeniv;
#define glGetTexGeniv mz_glad_glGetTexGeniv
GLAD_API_CALL PFNGLGETTEXIMAGEPROC mz_glad_glGetTexImage;
#define glGetTexImage mz_glad_glGetTexImage
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC mz_glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv mz_glad_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC mz_glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv mz_glad_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC mz_glad_glGetTexParameterfv;
#define glGetTexParameterfv mz_glad_glGetTexParameterfv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC mz_glad_glGetTexParameteriv;
#define glGetTexParameteriv mz_glad_glGetTexParameteriv
GLAD_API_CALL PFNGLGETTRACKMATRIXIVNVPROC mz_glad_glGetTrackMatrixivNV;
#define glGetTrackMatrixivNV mz_glad_glGetTrackMatrixivNV
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC mz_glad_glGetUniformLocation;
#define glGetUniformLocation mz_glad_glGetUniformLocation
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONARBPROC mz_glad_glGetUniformLocationARB;
#define glGetUniformLocationARB mz_glad_glGetUniformLocationARB
GLAD_API_CALL PFNGLGETUNIFORMFVPROC mz_glad_glGetUniformfv;
#define glGetUniformfv mz_glad_glGetUniformfv
GLAD_API_CALL PFNGLGETUNIFORMFVARBPROC mz_glad_glGetUniformfvARB;
#define glGetUniformfvARB mz_glad_glGetUniformfvARB
GLAD_API_CALL PFNGLGETUNIFORMIVPROC mz_glad_glGetUniformiv;
#define glGetUniformiv mz_glad_glGetUniformiv
GLAD_API_CALL PFNGLGETUNIFORMIVARBPROC mz_glad_glGetUniformivARB;
#define glGetUniformivARB mz_glad_glGetUniformivARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC mz_glad_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv mz_glad_glGetVertexAttribPointerv
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVARBPROC mz_glad_glGetVertexAttribPointervARB;
#define glGetVertexAttribPointervARB mz_glad_glGetVertexAttribPointervARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVNVPROC mz_glad_glGetVertexAttribPointervNV;
#define glGetVertexAttribPointervNV mz_glad_glGetVertexAttribPointervNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC mz_glad_glGetVertexAttribdv;
#define glGetVertexAttribdv mz_glad_glGetVertexAttribdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVARBPROC mz_glad_glGetVertexAttribdvARB;
#define glGetVertexAttribdvARB mz_glad_glGetVertexAttribdvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVNVPROC mz_glad_glGetVertexAttribdvNV;
#define glGetVertexAttribdvNV mz_glad_glGetVertexAttribdvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC mz_glad_glGetVertexAttribfv;
#define glGetVertexAttribfv mz_glad_glGetVertexAttribfv
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVARBPROC mz_glad_glGetVertexAttribfvARB;
#define glGetVertexAttribfvARB mz_glad_glGetVertexAttribfvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVNVPROC mz_glad_glGetVertexAttribfvNV;
#define glGetVertexAttribfvNV mz_glad_glGetVertexAttribfvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC mz_glad_glGetVertexAttribiv;
#define glGetVertexAttribiv mz_glad_glGetVertexAttribiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVARBPROC mz_glad_glGetVertexAttribivARB;
#define glGetVertexAttribivARB mz_glad_glGetVertexAttribivARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVNVPROC mz_glad_glGetVertexAttribivNV;
#define glGetVertexAttribivNV mz_glad_glGetVertexAttribivNV
GLAD_API_CALL PFNGLHINTPROC mz_glad_glHint;
#define glHint mz_glad_glHint
GLAD_API_CALL PFNGLHISTOGRAMPROC mz_glad_glHistogram;
#define glHistogram mz_glad_glHistogram
GLAD_API_CALL PFNGLINDEXMASKPROC mz_glad_glIndexMask;
#define glIndexMask mz_glad_glIndexMask
GLAD_API_CALL PFNGLINDEXPOINTERPROC mz_glad_glIndexPointer;
#define glIndexPointer mz_glad_glIndexPointer
GLAD_API_CALL PFNGLINDEXPOINTEREXTPROC mz_glad_glIndexPointerEXT;
#define glIndexPointerEXT mz_glad_glIndexPointerEXT
GLAD_API_CALL PFNGLINDEXDPROC mz_glad_glIndexd;
#define glIndexd mz_glad_glIndexd
GLAD_API_CALL PFNGLINDEXDVPROC mz_glad_glIndexdv;
#define glIndexdv mz_glad_glIndexdv
GLAD_API_CALL PFNGLINDEXFPROC mz_glad_glIndexf;
#define glIndexf mz_glad_glIndexf
GLAD_API_CALL PFNGLINDEXFVPROC mz_glad_glIndexfv;
#define glIndexfv mz_glad_glIndexfv
GLAD_API_CALL PFNGLINDEXIPROC mz_glad_glIndexi;
#define glIndexi mz_glad_glIndexi
GLAD_API_CALL PFNGLINDEXIVPROC mz_glad_glIndexiv;
#define glIndexiv mz_glad_glIndexiv
GLAD_API_CALL PFNGLINDEXSPROC mz_glad_glIndexs;
#define glIndexs mz_glad_glIndexs
GLAD_API_CALL PFNGLINDEXSVPROC mz_glad_glIndexsv;
#define glIndexsv mz_glad_glIndexsv
GLAD_API_CALL PFNGLINDEXUBPROC mz_glad_glIndexub;
#define glIndexub mz_glad_glIndexub
GLAD_API_CALL PFNGLINDEXUBVPROC mz_glad_glIndexubv;
#define glIndexubv mz_glad_glIndexubv
GLAD_API_CALL PFNGLINITNAMESPROC mz_glad_glInitNames;
#define glInitNames mz_glad_glInitNames
GLAD_API_CALL PFNGLINTERLEAVEDARRAYSPROC mz_glad_glInterleavedArrays;
#define glInterleavedArrays mz_glad_glInterleavedArrays
GLAD_API_CALL PFNGLISBUFFERPROC mz_glad_glIsBuffer;
#define glIsBuffer mz_glad_glIsBuffer
GLAD_API_CALL PFNGLISBUFFERARBPROC mz_glad_glIsBufferARB;
#define glIsBufferARB mz_glad_glIsBufferARB
GLAD_API_CALL PFNGLISENABLEDPROC mz_glad_glIsEnabled;
#define glIsEnabled mz_glad_glIsEnabled
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC mz_glad_glIsFramebuffer;
#define glIsFramebuffer mz_glad_glIsFramebuffer
GLAD_API_CALL PFNGLISFRAMEBUFFEREXTPROC mz_glad_glIsFramebufferEXT;
#define glIsFramebufferEXT mz_glad_glIsFramebufferEXT
GLAD_API_CALL PFNGLISLISTPROC mz_glad_glIsList;
#define glIsList mz_glad_glIsList
GLAD_API_CALL PFNGLISPROGRAMARBPROC mz_glad_glIsProgramARB;
#define glIsProgramARB mz_glad_glIsProgramARB
GLAD_API_CALL PFNGLISPROGRAMNVPROC mz_glad_glIsProgramNV;
#define glIsProgramNV mz_glad_glIsProgramNV
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC mz_glad_glIsProgramPipeline;
#define glIsProgramPipeline mz_glad_glIsProgramPipeline
GLAD_API_CALL PFNGLISRENDERBUFFERPROC mz_glad_glIsRenderbuffer;
#define glIsRenderbuffer mz_glad_glIsRenderbuffer
GLAD_API_CALL PFNGLISRENDERBUFFEREXTPROC mz_glad_glIsRenderbufferEXT;
#define glIsRenderbufferEXT mz_glad_glIsRenderbufferEXT
GLAD_API_CALL PFNGLISTEXTUREPROC mz_glad_glIsTexture;
#define glIsTexture mz_glad_glIsTexture
GLAD_API_CALL PFNGLISTEXTUREEXTPROC mz_glad_glIsTextureEXT;
#define glIsTextureEXT mz_glad_glIsTextureEXT
GLAD_API_CALL PFNGLLIGHTMODELFPROC mz_glad_glLightModelf;
#define glLightModelf mz_glad_glLightModelf
GLAD_API_CALL PFNGLLIGHTMODELFVPROC mz_glad_glLightModelfv;
#define glLightModelfv mz_glad_glLightModelfv
GLAD_API_CALL PFNGLLIGHTMODELIPROC mz_glad_glLightModeli;
#define glLightModeli mz_glad_glLightModeli
GLAD_API_CALL PFNGLLIGHTMODELIVPROC mz_glad_glLightModeliv;
#define glLightModeliv mz_glad_glLightModeliv
GLAD_API_CALL PFNGLLIGHTFPROC mz_glad_glLightf;
#define glLightf mz_glad_glLightf
GLAD_API_CALL PFNGLLIGHTFVPROC mz_glad_glLightfv;
#define glLightfv mz_glad_glLightfv
GLAD_API_CALL PFNGLLIGHTIPROC mz_glad_glLighti;
#define glLighti mz_glad_glLighti
GLAD_API_CALL PFNGLLIGHTIVPROC mz_glad_glLightiv;
#define glLightiv mz_glad_glLightiv
GLAD_API_CALL PFNGLLINESTIPPLEPROC mz_glad_glLineStipple;
#define glLineStipple mz_glad_glLineStipple
GLAD_API_CALL PFNGLLINEWIDTHPROC mz_glad_glLineWidth;
#define glLineWidth mz_glad_glLineWidth
GLAD_API_CALL PFNGLLINKPROGRAMPROC mz_glad_glLinkProgram;
#define glLinkProgram mz_glad_glLinkProgram
GLAD_API_CALL PFNGLLINKPROGRAMARBPROC mz_glad_glLinkProgramARB;
#define glLinkProgramARB mz_glad_glLinkProgramARB
GLAD_API_CALL PFNGLLISTBASEPROC mz_glad_glListBase;
#define glListBase mz_glad_glListBase
GLAD_API_CALL PFNGLLOADIDENTITYPROC mz_glad_glLoadIdentity;
#define glLoadIdentity mz_glad_glLoadIdentity
GLAD_API_CALL PFNGLLOADMATRIXDPROC mz_glad_glLoadMatrixd;
#define glLoadMatrixd mz_glad_glLoadMatrixd
GLAD_API_CALL PFNGLLOADMATRIXFPROC mz_glad_glLoadMatrixf;
#define glLoadMatrixf mz_glad_glLoadMatrixf
GLAD_API_CALL PFNGLLOADNAMEPROC mz_glad_glLoadName;
#define glLoadName mz_glad_glLoadName
GLAD_API_CALL PFNGLLOADPROGRAMNVPROC mz_glad_glLoadProgramNV;
#define glLoadProgramNV mz_glad_glLoadProgramNV
GLAD_API_CALL PFNGLLOGICOPPROC mz_glad_glLogicOp;
#define glLogicOp mz_glad_glLogicOp
GLAD_API_CALL PFNGLMAP1DPROC mz_glad_glMap1d;
#define glMap1d mz_glad_glMap1d
GLAD_API_CALL PFNGLMAP1FPROC mz_glad_glMap1f;
#define glMap1f mz_glad_glMap1f
GLAD_API_CALL PFNGLMAP2DPROC mz_glad_glMap2d;
#define glMap2d mz_glad_glMap2d
GLAD_API_CALL PFNGLMAP2FPROC mz_glad_glMap2f;
#define glMap2f mz_glad_glMap2f
GLAD_API_CALL PFNGLMAPBUFFERPROC mz_glad_glMapBuffer;
#define glMapBuffer mz_glad_glMapBuffer
GLAD_API_CALL PFNGLMAPBUFFERARBPROC mz_glad_glMapBufferARB;
#define glMapBufferARB mz_glad_glMapBufferARB
GLAD_API_CALL PFNGLMAPGRID1DPROC mz_glad_glMapGrid1d;
#define glMapGrid1d mz_glad_glMapGrid1d
GLAD_API_CALL PFNGLMAPGRID1FPROC mz_glad_glMapGrid1f;
#define glMapGrid1f mz_glad_glMapGrid1f
GLAD_API_CALL PFNGLMAPGRID2DPROC mz_glad_glMapGrid2d;
#define glMapGrid2d mz_glad_glMapGrid2d
GLAD_API_CALL PFNGLMAPGRID2FPROC mz_glad_glMapGrid2f;
#define glMapGrid2f mz_glad_glMapGrid2f
GLAD_API_CALL PFNGLMATERIALFPROC mz_glad_glMaterialf;
#define glMaterialf mz_glad_glMaterialf
GLAD_API_CALL PFNGLMATERIALFVPROC mz_glad_glMaterialfv;
#define glMaterialfv mz_glad_glMaterialfv
GLAD_API_CALL PFNGLMATERIALIPROC mz_glad_glMateriali;
#define glMateriali mz_glad_glMateriali
GLAD_API_CALL PFNGLMATERIALIVPROC mz_glad_glMaterialiv;
#define glMaterialiv mz_glad_glMaterialiv
GLAD_API_CALL PFNGLMATRIXMODEPROC mz_glad_glMatrixMode;
#define glMatrixMode mz_glad_glMatrixMode
GLAD_API_CALL PFNGLMINMAXPROC mz_glad_glMinmax;
#define glMinmax mz_glad_glMinmax
GLAD_API_CALL PFNGLMULTMATRIXDPROC mz_glad_glMultMatrixd;
#define glMultMatrixd mz_glad_glMultMatrixd
GLAD_API_CALL PFNGLMULTMATRIXFPROC mz_glad_glMultMatrixf;
#define glMultMatrixf mz_glad_glMultMatrixf
GLAD_API_CALL PFNGLMULTITEXCOORD1DPROC mz_glad_glMultiTexCoord1d;
#define glMultiTexCoord1d mz_glad_glMultiTexCoord1d
GLAD_API_CALL PFNGLMULTITEXCOORD1DARBPROC mz_glad_glMultiTexCoord1dARB;
#define glMultiTexCoord1dARB mz_glad_glMultiTexCoord1dARB
GLAD_API_CALL PFNGLMULTITEXCOORD1DVPROC mz_glad_glMultiTexCoord1dv;
#define glMultiTexCoord1dv mz_glad_glMultiTexCoord1dv
GLAD_API_CALL PFNGLMULTITEXCOORD1DVARBPROC mz_glad_glMultiTexCoord1dvARB;
#define glMultiTexCoord1dvARB mz_glad_glMultiTexCoord1dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FPROC mz_glad_glMultiTexCoord1f;
#define glMultiTexCoord1f mz_glad_glMultiTexCoord1f
GLAD_API_CALL PFNGLMULTITEXCOORD1FARBPROC mz_glad_glMultiTexCoord1fARB;
#define glMultiTexCoord1fARB mz_glad_glMultiTexCoord1fARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FVPROC mz_glad_glMultiTexCoord1fv;
#define glMultiTexCoord1fv mz_glad_glMultiTexCoord1fv
GLAD_API_CALL PFNGLMULTITEXCOORD1FVARBPROC mz_glad_glMultiTexCoord1fvARB;
#define glMultiTexCoord1fvARB mz_glad_glMultiTexCoord1fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IPROC mz_glad_glMultiTexCoord1i;
#define glMultiTexCoord1i mz_glad_glMultiTexCoord1i
GLAD_API_CALL PFNGLMULTITEXCOORD1IARBPROC mz_glad_glMultiTexCoord1iARB;
#define glMultiTexCoord1iARB mz_glad_glMultiTexCoord1iARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IVPROC mz_glad_glMultiTexCoord1iv;
#define glMultiTexCoord1iv mz_glad_glMultiTexCoord1iv
GLAD_API_CALL PFNGLMULTITEXCOORD1IVARBPROC mz_glad_glMultiTexCoord1ivARB;
#define glMultiTexCoord1ivARB mz_glad_glMultiTexCoord1ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SPROC mz_glad_glMultiTexCoord1s;
#define glMultiTexCoord1s mz_glad_glMultiTexCoord1s
GLAD_API_CALL PFNGLMULTITEXCOORD1SARBPROC mz_glad_glMultiTexCoord1sARB;
#define glMultiTexCoord1sARB mz_glad_glMultiTexCoord1sARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SVPROC mz_glad_glMultiTexCoord1sv;
#define glMultiTexCoord1sv mz_glad_glMultiTexCoord1sv
GLAD_API_CALL PFNGLMULTITEXCOORD1SVARBPROC mz_glad_glMultiTexCoord1svARB;
#define glMultiTexCoord1svARB mz_glad_glMultiTexCoord1svARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DPROC mz_glad_glMultiTexCoord2d;
#define glMultiTexCoord2d mz_glad_glMultiTexCoord2d
GLAD_API_CALL PFNGLMULTITEXCOORD2DARBPROC mz_glad_glMultiTexCoord2dARB;
#define glMultiTexCoord2dARB mz_glad_glMultiTexCoord2dARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DVPROC mz_glad_glMultiTexCoord2dv;
#define glMultiTexCoord2dv mz_glad_glMultiTexCoord2dv
GLAD_API_CALL PFNGLMULTITEXCOORD2DVARBPROC mz_glad_glMultiTexCoord2dvARB;
#define glMultiTexCoord2dvARB mz_glad_glMultiTexCoord2dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FPROC mz_glad_glMultiTexCoord2f;
#define glMultiTexCoord2f mz_glad_glMultiTexCoord2f
GLAD_API_CALL PFNGLMULTITEXCOORD2FARBPROC mz_glad_glMultiTexCoord2fARB;
#define glMultiTexCoord2fARB mz_glad_glMultiTexCoord2fARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FVPROC mz_glad_glMultiTexCoord2fv;
#define glMultiTexCoord2fv mz_glad_glMultiTexCoord2fv
GLAD_API_CALL PFNGLMULTITEXCOORD2FVARBPROC mz_glad_glMultiTexCoord2fvARB;
#define glMultiTexCoord2fvARB mz_glad_glMultiTexCoord2fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IPROC mz_glad_glMultiTexCoord2i;
#define glMultiTexCoord2i mz_glad_glMultiTexCoord2i
GLAD_API_CALL PFNGLMULTITEXCOORD2IARBPROC mz_glad_glMultiTexCoord2iARB;
#define glMultiTexCoord2iARB mz_glad_glMultiTexCoord2iARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IVPROC mz_glad_glMultiTexCoord2iv;
#define glMultiTexCoord2iv mz_glad_glMultiTexCoord2iv
GLAD_API_CALL PFNGLMULTITEXCOORD2IVARBPROC mz_glad_glMultiTexCoord2ivARB;
#define glMultiTexCoord2ivARB mz_glad_glMultiTexCoord2ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SPROC mz_glad_glMultiTexCoord2s;
#define glMultiTexCoord2s mz_glad_glMultiTexCoord2s
GLAD_API_CALL PFNGLMULTITEXCOORD2SARBPROC mz_glad_glMultiTexCoord2sARB;
#define glMultiTexCoord2sARB mz_glad_glMultiTexCoord2sARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SVPROC mz_glad_glMultiTexCoord2sv;
#define glMultiTexCoord2sv mz_glad_glMultiTexCoord2sv
GLAD_API_CALL PFNGLMULTITEXCOORD2SVARBPROC mz_glad_glMultiTexCoord2svARB;
#define glMultiTexCoord2svARB mz_glad_glMultiTexCoord2svARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DPROC mz_glad_glMultiTexCoord3d;
#define glMultiTexCoord3d mz_glad_glMultiTexCoord3d
GLAD_API_CALL PFNGLMULTITEXCOORD3DARBPROC mz_glad_glMultiTexCoord3dARB;
#define glMultiTexCoord3dARB mz_glad_glMultiTexCoord3dARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DVPROC mz_glad_glMultiTexCoord3dv;
#define glMultiTexCoord3dv mz_glad_glMultiTexCoord3dv
GLAD_API_CALL PFNGLMULTITEXCOORD3DVARBPROC mz_glad_glMultiTexCoord3dvARB;
#define glMultiTexCoord3dvARB mz_glad_glMultiTexCoord3dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FPROC mz_glad_glMultiTexCoord3f;
#define glMultiTexCoord3f mz_glad_glMultiTexCoord3f
GLAD_API_CALL PFNGLMULTITEXCOORD3FARBPROC mz_glad_glMultiTexCoord3fARB;
#define glMultiTexCoord3fARB mz_glad_glMultiTexCoord3fARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FVPROC mz_glad_glMultiTexCoord3fv;
#define glMultiTexCoord3fv mz_glad_glMultiTexCoord3fv
GLAD_API_CALL PFNGLMULTITEXCOORD3FVARBPROC mz_glad_glMultiTexCoord3fvARB;
#define glMultiTexCoord3fvARB mz_glad_glMultiTexCoord3fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IPROC mz_glad_glMultiTexCoord3i;
#define glMultiTexCoord3i mz_glad_glMultiTexCoord3i
GLAD_API_CALL PFNGLMULTITEXCOORD3IARBPROC mz_glad_glMultiTexCoord3iARB;
#define glMultiTexCoord3iARB mz_glad_glMultiTexCoord3iARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IVPROC mz_glad_glMultiTexCoord3iv;
#define glMultiTexCoord3iv mz_glad_glMultiTexCoord3iv
GLAD_API_CALL PFNGLMULTITEXCOORD3IVARBPROC mz_glad_glMultiTexCoord3ivARB;
#define glMultiTexCoord3ivARB mz_glad_glMultiTexCoord3ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SPROC mz_glad_glMultiTexCoord3s;
#define glMultiTexCoord3s mz_glad_glMultiTexCoord3s
GLAD_API_CALL PFNGLMULTITEXCOORD3SARBPROC mz_glad_glMultiTexCoord3sARB;
#define glMultiTexCoord3sARB mz_glad_glMultiTexCoord3sARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SVPROC mz_glad_glMultiTexCoord3sv;
#define glMultiTexCoord3sv mz_glad_glMultiTexCoord3sv
GLAD_API_CALL PFNGLMULTITEXCOORD3SVARBPROC mz_glad_glMultiTexCoord3svARB;
#define glMultiTexCoord3svARB mz_glad_glMultiTexCoord3svARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DPROC mz_glad_glMultiTexCoord4d;
#define glMultiTexCoord4d mz_glad_glMultiTexCoord4d
GLAD_API_CALL PFNGLMULTITEXCOORD4DARBPROC mz_glad_glMultiTexCoord4dARB;
#define glMultiTexCoord4dARB mz_glad_glMultiTexCoord4dARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DVPROC mz_glad_glMultiTexCoord4dv;
#define glMultiTexCoord4dv mz_glad_glMultiTexCoord4dv
GLAD_API_CALL PFNGLMULTITEXCOORD4DVARBPROC mz_glad_glMultiTexCoord4dvARB;
#define glMultiTexCoord4dvARB mz_glad_glMultiTexCoord4dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FPROC mz_glad_glMultiTexCoord4f;
#define glMultiTexCoord4f mz_glad_glMultiTexCoord4f
GLAD_API_CALL PFNGLMULTITEXCOORD4FARBPROC mz_glad_glMultiTexCoord4fARB;
#define glMultiTexCoord4fARB mz_glad_glMultiTexCoord4fARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FVPROC mz_glad_glMultiTexCoord4fv;
#define glMultiTexCoord4fv mz_glad_glMultiTexCoord4fv
GLAD_API_CALL PFNGLMULTITEXCOORD4FVARBPROC mz_glad_glMultiTexCoord4fvARB;
#define glMultiTexCoord4fvARB mz_glad_glMultiTexCoord4fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IPROC mz_glad_glMultiTexCoord4i;
#define glMultiTexCoord4i mz_glad_glMultiTexCoord4i
GLAD_API_CALL PFNGLMULTITEXCOORD4IARBPROC mz_glad_glMultiTexCoord4iARB;
#define glMultiTexCoord4iARB mz_glad_glMultiTexCoord4iARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IVPROC mz_glad_glMultiTexCoord4iv;
#define glMultiTexCoord4iv mz_glad_glMultiTexCoord4iv
GLAD_API_CALL PFNGLMULTITEXCOORD4IVARBPROC mz_glad_glMultiTexCoord4ivARB;
#define glMultiTexCoord4ivARB mz_glad_glMultiTexCoord4ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SPROC mz_glad_glMultiTexCoord4s;
#define glMultiTexCoord4s mz_glad_glMultiTexCoord4s
GLAD_API_CALL PFNGLMULTITEXCOORD4SARBPROC mz_glad_glMultiTexCoord4sARB;
#define glMultiTexCoord4sARB mz_glad_glMultiTexCoord4sARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SVPROC mz_glad_glMultiTexCoord4sv;
#define glMultiTexCoord4sv mz_glad_glMultiTexCoord4sv
GLAD_API_CALL PFNGLMULTITEXCOORD4SVARBPROC mz_glad_glMultiTexCoord4svARB;
#define glMultiTexCoord4svARB mz_glad_glMultiTexCoord4svARB
GLAD_API_CALL PFNGLNEWLISTPROC mz_glad_glNewList;
#define glNewList mz_glad_glNewList
GLAD_API_CALL PFNGLNORMAL3BPROC mz_glad_glNormal3b;
#define glNormal3b mz_glad_glNormal3b
GLAD_API_CALL PFNGLNORMAL3BVPROC mz_glad_glNormal3bv;
#define glNormal3bv mz_glad_glNormal3bv
GLAD_API_CALL PFNGLNORMAL3DPROC mz_glad_glNormal3d;
#define glNormal3d mz_glad_glNormal3d
GLAD_API_CALL PFNGLNORMAL3DVPROC mz_glad_glNormal3dv;
#define glNormal3dv mz_glad_glNormal3dv
GLAD_API_CALL PFNGLNORMAL3FPROC mz_glad_glNormal3f;
#define glNormal3f mz_glad_glNormal3f
GLAD_API_CALL PFNGLNORMAL3FVPROC mz_glad_glNormal3fv;
#define glNormal3fv mz_glad_glNormal3fv
GLAD_API_CALL PFNGLNORMAL3IPROC mz_glad_glNormal3i;
#define glNormal3i mz_glad_glNormal3i
GLAD_API_CALL PFNGLNORMAL3IVPROC mz_glad_glNormal3iv;
#define glNormal3iv mz_glad_glNormal3iv
GLAD_API_CALL PFNGLNORMAL3SPROC mz_glad_glNormal3s;
#define glNormal3s mz_glad_glNormal3s
GLAD_API_CALL PFNGLNORMAL3SVPROC mz_glad_glNormal3sv;
#define glNormal3sv mz_glad_glNormal3sv
GLAD_API_CALL PFNGLNORMALPOINTERPROC mz_glad_glNormalPointer;
#define glNormalPointer mz_glad_glNormalPointer
GLAD_API_CALL PFNGLNORMALPOINTEREXTPROC mz_glad_glNormalPointerEXT;
#define glNormalPointerEXT mz_glad_glNormalPointerEXT
GLAD_API_CALL PFNGLOBJECTLABELPROC mz_glad_glObjectLabel;
#define glObjectLabel mz_glad_glObjectLabel
GLAD_API_CALL PFNGLOBJECTPTRLABELPROC mz_glad_glObjectPtrLabel;
#define glObjectPtrLabel mz_glad_glObjectPtrLabel
GLAD_API_CALL PFNGLORTHOPROC mz_glad_glOrtho;
#define glOrtho mz_glad_glOrtho
GLAD_API_CALL PFNGLPASSTHROUGHPROC mz_glad_glPassThrough;
#define glPassThrough mz_glad_glPassThrough
GLAD_API_CALL PFNGLPIXELMAPFVPROC mz_glad_glPixelMapfv;
#define glPixelMapfv mz_glad_glPixelMapfv
GLAD_API_CALL PFNGLPIXELMAPUIVPROC mz_glad_glPixelMapuiv;
#define glPixelMapuiv mz_glad_glPixelMapuiv
GLAD_API_CALL PFNGLPIXELMAPUSVPROC mz_glad_glPixelMapusv;
#define glPixelMapusv mz_glad_glPixelMapusv
GLAD_API_CALL PFNGLPIXELSTOREFPROC mz_glad_glPixelStoref;
#define glPixelStoref mz_glad_glPixelStoref
GLAD_API_CALL PFNGLPIXELSTOREIPROC mz_glad_glPixelStorei;
#define glPixelStorei mz_glad_glPixelStorei
GLAD_API_CALL PFNGLPIXELTRANSFERFPROC mz_glad_glPixelTransferf;
#define glPixelTransferf mz_glad_glPixelTransferf
GLAD_API_CALL PFNGLPIXELTRANSFERIPROC mz_glad_glPixelTransferi;
#define glPixelTransferi mz_glad_glPixelTransferi
GLAD_API_CALL PFNGLPIXELZOOMPROC mz_glad_glPixelZoom;
#define glPixelZoom mz_glad_glPixelZoom
GLAD_API_CALL PFNGLPOINTSIZEPROC mz_glad_glPointSize;
#define glPointSize mz_glad_glPointSize
GLAD_API_CALL PFNGLPOLYGONMODEPROC mz_glad_glPolygonMode;
#define glPolygonMode mz_glad_glPolygonMode
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC mz_glad_glPolygonOffset;
#define glPolygonOffset mz_glad_glPolygonOffset
GLAD_API_CALL PFNGLPOLYGONSTIPPLEPROC mz_glad_glPolygonStipple;
#define glPolygonStipple mz_glad_glPolygonStipple
GLAD_API_CALL PFNGLPOPATTRIBPROC mz_glad_glPopAttrib;
#define glPopAttrib mz_glad_glPopAttrib
GLAD_API_CALL PFNGLPOPCLIENTATTRIBPROC mz_glad_glPopClientAttrib;
#define glPopClientAttrib mz_glad_glPopClientAttrib
GLAD_API_CALL PFNGLPOPDEBUGGROUPPROC mz_glad_glPopDebugGroup;
#define glPopDebugGroup mz_glad_glPopDebugGroup
GLAD_API_CALL PFNGLPOPMATRIXPROC mz_glad_glPopMatrix;
#define glPopMatrix mz_glad_glPopMatrix
GLAD_API_CALL PFNGLPOPNAMEPROC mz_glad_glPopName;
#define glPopName mz_glad_glPopName
GLAD_API_CALL PFNGLPRIORITIZETEXTURESPROC mz_glad_glPrioritizeTextures;
#define glPrioritizeTextures mz_glad_glPrioritizeTextures
GLAD_API_CALL PFNGLPRIORITIZETEXTURESEXTPROC mz_glad_glPrioritizeTexturesEXT;
#define glPrioritizeTexturesEXT mz_glad_glPrioritizeTexturesEXT
GLAD_API_CALL PFNGLPROGRAMBINARYPROC mz_glad_glProgramBinary;
#define glProgramBinary mz_glad_glProgramBinary
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DARBPROC mz_glad_glProgramEnvParameter4dARB;
#define glProgramEnvParameter4dARB mz_glad_glProgramEnvParameter4dARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DVARBPROC mz_glad_glProgramEnvParameter4dvARB;
#define glProgramEnvParameter4dvARB mz_glad_glProgramEnvParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FARBPROC mz_glad_glProgramEnvParameter4fARB;
#define glProgramEnvParameter4fARB mz_glad_glProgramEnvParameter4fARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FVARBPROC mz_glad_glProgramEnvParameter4fvARB;
#define glProgramEnvParameter4fvARB mz_glad_glProgramEnvParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DARBPROC mz_glad_glProgramLocalParameter4dARB;
#define glProgramLocalParameter4dARB mz_glad_glProgramLocalParameter4dARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DVARBPROC mz_glad_glProgramLocalParameter4dvARB;
#define glProgramLocalParameter4dvARB mz_glad_glProgramLocalParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FARBPROC mz_glad_glProgramLocalParameter4fARB;
#define glProgramLocalParameter4fARB mz_glad_glProgramLocalParameter4fARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FVARBPROC mz_glad_glProgramLocalParameter4fvARB;
#define glProgramLocalParameter4fvARB mz_glad_glProgramLocalParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DNVPROC mz_glad_glProgramParameter4dNV;
#define glProgramParameter4dNV mz_glad_glProgramParameter4dNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DVNVPROC mz_glad_glProgramParameter4dvNV;
#define glProgramParameter4dvNV mz_glad_glProgramParameter4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FNVPROC mz_glad_glProgramParameter4fNV;
#define glProgramParameter4fNV mz_glad_glProgramParameter4fNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FVNVPROC mz_glad_glProgramParameter4fvNV;
#define glProgramParameter4fvNV mz_glad_glProgramParameter4fvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC mz_glad_glProgramParameteri;
#define glProgramParameteri mz_glad_glProgramParameteri
GLAD_API_CALL PFNGLPROGRAMPARAMETERIARBPROC mz_glad_glProgramParameteriARB;
#define glProgramParameteriARB mz_glad_glProgramParameteriARB
GLAD_API_CALL PFNGLPROGRAMPARAMETERIEXTPROC mz_glad_glProgramParameteriEXT;
#define glProgramParameteriEXT mz_glad_glProgramParameteriEXT
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4DVNVPROC mz_glad_glProgramParameters4dvNV;
#define glProgramParameters4dvNV mz_glad_glProgramParameters4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4FVNVPROC mz_glad_glProgramParameters4fvNV;
#define glProgramParameters4fvNV mz_glad_glProgramParameters4fvNV
GLAD_API_CALL PFNGLPROGRAMSTRINGARBPROC mz_glad_glProgramStringARB;
#define glProgramStringARB mz_glad_glProgramStringARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC mz_glad_glProgramUniform1d;
#define glProgramUniform1d mz_glad_glProgramUniform1d
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC mz_glad_glProgramUniform1dv;
#define glProgramUniform1dv mz_glad_glProgramUniform1dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC mz_glad_glProgramUniform1f;
#define glProgramUniform1f mz_glad_glProgramUniform1f
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC mz_glad_glProgramUniform1fv;
#define glProgramUniform1fv mz_glad_glProgramUniform1fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC mz_glad_glProgramUniform1i;
#define glProgramUniform1i mz_glad_glProgramUniform1i
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC mz_glad_glProgramUniform1iv;
#define glProgramUniform1iv mz_glad_glProgramUniform1iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC mz_glad_glProgramUniform1ui;
#define glProgramUniform1ui mz_glad_glProgramUniform1ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC mz_glad_glProgramUniform1uiv;
#define glProgramUniform1uiv mz_glad_glProgramUniform1uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC mz_glad_glProgramUniform2d;
#define glProgramUniform2d mz_glad_glProgramUniform2d
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC mz_glad_glProgramUniform2dv;
#define glProgramUniform2dv mz_glad_glProgramUniform2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC mz_glad_glProgramUniform2f;
#define glProgramUniform2f mz_glad_glProgramUniform2f
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC mz_glad_glProgramUniform2fv;
#define glProgramUniform2fv mz_glad_glProgramUniform2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC mz_glad_glProgramUniform2i;
#define glProgramUniform2i mz_glad_glProgramUniform2i
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC mz_glad_glProgramUniform2iv;
#define glProgramUniform2iv mz_glad_glProgramUniform2iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC mz_glad_glProgramUniform2ui;
#define glProgramUniform2ui mz_glad_glProgramUniform2ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC mz_glad_glProgramUniform2uiv;
#define glProgramUniform2uiv mz_glad_glProgramUniform2uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC mz_glad_glProgramUniform3d;
#define glProgramUniform3d mz_glad_glProgramUniform3d
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC mz_glad_glProgramUniform3dv;
#define glProgramUniform3dv mz_glad_glProgramUniform3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC mz_glad_glProgramUniform3f;
#define glProgramUniform3f mz_glad_glProgramUniform3f
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC mz_glad_glProgramUniform3fv;
#define glProgramUniform3fv mz_glad_glProgramUniform3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC mz_glad_glProgramUniform3i;
#define glProgramUniform3i mz_glad_glProgramUniform3i
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC mz_glad_glProgramUniform3iv;
#define glProgramUniform3iv mz_glad_glProgramUniform3iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC mz_glad_glProgramUniform3ui;
#define glProgramUniform3ui mz_glad_glProgramUniform3ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC mz_glad_glProgramUniform3uiv;
#define glProgramUniform3uiv mz_glad_glProgramUniform3uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC mz_glad_glProgramUniform4d;
#define glProgramUniform4d mz_glad_glProgramUniform4d
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC mz_glad_glProgramUniform4dv;
#define glProgramUniform4dv mz_glad_glProgramUniform4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC mz_glad_glProgramUniform4f;
#define glProgramUniform4f mz_glad_glProgramUniform4f
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC mz_glad_glProgramUniform4fv;
#define glProgramUniform4fv mz_glad_glProgramUniform4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC mz_glad_glProgramUniform4i;
#define glProgramUniform4i mz_glad_glProgramUniform4i
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC mz_glad_glProgramUniform4iv;
#define glProgramUniform4iv mz_glad_glProgramUniform4iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC mz_glad_glProgramUniform4ui;
#define glProgramUniform4ui mz_glad_glProgramUniform4ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC mz_glad_glProgramUniform4uiv;
#define glProgramUniform4uiv mz_glad_glProgramUniform4uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC mz_glad_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv mz_glad_glProgramUniformMatrix2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC mz_glad_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv mz_glad_glProgramUniformMatrix2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC mz_glad_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv mz_glad_glProgramUniformMatrix2x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC mz_glad_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv mz_glad_glProgramUniformMatrix2x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC mz_glad_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv mz_glad_glProgramUniformMatrix2x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC mz_glad_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv mz_glad_glProgramUniformMatrix2x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC mz_glad_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv mz_glad_glProgramUniformMatrix3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC mz_glad_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv mz_glad_glProgramUniformMatrix3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC mz_glad_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv mz_glad_glProgramUniformMatrix3x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC mz_glad_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv mz_glad_glProgramUniformMatrix3x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC mz_glad_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv mz_glad_glProgramUniformMatrix3x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC mz_glad_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv mz_glad_glProgramUniformMatrix3x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC mz_glad_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv mz_glad_glProgramUniformMatrix4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC mz_glad_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv mz_glad_glProgramUniformMatrix4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC mz_glad_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv mz_glad_glProgramUniformMatrix4x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC mz_glad_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv mz_glad_glProgramUniformMatrix4x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC mz_glad_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv mz_glad_glProgramUniformMatrix4x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC mz_glad_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv mz_glad_glProgramUniformMatrix4x3fv
GLAD_API_CALL PFNGLPROGRAMVERTEXLIMITNVPROC mz_glad_glProgramVertexLimitNV;
#define glProgramVertexLimitNV mz_glad_glProgramVertexLimitNV
GLAD_API_CALL PFNGLPUSHATTRIBPROC mz_glad_glPushAttrib;
#define glPushAttrib mz_glad_glPushAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBPROC mz_glad_glPushClientAttrib;
#define glPushClientAttrib mz_glad_glPushClientAttrib
GLAD_API_CALL PFNGLPUSHDEBUGGROUPPROC mz_glad_glPushDebugGroup;
#define glPushDebugGroup mz_glad_glPushDebugGroup
GLAD_API_CALL PFNGLPUSHMATRIXPROC mz_glad_glPushMatrix;
#define glPushMatrix mz_glad_glPushMatrix
GLAD_API_CALL PFNGLPUSHNAMEPROC mz_glad_glPushName;
#define glPushName mz_glad_glPushName
GLAD_API_CALL PFNGLRASTERPOS2DPROC mz_glad_glRasterPos2d;
#define glRasterPos2d mz_glad_glRasterPos2d
GLAD_API_CALL PFNGLRASTERPOS2DVPROC mz_glad_glRasterPos2dv;
#define glRasterPos2dv mz_glad_glRasterPos2dv
GLAD_API_CALL PFNGLRASTERPOS2FPROC mz_glad_glRasterPos2f;
#define glRasterPos2f mz_glad_glRasterPos2f
GLAD_API_CALL PFNGLRASTERPOS2FVPROC mz_glad_glRasterPos2fv;
#define glRasterPos2fv mz_glad_glRasterPos2fv
GLAD_API_CALL PFNGLRASTERPOS2IPROC mz_glad_glRasterPos2i;
#define glRasterPos2i mz_glad_glRasterPos2i
GLAD_API_CALL PFNGLRASTERPOS2IVPROC mz_glad_glRasterPos2iv;
#define glRasterPos2iv mz_glad_glRasterPos2iv
GLAD_API_CALL PFNGLRASTERPOS2SPROC mz_glad_glRasterPos2s;
#define glRasterPos2s mz_glad_glRasterPos2s
GLAD_API_CALL PFNGLRASTERPOS2SVPROC mz_glad_glRasterPos2sv;
#define glRasterPos2sv mz_glad_glRasterPos2sv
GLAD_API_CALL PFNGLRASTERPOS3DPROC mz_glad_glRasterPos3d;
#define glRasterPos3d mz_glad_glRasterPos3d
GLAD_API_CALL PFNGLRASTERPOS3DVPROC mz_glad_glRasterPos3dv;
#define glRasterPos3dv mz_glad_glRasterPos3dv
GLAD_API_CALL PFNGLRASTERPOS3FPROC mz_glad_glRasterPos3f;
#define glRasterPos3f mz_glad_glRasterPos3f
GLAD_API_CALL PFNGLRASTERPOS3FVPROC mz_glad_glRasterPos3fv;
#define glRasterPos3fv mz_glad_glRasterPos3fv
GLAD_API_CALL PFNGLRASTERPOS3IPROC mz_glad_glRasterPos3i;
#define glRasterPos3i mz_glad_glRasterPos3i
GLAD_API_CALL PFNGLRASTERPOS3IVPROC mz_glad_glRasterPos3iv;
#define glRasterPos3iv mz_glad_glRasterPos3iv
GLAD_API_CALL PFNGLRASTERPOS3SPROC mz_glad_glRasterPos3s;
#define glRasterPos3s mz_glad_glRasterPos3s
GLAD_API_CALL PFNGLRASTERPOS3SVPROC mz_glad_glRasterPos3sv;
#define glRasterPos3sv mz_glad_glRasterPos3sv
GLAD_API_CALL PFNGLRASTERPOS4DPROC mz_glad_glRasterPos4d;
#define glRasterPos4d mz_glad_glRasterPos4d
GLAD_API_CALL PFNGLRASTERPOS4DVPROC mz_glad_glRasterPos4dv;
#define glRasterPos4dv mz_glad_glRasterPos4dv
GLAD_API_CALL PFNGLRASTERPOS4FPROC mz_glad_glRasterPos4f;
#define glRasterPos4f mz_glad_glRasterPos4f
GLAD_API_CALL PFNGLRASTERPOS4FVPROC mz_glad_glRasterPos4fv;
#define glRasterPos4fv mz_glad_glRasterPos4fv
GLAD_API_CALL PFNGLRASTERPOS4IPROC mz_glad_glRasterPos4i;
#define glRasterPos4i mz_glad_glRasterPos4i
GLAD_API_CALL PFNGLRASTERPOS4IVPROC mz_glad_glRasterPos4iv;
#define glRasterPos4iv mz_glad_glRasterPos4iv
GLAD_API_CALL PFNGLRASTERPOS4SPROC mz_glad_glRasterPos4s;
#define glRasterPos4s mz_glad_glRasterPos4s
GLAD_API_CALL PFNGLRASTERPOS4SVPROC mz_glad_glRasterPos4sv;
#define glRasterPos4sv mz_glad_glRasterPos4sv
GLAD_API_CALL PFNGLREADBUFFERPROC mz_glad_glReadBuffer;
#define glReadBuffer mz_glad_glReadBuffer
GLAD_API_CALL PFNGLREADPIXELSPROC mz_glad_glReadPixels;
#define glReadPixels mz_glad_glReadPixels
GLAD_API_CALL PFNGLRECTDPROC mz_glad_glRectd;
#define glRectd mz_glad_glRectd
GLAD_API_CALL PFNGLRECTDVPROC mz_glad_glRectdv;
#define glRectdv mz_glad_glRectdv
GLAD_API_CALL PFNGLRECTFPROC mz_glad_glRectf;
#define glRectf mz_glad_glRectf
GLAD_API_CALL PFNGLRECTFVPROC mz_glad_glRectfv;
#define glRectfv mz_glad_glRectfv
GLAD_API_CALL PFNGLRECTIPROC mz_glad_glRecti;
#define glRecti mz_glad_glRecti
GLAD_API_CALL PFNGLRECTIVPROC mz_glad_glRectiv;
#define glRectiv mz_glad_glRectiv
GLAD_API_CALL PFNGLRECTSPROC mz_glad_glRects;
#define glRects mz_glad_glRects
GLAD_API_CALL PFNGLRECTSVPROC mz_glad_glRectsv;
#define glRectsv mz_glad_glRectsv
GLAD_API_CALL PFNGLRENDERMODEPROC mz_glad_glRenderMode;
#define glRenderMode mz_glad_glRenderMode
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC mz_glad_glRenderbufferStorage;
#define glRenderbufferStorage mz_glad_glRenderbufferStorage
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEEXTPROC mz_glad_glRenderbufferStorageEXT;
#define glRenderbufferStorageEXT mz_glad_glRenderbufferStorageEXT
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC mz_glad_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample mz_glad_glRenderbufferStorageMultisample
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC mz_glad_glRenderbufferStorageMultisampleEXT;
#define glRenderbufferStorageMultisampleEXT mz_glad_glRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLREQUESTRESIDENTPROGRAMSNVPROC mz_glad_glRequestResidentProgramsNV;
#define glRequestResidentProgramsNV mz_glad_glRequestResidentProgramsNV
GLAD_API_CALL PFNGLRESETHISTOGRAMPROC mz_glad_glResetHistogram;
#define glResetHistogram mz_glad_glResetHistogram
GLAD_API_CALL PFNGLRESETMINMAXPROC mz_glad_glResetMinmax;
#define glResetMinmax mz_glad_glResetMinmax
GLAD_API_CALL PFNGLROTATEDPROC mz_glad_glRotated;
#define glRotated mz_glad_glRotated
GLAD_API_CALL PFNGLROTATEFPROC mz_glad_glRotatef;
#define glRotatef mz_glad_glRotatef
GLAD_API_CALL PFNGLSCALEDPROC mz_glad_glScaled;
#define glScaled mz_glad_glScaled
GLAD_API_CALL PFNGLSCALEFPROC mz_glad_glScalef;
#define glScalef mz_glad_glScalef
GLAD_API_CALL PFNGLSCISSORPROC mz_glad_glScissor;
#define glScissor mz_glad_glScissor
GLAD_API_CALL PFNGLSELECTBUFFERPROC mz_glad_glSelectBuffer;
#define glSelectBuffer mz_glad_glSelectBuffer
GLAD_API_CALL PFNGLSEPARABLEFILTER2DPROC mz_glad_glSeparableFilter2D;
#define glSeparableFilter2D mz_glad_glSeparableFilter2D
GLAD_API_CALL PFNGLSHADEMODELPROC mz_glad_glShadeModel;
#define glShadeModel mz_glad_glShadeModel
GLAD_API_CALL PFNGLSHADERSOURCEPROC mz_glad_glShaderSource;
#define glShaderSource mz_glad_glShaderSource
GLAD_API_CALL PFNGLSHADERSOURCEARBPROC mz_glad_glShaderSourceARB;
#define glShaderSourceARB mz_glad_glShaderSourceARB
GLAD_API_CALL PFNGLSTENCILFUNCPROC mz_glad_glStencilFunc;
#define glStencilFunc mz_glad_glStencilFunc
GLAD_API_CALL PFNGLSTENCILMASKPROC mz_glad_glStencilMask;
#define glStencilMask mz_glad_glStencilMask
GLAD_API_CALL PFNGLSTENCILOPPROC mz_glad_glStencilOp;
#define glStencilOp mz_glad_glStencilOp
GLAD_API_CALL PFNGLTEXCOORD1DPROC mz_glad_glTexCoord1d;
#define glTexCoord1d mz_glad_glTexCoord1d
GLAD_API_CALL PFNGLTEXCOORD1DVPROC mz_glad_glTexCoord1dv;
#define glTexCoord1dv mz_glad_glTexCoord1dv
GLAD_API_CALL PFNGLTEXCOORD1FPROC mz_glad_glTexCoord1f;
#define glTexCoord1f mz_glad_glTexCoord1f
GLAD_API_CALL PFNGLTEXCOORD1FVPROC mz_glad_glTexCoord1fv;
#define glTexCoord1fv mz_glad_glTexCoord1fv
GLAD_API_CALL PFNGLTEXCOORD1IPROC mz_glad_glTexCoord1i;
#define glTexCoord1i mz_glad_glTexCoord1i
GLAD_API_CALL PFNGLTEXCOORD1IVPROC mz_glad_glTexCoord1iv;
#define glTexCoord1iv mz_glad_glTexCoord1iv
GLAD_API_CALL PFNGLTEXCOORD1SPROC mz_glad_glTexCoord1s;
#define glTexCoord1s mz_glad_glTexCoord1s
GLAD_API_CALL PFNGLTEXCOORD1SVPROC mz_glad_glTexCoord1sv;
#define glTexCoord1sv mz_glad_glTexCoord1sv
GLAD_API_CALL PFNGLTEXCOORD2DPROC mz_glad_glTexCoord2d;
#define glTexCoord2d mz_glad_glTexCoord2d
GLAD_API_CALL PFNGLTEXCOORD2DVPROC mz_glad_glTexCoord2dv;
#define glTexCoord2dv mz_glad_glTexCoord2dv
GLAD_API_CALL PFNGLTEXCOORD2FPROC mz_glad_glTexCoord2f;
#define glTexCoord2f mz_glad_glTexCoord2f
GLAD_API_CALL PFNGLTEXCOORD2FVPROC mz_glad_glTexCoord2fv;
#define glTexCoord2fv mz_glad_glTexCoord2fv
GLAD_API_CALL PFNGLTEXCOORD2IPROC mz_glad_glTexCoord2i;
#define glTexCoord2i mz_glad_glTexCoord2i
GLAD_API_CALL PFNGLTEXCOORD2IVPROC mz_glad_glTexCoord2iv;
#define glTexCoord2iv mz_glad_glTexCoord2iv
GLAD_API_CALL PFNGLTEXCOORD2SPROC mz_glad_glTexCoord2s;
#define glTexCoord2s mz_glad_glTexCoord2s
GLAD_API_CALL PFNGLTEXCOORD2SVPROC mz_glad_glTexCoord2sv;
#define glTexCoord2sv mz_glad_glTexCoord2sv
GLAD_API_CALL PFNGLTEXCOORD3DPROC mz_glad_glTexCoord3d;
#define glTexCoord3d mz_glad_glTexCoord3d
GLAD_API_CALL PFNGLTEXCOORD3DVPROC mz_glad_glTexCoord3dv;
#define glTexCoord3dv mz_glad_glTexCoord3dv
GLAD_API_CALL PFNGLTEXCOORD3FPROC mz_glad_glTexCoord3f;
#define glTexCoord3f mz_glad_glTexCoord3f
GLAD_API_CALL PFNGLTEXCOORD3FVPROC mz_glad_glTexCoord3fv;
#define glTexCoord3fv mz_glad_glTexCoord3fv
GLAD_API_CALL PFNGLTEXCOORD3IPROC mz_glad_glTexCoord3i;
#define glTexCoord3i mz_glad_glTexCoord3i
GLAD_API_CALL PFNGLTEXCOORD3IVPROC mz_glad_glTexCoord3iv;
#define glTexCoord3iv mz_glad_glTexCoord3iv
GLAD_API_CALL PFNGLTEXCOORD3SPROC mz_glad_glTexCoord3s;
#define glTexCoord3s mz_glad_glTexCoord3s
GLAD_API_CALL PFNGLTEXCOORD3SVPROC mz_glad_glTexCoord3sv;
#define glTexCoord3sv mz_glad_glTexCoord3sv
GLAD_API_CALL PFNGLTEXCOORD4DPROC mz_glad_glTexCoord4d;
#define glTexCoord4d mz_glad_glTexCoord4d
GLAD_API_CALL PFNGLTEXCOORD4DVPROC mz_glad_glTexCoord4dv;
#define glTexCoord4dv mz_glad_glTexCoord4dv
GLAD_API_CALL PFNGLTEXCOORD4FPROC mz_glad_glTexCoord4f;
#define glTexCoord4f mz_glad_glTexCoord4f
GLAD_API_CALL PFNGLTEXCOORD4FVPROC mz_glad_glTexCoord4fv;
#define glTexCoord4fv mz_glad_glTexCoord4fv
GLAD_API_CALL PFNGLTEXCOORD4IPROC mz_glad_glTexCoord4i;
#define glTexCoord4i mz_glad_glTexCoord4i
GLAD_API_CALL PFNGLTEXCOORD4IVPROC mz_glad_glTexCoord4iv;
#define glTexCoord4iv mz_glad_glTexCoord4iv
GLAD_API_CALL PFNGLTEXCOORD4SPROC mz_glad_glTexCoord4s;
#define glTexCoord4s mz_glad_glTexCoord4s
GLAD_API_CALL PFNGLTEXCOORD4SVPROC mz_glad_glTexCoord4sv;
#define glTexCoord4sv mz_glad_glTexCoord4sv
GLAD_API_CALL PFNGLTEXCOORDPOINTERPROC mz_glad_glTexCoordPointer;
#define glTexCoordPointer mz_glad_glTexCoordPointer
GLAD_API_CALL PFNGLTEXCOORDPOINTEREXTPROC mz_glad_glTexCoordPointerEXT;
#define glTexCoordPointerEXT mz_glad_glTexCoordPointerEXT
GLAD_API_CALL PFNGLTEXENVFPROC mz_glad_glTexEnvf;
#define glTexEnvf mz_glad_glTexEnvf
GLAD_API_CALL PFNGLTEXENVFVPROC mz_glad_glTexEnvfv;
#define glTexEnvfv mz_glad_glTexEnvfv
GLAD_API_CALL PFNGLTEXENVIPROC mz_glad_glTexEnvi;
#define glTexEnvi mz_glad_glTexEnvi
GLAD_API_CALL PFNGLTEXENVIVPROC mz_glad_glTexEnviv;
#define glTexEnviv mz_glad_glTexEnviv
GLAD_API_CALL PFNGLTEXGENDPROC mz_glad_glTexGend;
#define glTexGend mz_glad_glTexGend
GLAD_API_CALL PFNGLTEXGENDVPROC mz_glad_glTexGendv;
#define glTexGendv mz_glad_glTexGendv
GLAD_API_CALL PFNGLTEXGENFPROC mz_glad_glTexGenf;
#define glTexGenf mz_glad_glTexGenf
GLAD_API_CALL PFNGLTEXGENFVPROC mz_glad_glTexGenfv;
#define glTexGenfv mz_glad_glTexGenfv
GLAD_API_CALL PFNGLTEXGENIPROC mz_glad_glTexGeni;
#define glTexGeni mz_glad_glTexGeni
GLAD_API_CALL PFNGLTEXGENIVPROC mz_glad_glTexGeniv;
#define glTexGeniv mz_glad_glTexGeniv
GLAD_API_CALL PFNGLTEXIMAGE1DPROC mz_glad_glTexImage1D;
#define glTexImage1D mz_glad_glTexImage1D
GLAD_API_CALL PFNGLTEXIMAGE2DPROC mz_glad_glTexImage2D;
#define glTexImage2D mz_glad_glTexImage2D
GLAD_API_CALL PFNGLTEXPARAMETERFPROC mz_glad_glTexParameterf;
#define glTexParameterf mz_glad_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC mz_glad_glTexParameterfv;
#define glTexParameterfv mz_glad_glTexParameterfv
GLAD_API_CALL PFNGLTEXPARAMETERIPROC mz_glad_glTexParameteri;
#define glTexParameteri mz_glad_glTexParameteri
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC mz_glad_glTexParameteriv;
#define glTexParameteriv mz_glad_glTexParameteriv
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC mz_glad_glTexSubImage1D;
#define glTexSubImage1D mz_glad_glTexSubImage1D
GLAD_API_CALL PFNGLTEXSUBIMAGE1DEXTPROC mz_glad_glTexSubImage1DEXT;
#define glTexSubImage1DEXT mz_glad_glTexSubImage1DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC mz_glad_glTexSubImage2D;
#define glTexSubImage2D mz_glad_glTexSubImage2D
GLAD_API_CALL PFNGLTEXSUBIMAGE2DEXTPROC mz_glad_glTexSubImage2DEXT;
#define glTexSubImage2DEXT mz_glad_glTexSubImage2DEXT
GLAD_API_CALL PFNGLTRACKMATRIXNVPROC mz_glad_glTrackMatrixNV;
#define glTrackMatrixNV mz_glad_glTrackMatrixNV
GLAD_API_CALL PFNGLTRANSLATEDPROC mz_glad_glTranslated;
#define glTranslated mz_glad_glTranslated
GLAD_API_CALL PFNGLTRANSLATEFPROC mz_glad_glTranslatef;
#define glTranslatef mz_glad_glTranslatef
GLAD_API_CALL PFNGLUNIFORM1FPROC mz_glad_glUniform1f;
#define glUniform1f mz_glad_glUniform1f
GLAD_API_CALL PFNGLUNIFORM1FARBPROC mz_glad_glUniform1fARB;
#define glUniform1fARB mz_glad_glUniform1fARB
GLAD_API_CALL PFNGLUNIFORM1FVPROC mz_glad_glUniform1fv;
#define glUniform1fv mz_glad_glUniform1fv
GLAD_API_CALL PFNGLUNIFORM1FVARBPROC mz_glad_glUniform1fvARB;
#define glUniform1fvARB mz_glad_glUniform1fvARB
GLAD_API_CALL PFNGLUNIFORM1IPROC mz_glad_glUniform1i;
#define glUniform1i mz_glad_glUniform1i
GLAD_API_CALL PFNGLUNIFORM1IARBPROC mz_glad_glUniform1iARB;
#define glUniform1iARB mz_glad_glUniform1iARB
GLAD_API_CALL PFNGLUNIFORM1IVPROC mz_glad_glUniform1iv;
#define glUniform1iv mz_glad_glUniform1iv
GLAD_API_CALL PFNGLUNIFORM1IVARBPROC mz_glad_glUniform1ivARB;
#define glUniform1ivARB mz_glad_glUniform1ivARB
GLAD_API_CALL PFNGLUNIFORM2FPROC mz_glad_glUniform2f;
#define glUniform2f mz_glad_glUniform2f
GLAD_API_CALL PFNGLUNIFORM2FARBPROC mz_glad_glUniform2fARB;
#define glUniform2fARB mz_glad_glUniform2fARB
GLAD_API_CALL PFNGLUNIFORM2FVPROC mz_glad_glUniform2fv;
#define glUniform2fv mz_glad_glUniform2fv
GLAD_API_CALL PFNGLUNIFORM2FVARBPROC mz_glad_glUniform2fvARB;
#define glUniform2fvARB mz_glad_glUniform2fvARB
GLAD_API_CALL PFNGLUNIFORM2IPROC mz_glad_glUniform2i;
#define glUniform2i mz_glad_glUniform2i
GLAD_API_CALL PFNGLUNIFORM2IARBPROC mz_glad_glUniform2iARB;
#define glUniform2iARB mz_glad_glUniform2iARB
GLAD_API_CALL PFNGLUNIFORM2IVPROC mz_glad_glUniform2iv;
#define glUniform2iv mz_glad_glUniform2iv
GLAD_API_CALL PFNGLUNIFORM2IVARBPROC mz_glad_glUniform2ivARB;
#define glUniform2ivARB mz_glad_glUniform2ivARB
GLAD_API_CALL PFNGLUNIFORM3FPROC mz_glad_glUniform3f;
#define glUniform3f mz_glad_glUniform3f
GLAD_API_CALL PFNGLUNIFORM3FARBPROC mz_glad_glUniform3fARB;
#define glUniform3fARB mz_glad_glUniform3fARB
GLAD_API_CALL PFNGLUNIFORM3FVPROC mz_glad_glUniform3fv;
#define glUniform3fv mz_glad_glUniform3fv
GLAD_API_CALL PFNGLUNIFORM3FVARBPROC mz_glad_glUniform3fvARB;
#define glUniform3fvARB mz_glad_glUniform3fvARB
GLAD_API_CALL PFNGLUNIFORM3IPROC mz_glad_glUniform3i;
#define glUniform3i mz_glad_glUniform3i
GLAD_API_CALL PFNGLUNIFORM3IARBPROC mz_glad_glUniform3iARB;
#define glUniform3iARB mz_glad_glUniform3iARB
GLAD_API_CALL PFNGLUNIFORM3IVPROC mz_glad_glUniform3iv;
#define glUniform3iv mz_glad_glUniform3iv
GLAD_API_CALL PFNGLUNIFORM3IVARBPROC mz_glad_glUniform3ivARB;
#define glUniform3ivARB mz_glad_glUniform3ivARB
GLAD_API_CALL PFNGLUNIFORM4FPROC mz_glad_glUniform4f;
#define glUniform4f mz_glad_glUniform4f
GLAD_API_CALL PFNGLUNIFORM4FARBPROC mz_glad_glUniform4fARB;
#define glUniform4fARB mz_glad_glUniform4fARB
GLAD_API_CALL PFNGLUNIFORM4FVPROC mz_glad_glUniform4fv;
#define glUniform4fv mz_glad_glUniform4fv
GLAD_API_CALL PFNGLUNIFORM4FVARBPROC mz_glad_glUniform4fvARB;
#define glUniform4fvARB mz_glad_glUniform4fvARB
GLAD_API_CALL PFNGLUNIFORM4IPROC mz_glad_glUniform4i;
#define glUniform4i mz_glad_glUniform4i
GLAD_API_CALL PFNGLUNIFORM4IARBPROC mz_glad_glUniform4iARB;
#define glUniform4iARB mz_glad_glUniform4iARB
GLAD_API_CALL PFNGLUNIFORM4IVPROC mz_glad_glUniform4iv;
#define glUniform4iv mz_glad_glUniform4iv
GLAD_API_CALL PFNGLUNIFORM4IVARBPROC mz_glad_glUniform4ivARB;
#define glUniform4ivARB mz_glad_glUniform4ivARB
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC mz_glad_glUniformMatrix2fv;
#define glUniformMatrix2fv mz_glad_glUniformMatrix2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVARBPROC mz_glad_glUniformMatrix2fvARB;
#define glUniformMatrix2fvARB mz_glad_glUniformMatrix2fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC mz_glad_glUniformMatrix3fv;
#define glUniformMatrix3fv mz_glad_glUniformMatrix3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVARBPROC mz_glad_glUniformMatrix3fvARB;
#define glUniformMatrix3fvARB mz_glad_glUniformMatrix3fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC mz_glad_glUniformMatrix4fv;
#define glUniformMatrix4fv mz_glad_glUniformMatrix4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVARBPROC mz_glad_glUniformMatrix4fvARB;
#define glUniformMatrix4fvARB mz_glad_glUniformMatrix4fvARB
GLAD_API_CALL PFNGLUNMAPBUFFERPROC mz_glad_glUnmapBuffer;
#define glUnmapBuffer mz_glad_glUnmapBuffer
GLAD_API_CALL PFNGLUNMAPBUFFERARBPROC mz_glad_glUnmapBufferARB;
#define glUnmapBufferARB mz_glad_glUnmapBufferARB
GLAD_API_CALL PFNGLUSEPROGRAMPROC mz_glad_glUseProgram;
#define glUseProgram mz_glad_glUseProgram
GLAD_API_CALL PFNGLUSEPROGRAMOBJECTARBPROC mz_glad_glUseProgramObjectARB;
#define glUseProgramObjectARB mz_glad_glUseProgramObjectARB
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC mz_glad_glUseProgramStages;
#define glUseProgramStages mz_glad_glUseProgramStages
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC mz_glad_glValidateProgram;
#define glValidateProgram mz_glad_glValidateProgram
GLAD_API_CALL PFNGLVALIDATEPROGRAMARBPROC mz_glad_glValidateProgramARB;
#define glValidateProgramARB mz_glad_glValidateProgramARB
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC mz_glad_glValidateProgramPipeline;
#define glValidateProgramPipeline mz_glad_glValidateProgramPipeline
GLAD_API_CALL PFNGLVERTEX2DPROC mz_glad_glVertex2d;
#define glVertex2d mz_glad_glVertex2d
GLAD_API_CALL PFNGLVERTEX2DVPROC mz_glad_glVertex2dv;
#define glVertex2dv mz_glad_glVertex2dv
GLAD_API_CALL PFNGLVERTEX2FPROC mz_glad_glVertex2f;
#define glVertex2f mz_glad_glVertex2f
GLAD_API_CALL PFNGLVERTEX2FVPROC mz_glad_glVertex2fv;
#define glVertex2fv mz_glad_glVertex2fv
GLAD_API_CALL PFNGLVERTEX2IPROC mz_glad_glVertex2i;
#define glVertex2i mz_glad_glVertex2i
GLAD_API_CALL PFNGLVERTEX2IVPROC mz_glad_glVertex2iv;
#define glVertex2iv mz_glad_glVertex2iv
GLAD_API_CALL PFNGLVERTEX2SPROC mz_glad_glVertex2s;
#define glVertex2s mz_glad_glVertex2s
GLAD_API_CALL PFNGLVERTEX2SVPROC mz_glad_glVertex2sv;
#define glVertex2sv mz_glad_glVertex2sv
GLAD_API_CALL PFNGLVERTEX3DPROC mz_glad_glVertex3d;
#define glVertex3d mz_glad_glVertex3d
GLAD_API_CALL PFNGLVERTEX3DVPROC mz_glad_glVertex3dv;
#define glVertex3dv mz_glad_glVertex3dv
GLAD_API_CALL PFNGLVERTEX3FPROC mz_glad_glVertex3f;
#define glVertex3f mz_glad_glVertex3f
GLAD_API_CALL PFNGLVERTEX3FVPROC mz_glad_glVertex3fv;
#define glVertex3fv mz_glad_glVertex3fv
GLAD_API_CALL PFNGLVERTEX3IPROC mz_glad_glVertex3i;
#define glVertex3i mz_glad_glVertex3i
GLAD_API_CALL PFNGLVERTEX3IVPROC mz_glad_glVertex3iv;
#define glVertex3iv mz_glad_glVertex3iv
GLAD_API_CALL PFNGLVERTEX3SPROC mz_glad_glVertex3s;
#define glVertex3s mz_glad_glVertex3s
GLAD_API_CALL PFNGLVERTEX3SVPROC mz_glad_glVertex3sv;
#define glVertex3sv mz_glad_glVertex3sv
GLAD_API_CALL PFNGLVERTEX4DPROC mz_glad_glVertex4d;
#define glVertex4d mz_glad_glVertex4d
GLAD_API_CALL PFNGLVERTEX4DVPROC mz_glad_glVertex4dv;
#define glVertex4dv mz_glad_glVertex4dv
GLAD_API_CALL PFNGLVERTEX4FPROC mz_glad_glVertex4f;
#define glVertex4f mz_glad_glVertex4f
GLAD_API_CALL PFNGLVERTEX4FVPROC mz_glad_glVertex4fv;
#define glVertex4fv mz_glad_glVertex4fv
GLAD_API_CALL PFNGLVERTEX4IPROC mz_glad_glVertex4i;
#define glVertex4i mz_glad_glVertex4i
GLAD_API_CALL PFNGLVERTEX4IVPROC mz_glad_glVertex4iv;
#define glVertex4iv mz_glad_glVertex4iv
GLAD_API_CALL PFNGLVERTEX4SPROC mz_glad_glVertex4s;
#define glVertex4s mz_glad_glVertex4s
GLAD_API_CALL PFNGLVERTEX4SVPROC mz_glad_glVertex4sv;
#define glVertex4sv mz_glad_glVertex4sv
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC mz_glad_glVertexAttrib1d;
#define glVertexAttrib1d mz_glad_glVertexAttrib1d
GLAD_API_CALL PFNGLVERTEXATTRIB1DARBPROC mz_glad_glVertexAttrib1dARB;
#define glVertexAttrib1dARB mz_glad_glVertexAttrib1dARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DNVPROC mz_glad_glVertexAttrib1dNV;
#define glVertexAttrib1dNV mz_glad_glVertexAttrib1dNV
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC mz_glad_glVertexAttrib1dv;
#define glVertexAttrib1dv mz_glad_glVertexAttrib1dv
GLAD_API_CALL PFNGLVERTEXATTRIB1DVARBPROC mz_glad_glVertexAttrib1dvARB;
#define glVertexAttrib1dvARB mz_glad_glVertexAttrib1dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DVNVPROC mz_glad_glVertexAttrib1dvNV;
#define glVertexAttrib1dvNV mz_glad_glVertexAttrib1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC mz_glad_glVertexAttrib1f;
#define glVertexAttrib1f mz_glad_glVertexAttrib1f
GLAD_API_CALL PFNGLVERTEXATTRIB1FARBPROC mz_glad_glVertexAttrib1fARB;
#define glVertexAttrib1fARB mz_glad_glVertexAttrib1fARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FNVPROC mz_glad_glVertexAttrib1fNV;
#define glVertexAttrib1fNV mz_glad_glVertexAttrib1fNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC mz_glad_glVertexAttrib1fv;
#define glVertexAttrib1fv mz_glad_glVertexAttrib1fv
GLAD_API_CALL PFNGLVERTEXATTRIB1FVARBPROC mz_glad_glVertexAttrib1fvARB;
#define glVertexAttrib1fvARB mz_glad_glVertexAttrib1fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FVNVPROC mz_glad_glVertexAttrib1fvNV;
#define glVertexAttrib1fvNV mz_glad_glVertexAttrib1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC mz_glad_glVertexAttrib1s;
#define glVertexAttrib1s mz_glad_glVertexAttrib1s
GLAD_API_CALL PFNGLVERTEXATTRIB1SARBPROC mz_glad_glVertexAttrib1sARB;
#define glVertexAttrib1sARB mz_glad_glVertexAttrib1sARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SNVPROC mz_glad_glVertexAttrib1sNV;
#define glVertexAttrib1sNV mz_glad_glVertexAttrib1sNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC mz_glad_glVertexAttrib1sv;
#define glVertexAttrib1sv mz_glad_glVertexAttrib1sv
GLAD_API_CALL PFNGLVERTEXATTRIB1SVARBPROC mz_glad_glVertexAttrib1svARB;
#define glVertexAttrib1svARB mz_glad_glVertexAttrib1svARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SVNVPROC mz_glad_glVertexAttrib1svNV;
#define glVertexAttrib1svNV mz_glad_glVertexAttrib1svNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC mz_glad_glVertexAttrib2d;
#define glVertexAttrib2d mz_glad_glVertexAttrib2d
GLAD_API_CALL PFNGLVERTEXATTRIB2DARBPROC mz_glad_glVertexAttrib2dARB;
#define glVertexAttrib2dARB mz_glad_glVertexAttrib2dARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DNVPROC mz_glad_glVertexAttrib2dNV;
#define glVertexAttrib2dNV mz_glad_glVertexAttrib2dNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC mz_glad_glVertexAttrib2dv;
#define glVertexAttrib2dv mz_glad_glVertexAttrib2dv
GLAD_API_CALL PFNGLVERTEXATTRIB2DVARBPROC mz_glad_glVertexAttrib2dvARB;
#define glVertexAttrib2dvARB mz_glad_glVertexAttrib2dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DVNVPROC mz_glad_glVertexAttrib2dvNV;
#define glVertexAttrib2dvNV mz_glad_glVertexAttrib2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC mz_glad_glVertexAttrib2f;
#define glVertexAttrib2f mz_glad_glVertexAttrib2f
GLAD_API_CALL PFNGLVERTEXATTRIB2FARBPROC mz_glad_glVertexAttrib2fARB;
#define glVertexAttrib2fARB mz_glad_glVertexAttrib2fARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FNVPROC mz_glad_glVertexAttrib2fNV;
#define glVertexAttrib2fNV mz_glad_glVertexAttrib2fNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC mz_glad_glVertexAttrib2fv;
#define glVertexAttrib2fv mz_glad_glVertexAttrib2fv
GLAD_API_CALL PFNGLVERTEXATTRIB2FVARBPROC mz_glad_glVertexAttrib2fvARB;
#define glVertexAttrib2fvARB mz_glad_glVertexAttrib2fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FVNVPROC mz_glad_glVertexAttrib2fvNV;
#define glVertexAttrib2fvNV mz_glad_glVertexAttrib2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC mz_glad_glVertexAttrib2s;
#define glVertexAttrib2s mz_glad_glVertexAttrib2s
GLAD_API_CALL PFNGLVERTEXATTRIB2SARBPROC mz_glad_glVertexAttrib2sARB;
#define glVertexAttrib2sARB mz_glad_glVertexAttrib2sARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SNVPROC mz_glad_glVertexAttrib2sNV;
#define glVertexAttrib2sNV mz_glad_glVertexAttrib2sNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC mz_glad_glVertexAttrib2sv;
#define glVertexAttrib2sv mz_glad_glVertexAttrib2sv
GLAD_API_CALL PFNGLVERTEXATTRIB2SVARBPROC mz_glad_glVertexAttrib2svARB;
#define glVertexAttrib2svARB mz_glad_glVertexAttrib2svARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SVNVPROC mz_glad_glVertexAttrib2svNV;
#define glVertexAttrib2svNV mz_glad_glVertexAttrib2svNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC mz_glad_glVertexAttrib3d;
#define glVertexAttrib3d mz_glad_glVertexAttrib3d
GLAD_API_CALL PFNGLVERTEXATTRIB3DARBPROC mz_glad_glVertexAttrib3dARB;
#define glVertexAttrib3dARB mz_glad_glVertexAttrib3dARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DNVPROC mz_glad_glVertexAttrib3dNV;
#define glVertexAttrib3dNV mz_glad_glVertexAttrib3dNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC mz_glad_glVertexAttrib3dv;
#define glVertexAttrib3dv mz_glad_glVertexAttrib3dv
GLAD_API_CALL PFNGLVERTEXATTRIB3DVARBPROC mz_glad_glVertexAttrib3dvARB;
#define glVertexAttrib3dvARB mz_glad_glVertexAttrib3dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DVNVPROC mz_glad_glVertexAttrib3dvNV;
#define glVertexAttrib3dvNV mz_glad_glVertexAttrib3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC mz_glad_glVertexAttrib3f;
#define glVertexAttrib3f mz_glad_glVertexAttrib3f
GLAD_API_CALL PFNGLVERTEXATTRIB3FARBPROC mz_glad_glVertexAttrib3fARB;
#define glVertexAttrib3fARB mz_glad_glVertexAttrib3fARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FNVPROC mz_glad_glVertexAttrib3fNV;
#define glVertexAttrib3fNV mz_glad_glVertexAttrib3fNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC mz_glad_glVertexAttrib3fv;
#define glVertexAttrib3fv mz_glad_glVertexAttrib3fv
GLAD_API_CALL PFNGLVERTEXATTRIB3FVARBPROC mz_glad_glVertexAttrib3fvARB;
#define glVertexAttrib3fvARB mz_glad_glVertexAttrib3fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FVNVPROC mz_glad_glVertexAttrib3fvNV;
#define glVertexAttrib3fvNV mz_glad_glVertexAttrib3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC mz_glad_glVertexAttrib3s;
#define glVertexAttrib3s mz_glad_glVertexAttrib3s
GLAD_API_CALL PFNGLVERTEXATTRIB3SARBPROC mz_glad_glVertexAttrib3sARB;
#define glVertexAttrib3sARB mz_glad_glVertexAttrib3sARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SNVPROC mz_glad_glVertexAttrib3sNV;
#define glVertexAttrib3sNV mz_glad_glVertexAttrib3sNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC mz_glad_glVertexAttrib3sv;
#define glVertexAttrib3sv mz_glad_glVertexAttrib3sv
GLAD_API_CALL PFNGLVERTEXATTRIB3SVARBPROC mz_glad_glVertexAttrib3svARB;
#define glVertexAttrib3svARB mz_glad_glVertexAttrib3svARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SVNVPROC mz_glad_glVertexAttrib3svNV;
#define glVertexAttrib3svNV mz_glad_glVertexAttrib3svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC mz_glad_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv mz_glad_glVertexAttrib4Nbv
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVARBPROC mz_glad_glVertexAttrib4NbvARB;
#define glVertexAttrib4NbvARB mz_glad_glVertexAttrib4NbvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC mz_glad_glVertexAttrib4Niv;
#define glVertexAttrib4Niv mz_glad_glVertexAttrib4Niv
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVARBPROC mz_glad_glVertexAttrib4NivARB;
#define glVertexAttrib4NivARB mz_glad_glVertexAttrib4NivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC mz_glad_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv mz_glad_glVertexAttrib4Nsv
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVARBPROC mz_glad_glVertexAttrib4NsvARB;
#define glVertexAttrib4NsvARB mz_glad_glVertexAttrib4NsvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC mz_glad_glVertexAttrib4Nub;
#define glVertexAttrib4Nub mz_glad_glVertexAttrib4Nub
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBARBPROC mz_glad_glVertexAttrib4NubARB;
#define glVertexAttrib4NubARB mz_glad_glVertexAttrib4NubARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC mz_glad_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv mz_glad_glVertexAttrib4Nubv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVARBPROC mz_glad_glVertexAttrib4NubvARB;
#define glVertexAttrib4NubvARB mz_glad_glVertexAttrib4NubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC mz_glad_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv mz_glad_glVertexAttrib4Nuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVARBPROC mz_glad_glVertexAttrib4NuivARB;
#define glVertexAttrib4NuivARB mz_glad_glVertexAttrib4NuivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC mz_glad_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv mz_glad_glVertexAttrib4Nusv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVARBPROC mz_glad_glVertexAttrib4NusvARB;
#define glVertexAttrib4NusvARB mz_glad_glVertexAttrib4NusvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC mz_glad_glVertexAttrib4bv;
#define glVertexAttrib4bv mz_glad_glVertexAttrib4bv
GLAD_API_CALL PFNGLVERTEXATTRIB4BVARBPROC mz_glad_glVertexAttrib4bvARB;
#define glVertexAttrib4bvARB mz_glad_glVertexAttrib4bvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC mz_glad_glVertexAttrib4d;
#define glVertexAttrib4d mz_glad_glVertexAttrib4d
GLAD_API_CALL PFNGLVERTEXATTRIB4DARBPROC mz_glad_glVertexAttrib4dARB;
#define glVertexAttrib4dARB mz_glad_glVertexAttrib4dARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DNVPROC mz_glad_glVertexAttrib4dNV;
#define glVertexAttrib4dNV mz_glad_glVertexAttrib4dNV
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC mz_glad_glVertexAttrib4dv;
#define glVertexAttrib4dv mz_glad_glVertexAttrib4dv
GLAD_API_CALL PFNGLVERTEXATTRIB4DVARBPROC mz_glad_glVertexAttrib4dvARB;
#define glVertexAttrib4dvARB mz_glad_glVertexAttrib4dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DVNVPROC mz_glad_glVertexAttrib4dvNV;
#define glVertexAttrib4dvNV mz_glad_glVertexAttrib4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC mz_glad_glVertexAttrib4f;
#define glVertexAttrib4f mz_glad_glVertexAttrib4f
GLAD_API_CALL PFNGLVERTEXATTRIB4FARBPROC mz_glad_glVertexAttrib4fARB;
#define glVertexAttrib4fARB mz_glad_glVertexAttrib4fARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FNVPROC mz_glad_glVertexAttrib4fNV;
#define glVertexAttrib4fNV mz_glad_glVertexAttrib4fNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC mz_glad_glVertexAttrib4fv;
#define glVertexAttrib4fv mz_glad_glVertexAttrib4fv
GLAD_API_CALL PFNGLVERTEXATTRIB4FVARBPROC mz_glad_glVertexAttrib4fvARB;
#define glVertexAttrib4fvARB mz_glad_glVertexAttrib4fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FVNVPROC mz_glad_glVertexAttrib4fvNV;
#define glVertexAttrib4fvNV mz_glad_glVertexAttrib4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC mz_glad_glVertexAttrib4iv;
#define glVertexAttrib4iv mz_glad_glVertexAttrib4iv
GLAD_API_CALL PFNGLVERTEXATTRIB4IVARBPROC mz_glad_glVertexAttrib4ivARB;
#define glVertexAttrib4ivARB mz_glad_glVertexAttrib4ivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC mz_glad_glVertexAttrib4s;
#define glVertexAttrib4s mz_glad_glVertexAttrib4s
GLAD_API_CALL PFNGLVERTEXATTRIB4SARBPROC mz_glad_glVertexAttrib4sARB;
#define glVertexAttrib4sARB mz_glad_glVertexAttrib4sARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SNVPROC mz_glad_glVertexAttrib4sNV;
#define glVertexAttrib4sNV mz_glad_glVertexAttrib4sNV
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC mz_glad_glVertexAttrib4sv;
#define glVertexAttrib4sv mz_glad_glVertexAttrib4sv
GLAD_API_CALL PFNGLVERTEXATTRIB4SVARBPROC mz_glad_glVertexAttrib4svARB;
#define glVertexAttrib4svARB mz_glad_glVertexAttrib4svARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SVNVPROC mz_glad_glVertexAttrib4svNV;
#define glVertexAttrib4svNV mz_glad_glVertexAttrib4svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBNVPROC mz_glad_glVertexAttrib4ubNV;
#define glVertexAttrib4ubNV mz_glad_glVertexAttrib4ubNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC mz_glad_glVertexAttrib4ubv;
#define glVertexAttrib4ubv mz_glad_glVertexAttrib4ubv
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVARBPROC mz_glad_glVertexAttrib4ubvARB;
#define glVertexAttrib4ubvARB mz_glad_glVertexAttrib4ubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVNVPROC mz_glad_glVertexAttrib4ubvNV;
#define glVertexAttrib4ubvNV mz_glad_glVertexAttrib4ubvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC mz_glad_glVertexAttrib4uiv;
#define glVertexAttrib4uiv mz_glad_glVertexAttrib4uiv
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVARBPROC mz_glad_glVertexAttrib4uivARB;
#define glVertexAttrib4uivARB mz_glad_glVertexAttrib4uivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC mz_glad_glVertexAttrib4usv;
#define glVertexAttrib4usv mz_glad_glVertexAttrib4usv
GLAD_API_CALL PFNGLVERTEXATTRIB4USVARBPROC mz_glad_glVertexAttrib4usvARB;
#define glVertexAttrib4usvARB mz_glad_glVertexAttrib4usvARB
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC mz_glad_glVertexAttribPointer;
#define glVertexAttribPointer mz_glad_glVertexAttribPointer
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERARBPROC mz_glad_glVertexAttribPointerARB;
#define glVertexAttribPointerARB mz_glad_glVertexAttribPointerARB
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERNVPROC mz_glad_glVertexAttribPointerNV;
#define glVertexAttribPointerNV mz_glad_glVertexAttribPointerNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1DVNVPROC mz_glad_glVertexAttribs1dvNV;
#define glVertexAttribs1dvNV mz_glad_glVertexAttribs1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1FVNVPROC mz_glad_glVertexAttribs1fvNV;
#define glVertexAttribs1fvNV mz_glad_glVertexAttribs1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1SVNVPROC mz_glad_glVertexAttribs1svNV;
#define glVertexAttribs1svNV mz_glad_glVertexAttribs1svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2DVNVPROC mz_glad_glVertexAttribs2dvNV;
#define glVertexAttribs2dvNV mz_glad_glVertexAttribs2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2FVNVPROC mz_glad_glVertexAttribs2fvNV;
#define glVertexAttribs2fvNV mz_glad_glVertexAttribs2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2SVNVPROC mz_glad_glVertexAttribs2svNV;
#define glVertexAttribs2svNV mz_glad_glVertexAttribs2svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3DVNVPROC mz_glad_glVertexAttribs3dvNV;
#define glVertexAttribs3dvNV mz_glad_glVertexAttribs3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3FVNVPROC mz_glad_glVertexAttribs3fvNV;
#define glVertexAttribs3fvNV mz_glad_glVertexAttribs3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3SVNVPROC mz_glad_glVertexAttribs3svNV;
#define glVertexAttribs3svNV mz_glad_glVertexAttribs3svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4DVNVPROC mz_glad_glVertexAttribs4dvNV;
#define glVertexAttribs4dvNV mz_glad_glVertexAttribs4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4FVNVPROC mz_glad_glVertexAttribs4fvNV;
#define glVertexAttribs4fvNV mz_glad_glVertexAttribs4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4SVNVPROC mz_glad_glVertexAttribs4svNV;
#define glVertexAttribs4svNV mz_glad_glVertexAttribs4svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4UBVNVPROC mz_glad_glVertexAttribs4ubvNV;
#define glVertexAttribs4ubvNV mz_glad_glVertexAttribs4ubvNV
GLAD_API_CALL PFNGLVERTEXPOINTERPROC mz_glad_glVertexPointer;
#define glVertexPointer mz_glad_glVertexPointer
GLAD_API_CALL PFNGLVERTEXPOINTEREXTPROC mz_glad_glVertexPointerEXT;
#define glVertexPointerEXT mz_glad_glVertexPointerEXT
GLAD_API_CALL PFNGLVIEWPORTPROC mz_glad_glViewport;
#define glViewport mz_glad_glViewport
GLAD_API_CALL PFNGLALPHAFUNCXPROC mz_glad_glAlphaFuncx;
#define glAlphaFuncx mz_glad_glAlphaFuncx
GLAD_API_CALL PFNGLBINDFRAMEBUFFEROESPROC mz_glad_glBindFramebufferOES;
#define glBindFramebufferOES mz_glad_glBindFramebufferOES
GLAD_API_CALL PFNGLBINDRENDERBUFFEROESPROC mz_glad_glBindRenderbufferOES;
#define glBindRenderbufferOES mz_glad_glBindRenderbufferOES
GLAD_API_CALL PFNGLBLENDEQUATIONOESPROC mz_glad_glBlendEquationOES;
#define glBlendEquationOES mz_glad_glBlendEquationOES
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEOESPROC mz_glad_glBlendEquationSeparateOES;
#define glBlendEquationSeparateOES mz_glad_glBlendEquationSeparateOES
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEOESPROC mz_glad_glBlendFuncSeparateOES;
#define glBlendFuncSeparateOES mz_glad_glBlendFuncSeparateOES
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSOESPROC mz_glad_glCheckFramebufferStatusOES;
#define glCheckFramebufferStatusOES mz_glad_glCheckFramebufferStatusOES
GLAD_API_CALL PFNGLCLEARCOLORXPROC mz_glad_glClearColorx;
#define glClearColorx mz_glad_glClearColorx
GLAD_API_CALL PFNGLCLEARDEPTHFPROC mz_glad_glClearDepthf;
#define glClearDepthf mz_glad_glClearDepthf
GLAD_API_CALL PFNGLCLEARDEPTHFOESPROC mz_glad_glClearDepthfOES;
#define glClearDepthfOES mz_glad_glClearDepthfOES
GLAD_API_CALL PFNGLCLEARDEPTHXPROC mz_glad_glClearDepthx;
#define glClearDepthx mz_glad_glClearDepthx
GLAD_API_CALL PFNGLCLIPPLANEFPROC mz_glad_glClipPlanef;
#define glClipPlanef mz_glad_glClipPlanef
GLAD_API_CALL PFNGLCLIPPLANEFOESPROC mz_glad_glClipPlanefOES;
#define glClipPlanefOES mz_glad_glClipPlanefOES
GLAD_API_CALL PFNGLCLIPPLANEXPROC mz_glad_glClipPlanex;
#define glClipPlanex mz_glad_glClipPlanex
GLAD_API_CALL PFNGLCOLOR4XPROC mz_glad_glColor4x;
#define glColor4x mz_glad_glColor4x
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC mz_glad_glCompressedTexImage2D;
#define glCompressedTexImage2D mz_glad_glCompressedTexImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC mz_glad_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D mz_glad_glCompressedTexSubImage2D
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSOESPROC mz_glad_glDeleteFramebuffersOES;
#define glDeleteFramebuffersOES mz_glad_glDeleteFramebuffersOES
GLAD_API_CALL PFNGLDELETERENDERBUFFERSOESPROC mz_glad_glDeleteRenderbuffersOES;
#define glDeleteRenderbuffersOES mz_glad_glDeleteRenderbuffersOES
GLAD_API_CALL PFNGLDEPTHRANGEFPROC mz_glad_glDepthRangef;
#define glDepthRangef mz_glad_glDepthRangef
GLAD_API_CALL PFNGLDEPTHRANGEFOESPROC mz_glad_glDepthRangefOES;
#define glDepthRangefOES mz_glad_glDepthRangefOES
GLAD_API_CALL PFNGLDEPTHRANGEXPROC mz_glad_glDepthRangex;
#define glDepthRangex mz_glad_glDepthRangex
GLAD_API_CALL PFNGLFOGXPROC mz_glad_glFogx;
#define glFogx mz_glad_glFogx
GLAD_API_CALL PFNGLFOGXVPROC mz_glad_glFogxv;
#define glFogxv mz_glad_glFogxv
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFEROESPROC mz_glad_glFramebufferRenderbufferOES;
#define glFramebufferRenderbufferOES mz_glad_glFramebufferRenderbufferOES
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DOESPROC mz_glad_glFramebufferTexture2DOES;
#define glFramebufferTexture2DOES mz_glad_glFramebufferTexture2DOES
GLAD_API_CALL PFNGLFRUSTUMFPROC mz_glad_glFrustumf;
#define glFrustumf mz_glad_glFrustumf
GLAD_API_CALL PFNGLFRUSTUMFOESPROC mz_glad_glFrustumfOES;
#define glFrustumfOES mz_glad_glFrustumfOES
GLAD_API_CALL PFNGLFRUSTUMXPROC mz_glad_glFrustumx;
#define glFrustumx mz_glad_glFrustumx
GLAD_API_CALL PFNGLGENFRAMEBUFFERSOESPROC mz_glad_glGenFramebuffersOES;
#define glGenFramebuffersOES mz_glad_glGenFramebuffersOES
GLAD_API_CALL PFNGLGENRENDERBUFFERSOESPROC mz_glad_glGenRenderbuffersOES;
#define glGenRenderbuffersOES mz_glad_glGenRenderbuffersOES
GLAD_API_CALL PFNGLGENERATEMIPMAPOESPROC mz_glad_glGenerateMipmapOES;
#define glGenerateMipmapOES mz_glad_glGenerateMipmapOES
GLAD_API_CALL PFNGLGETCLIPPLANEFPROC mz_glad_glGetClipPlanef;
#define glGetClipPlanef mz_glad_glGetClipPlanef
GLAD_API_CALL PFNGLGETCLIPPLANEFOESPROC mz_glad_glGetClipPlanefOES;
#define glGetClipPlanefOES mz_glad_glGetClipPlanefOES
GLAD_API_CALL PFNGLGETCLIPPLANEXPROC mz_glad_glGetClipPlanex;
#define glGetClipPlanex mz_glad_glGetClipPlanex
GLAD_API_CALL PFNGLGETFIXEDVPROC mz_glad_glGetFixedv;
#define glGetFixedv mz_glad_glGetFixedv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC mz_glad_glGetFramebufferAttachmentParameterivOES;
#define glGetFramebufferAttachmentParameterivOES mz_glad_glGetFramebufferAttachmentParameterivOES
GLAD_API_CALL PFNGLGETLIGHTXVPROC mz_glad_glGetLightxv;
#define glGetLightxv mz_glad_glGetLightxv
GLAD_API_CALL PFNGLGETMATERIALXVPROC mz_glad_glGetMaterialxv;
#define glGetMaterialxv mz_glad_glGetMaterialxv
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVOESPROC mz_glad_glGetRenderbufferParameterivOES;
#define glGetRenderbufferParameterivOES mz_glad_glGetRenderbufferParameterivOES
GLAD_API_CALL PFNGLGETTEXENVXVPROC mz_glad_glGetTexEnvxv;
#define glGetTexEnvxv mz_glad_glGetTexEnvxv
GLAD_API_CALL PFNGLGETTEXPARAMETERXVPROC mz_glad_glGetTexParameterxv;
#define glGetTexParameterxv mz_glad_glGetTexParameterxv
GLAD_API_CALL PFNGLISFRAMEBUFFEROESPROC mz_glad_glIsFramebufferOES;
#define glIsFramebufferOES mz_glad_glIsFramebufferOES
GLAD_API_CALL PFNGLISRENDERBUFFEROESPROC mz_glad_glIsRenderbufferOES;
#define glIsRenderbufferOES mz_glad_glIsRenderbufferOES
GLAD_API_CALL PFNGLLIGHTMODELXPROC mz_glad_glLightModelx;
#define glLightModelx mz_glad_glLightModelx
GLAD_API_CALL PFNGLLIGHTMODELXVPROC mz_glad_glLightModelxv;
#define glLightModelxv mz_glad_glLightModelxv
GLAD_API_CALL PFNGLLIGHTXPROC mz_glad_glLightx;
#define glLightx mz_glad_glLightx
GLAD_API_CALL PFNGLLIGHTXVPROC mz_glad_glLightxv;
#define glLightxv mz_glad_glLightxv
GLAD_API_CALL PFNGLLINEWIDTHXPROC mz_glad_glLineWidthx;
#define glLineWidthx mz_glad_glLineWidthx
GLAD_API_CALL PFNGLLOADMATRIXXPROC mz_glad_glLoadMatrixx;
#define glLoadMatrixx mz_glad_glLoadMatrixx
GLAD_API_CALL PFNGLMATERIALXPROC mz_glad_glMaterialx;
#define glMaterialx mz_glad_glMaterialx
GLAD_API_CALL PFNGLMATERIALXVPROC mz_glad_glMaterialxv;
#define glMaterialxv mz_glad_glMaterialxv
GLAD_API_CALL PFNGLMULTMATRIXXPROC mz_glad_glMultMatrixx;
#define glMultMatrixx mz_glad_glMultMatrixx
GLAD_API_CALL PFNGLMULTITEXCOORD4XPROC mz_glad_glMultiTexCoord4x;
#define glMultiTexCoord4x mz_glad_glMultiTexCoord4x
GLAD_API_CALL PFNGLNORMAL3XPROC mz_glad_glNormal3x;
#define glNormal3x mz_glad_glNormal3x
GLAD_API_CALL PFNGLORTHOFPROC mz_glad_glOrthof;
#define glOrthof mz_glad_glOrthof
GLAD_API_CALL PFNGLORTHOFOESPROC mz_glad_glOrthofOES;
#define glOrthofOES mz_glad_glOrthofOES
GLAD_API_CALL PFNGLORTHOXPROC mz_glad_glOrthox;
#define glOrthox mz_glad_glOrthox
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC mz_glad_glPointParameterf;
#define glPointParameterf mz_glad_glPointParameterf
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC mz_glad_glPointParameterfv;
#define glPointParameterfv mz_glad_glPointParameterfv
GLAD_API_CALL PFNGLPOINTPARAMETERXPROC mz_glad_glPointParameterx;
#define glPointParameterx mz_glad_glPointParameterx
GLAD_API_CALL PFNGLPOINTPARAMETERXVPROC mz_glad_glPointParameterxv;
#define glPointParameterxv mz_glad_glPointParameterxv
GLAD_API_CALL PFNGLPOINTSIZEXPROC mz_glad_glPointSizex;
#define glPointSizex mz_glad_glPointSizex
GLAD_API_CALL PFNGLPOLYGONOFFSETXPROC mz_glad_glPolygonOffsetx;
#define glPolygonOffsetx mz_glad_glPolygonOffsetx
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEOESPROC mz_glad_glRenderbufferStorageOES;
#define glRenderbufferStorageOES mz_glad_glRenderbufferStorageOES
GLAD_API_CALL PFNGLROTATEXPROC mz_glad_glRotatex;
#define glRotatex mz_glad_glRotatex
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC mz_glad_glSampleCoverage;
#define glSampleCoverage mz_glad_glSampleCoverage
GLAD_API_CALL PFNGLSAMPLECOVERAGEXPROC mz_glad_glSampleCoveragex;
#define glSampleCoveragex mz_glad_glSampleCoveragex
GLAD_API_CALL PFNGLSCALEXPROC mz_glad_glScalex;
#define glScalex mz_glad_glScalex
GLAD_API_CALL PFNGLTEXENVXPROC mz_glad_glTexEnvx;
#define glTexEnvx mz_glad_glTexEnvx
GLAD_API_CALL PFNGLTEXENVXVPROC mz_glad_glTexEnvxv;
#define glTexEnvxv mz_glad_glTexEnvxv
GLAD_API_CALL PFNGLTEXPARAMETERXPROC mz_glad_glTexParameterx;
#define glTexParameterx mz_glad_glTexParameterx
GLAD_API_CALL PFNGLTEXPARAMETERXVPROC mz_glad_glTexParameterxv;
#define glTexParameterxv mz_glad_glTexParameterxv
GLAD_API_CALL PFNGLTRANSLATEXPROC mz_glad_glTranslatex;
#define glTranslatex mz_glad_glTranslatex





#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef MAZE_GLAD_GL_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */


int MAZE_GLAD_GL_VERSION_1_0 = 0;
int MAZE_GLAD_GL_VERSION_1_1 = 0;
int MAZE_GLAD_GL_VERSION_ES_CM_1_0 = 0;
int MAZE_GLAD_GL_ARB_copy_buffer = 0;
int MAZE_GLAD_GL_ARB_fragment_shader = 0;
int MAZE_GLAD_GL_ARB_framebuffer_object = 0;
int MAZE_GLAD_GL_ARB_geometry_shader4 = 0;
int MAZE_GLAD_GL_ARB_get_program_binary = 0;
int MAZE_GLAD_GL_ARB_imaging = 0;
int MAZE_GLAD_GL_ARB_multitexture = 0;
int MAZE_GLAD_GL_ARB_separate_shader_objects = 0;
int MAZE_GLAD_GL_ARB_shader_objects = 0;
int MAZE_GLAD_GL_ARB_shading_language_100 = 0;
int MAZE_GLAD_GL_ARB_texture_non_power_of_two = 0;
int MAZE_GLAD_GL_ARB_vertex_buffer_object = 0;
int MAZE_GLAD_GL_ARB_vertex_program = 0;
int MAZE_GLAD_GL_ARB_vertex_shader = 0;
int MAZE_GLAD_GL_EXT_blend_equation_separate = 0;
int MAZE_GLAD_GL_EXT_blend_func_separate = 0;
int MAZE_GLAD_GL_EXT_blend_minmax = 0;
int MAZE_GLAD_GL_EXT_blend_subtract = 0;
int MAZE_GLAD_GL_EXT_copy_texture = 0;
int MAZE_GLAD_GL_EXT_framebuffer_blit = 0;
int MAZE_GLAD_GL_EXT_framebuffer_multisample = 0;
int MAZE_GLAD_GL_EXT_framebuffer_object = 0;
int MAZE_GLAD_GL_EXT_geometry_shader4 = 0;
int MAZE_GLAD_GL_EXT_packed_depth_stencil = 0;
int MAZE_GLAD_GL_EXT_subtexture = 0;
int MAZE_GLAD_GL_EXT_texture_array = 0;
int MAZE_GLAD_GL_EXT_texture_object = 0;
int MAZE_GLAD_GL_EXT_texture_sRGB = 0;
int MAZE_GLAD_GL_EXT_vertex_array = 0;
int MAZE_GLAD_GL_INGR_blend_func_separate = 0;
int MAZE_GLAD_GL_KHR_debug = 0;
int MAZE_GLAD_GL_NV_geometry_program4 = 0;
int MAZE_GLAD_GL_NV_vertex_program = 0;
int MAZE_GLAD_GL_SGIS_texture_edge_clamp = 0;
int MAZE_GLAD_GL_EXT_sRGB = 0;
int MAZE_GLAD_GL_OES_blend_equation_separate = 0;
int MAZE_GLAD_GL_OES_blend_func_separate = 0;
int MAZE_GLAD_GL_OES_blend_subtract = 0;
int MAZE_GLAD_GL_OES_depth24 = 0;
int MAZE_GLAD_GL_OES_depth32 = 0;
int MAZE_GLAD_GL_OES_framebuffer_object = 0;
int MAZE_GLAD_GL_OES_packed_depth_stencil = 0;
int MAZE_GLAD_GL_OES_single_precision = 0;
int MAZE_GLAD_GL_OES_texture_npot = 0;



PFNGLACCUMPROC mz_glad_glAccum = NULL;
PFNGLACTIVESHADERPROGRAMPROC mz_glad_glActiveShaderProgram = NULL;
PFNGLACTIVETEXTUREPROC mz_glad_glActiveTexture = NULL;
PFNGLACTIVETEXTUREARBPROC mz_glad_glActiveTextureARB = NULL;
PFNGLALPHAFUNCPROC mz_glad_glAlphaFunc = NULL;
PFNGLAREPROGRAMSRESIDENTNVPROC mz_glad_glAreProgramsResidentNV = NULL;
PFNGLARETEXTURESRESIDENTPROC mz_glad_glAreTexturesResident = NULL;
PFNGLARETEXTURESRESIDENTEXTPROC mz_glad_glAreTexturesResidentEXT = NULL;
PFNGLARRAYELEMENTPROC mz_glad_glArrayElement = NULL;
PFNGLARRAYELEMENTEXTPROC mz_glad_glArrayElementEXT = NULL;
PFNGLATTACHOBJECTARBPROC mz_glad_glAttachObjectARB = NULL;
PFNGLATTACHSHADERPROC mz_glad_glAttachShader = NULL;
PFNGLBEGINPROC mz_glad_glBegin = NULL;
PFNGLBINDATTRIBLOCATIONPROC mz_glad_glBindAttribLocation = NULL;
PFNGLBINDATTRIBLOCATIONARBPROC mz_glad_glBindAttribLocationARB = NULL;
PFNGLBINDBUFFERPROC mz_glad_glBindBuffer = NULL;
PFNGLBINDBUFFERARBPROC mz_glad_glBindBufferARB = NULL;
PFNGLBINDFRAMEBUFFERPROC mz_glad_glBindFramebuffer = NULL;
PFNGLBINDFRAMEBUFFEREXTPROC mz_glad_glBindFramebufferEXT = NULL;
PFNGLBINDPROGRAMARBPROC mz_glad_glBindProgramARB = NULL;
PFNGLBINDPROGRAMNVPROC mz_glad_glBindProgramNV = NULL;
PFNGLBINDPROGRAMPIPELINEPROC mz_glad_glBindProgramPipeline = NULL;
PFNGLBINDRENDERBUFFERPROC mz_glad_glBindRenderbuffer = NULL;
PFNGLBINDRENDERBUFFEREXTPROC mz_glad_glBindRenderbufferEXT = NULL;
PFNGLBINDTEXTUREPROC mz_glad_glBindTexture = NULL;
PFNGLBINDTEXTUREEXTPROC mz_glad_glBindTextureEXT = NULL;
PFNGLBITMAPPROC mz_glad_glBitmap = NULL;
PFNGLBLENDCOLORPROC mz_glad_glBlendColor = NULL;
PFNGLBLENDEQUATIONPROC mz_glad_glBlendEquation = NULL;
PFNGLBLENDEQUATIONEXTPROC mz_glad_glBlendEquationEXT = NULL;
PFNGLBLENDEQUATIONSEPARATEPROC mz_glad_glBlendEquationSeparate = NULL;
PFNGLBLENDEQUATIONSEPARATEEXTPROC mz_glad_glBlendEquationSeparateEXT = NULL;
PFNGLBLENDFUNCPROC mz_glad_glBlendFunc = NULL;
PFNGLBLENDFUNCSEPARATEPROC mz_glad_glBlendFuncSeparate = NULL;
PFNGLBLENDFUNCSEPARATEEXTPROC mz_glad_glBlendFuncSeparateEXT = NULL;
PFNGLBLENDFUNCSEPARATEINGRPROC mz_glad_glBlendFuncSeparateINGR = NULL;
PFNGLBLITFRAMEBUFFERPROC mz_glad_glBlitFramebuffer = NULL;
PFNGLBLITFRAMEBUFFEREXTPROC mz_glad_glBlitFramebufferEXT = NULL;
PFNGLBUFFERDATAPROC mz_glad_glBufferData = NULL;
PFNGLBUFFERDATAARBPROC mz_glad_glBufferDataARB = NULL;
PFNGLBUFFERSUBDATAPROC mz_glad_glBufferSubData = NULL;
PFNGLBUFFERSUBDATAARBPROC mz_glad_glBufferSubDataARB = NULL;
PFNGLCALLLISTPROC mz_glad_glCallList = NULL;
PFNGLCALLLISTSPROC mz_glad_glCallLists = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSPROC mz_glad_glCheckFramebufferStatus = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC mz_glad_glCheckFramebufferStatusEXT = NULL;
PFNGLCLEARPROC mz_glad_glClear = NULL;
PFNGLCLEARACCUMPROC mz_glad_glClearAccum = NULL;
PFNGLCLEARCOLORPROC mz_glad_glClearColor = NULL;
PFNGLCLEARDEPTHPROC mz_glad_glClearDepth = NULL;
PFNGLCLEARINDEXPROC mz_glad_glClearIndex = NULL;
PFNGLCLEARSTENCILPROC mz_glad_glClearStencil = NULL;
PFNGLCLIENTACTIVETEXTUREPROC mz_glad_glClientActiveTexture = NULL;
PFNGLCLIENTACTIVETEXTUREARBPROC mz_glad_glClientActiveTextureARB = NULL;
PFNGLCLIPPLANEPROC mz_glad_glClipPlane = NULL;
PFNGLCOLOR3BPROC mz_glad_glColor3b = NULL;
PFNGLCOLOR3BVPROC mz_glad_glColor3bv = NULL;
PFNGLCOLOR3DPROC mz_glad_glColor3d = NULL;
PFNGLCOLOR3DVPROC mz_glad_glColor3dv = NULL;
PFNGLCOLOR3FPROC mz_glad_glColor3f = NULL;
PFNGLCOLOR3FVPROC mz_glad_glColor3fv = NULL;
PFNGLCOLOR3IPROC mz_glad_glColor3i = NULL;
PFNGLCOLOR3IVPROC mz_glad_glColor3iv = NULL;
PFNGLCOLOR3SPROC mz_glad_glColor3s = NULL;
PFNGLCOLOR3SVPROC mz_glad_glColor3sv = NULL;
PFNGLCOLOR3UBPROC mz_glad_glColor3ub = NULL;
PFNGLCOLOR3UBVPROC mz_glad_glColor3ubv = NULL;
PFNGLCOLOR3UIPROC mz_glad_glColor3ui = NULL;
PFNGLCOLOR3UIVPROC mz_glad_glColor3uiv = NULL;
PFNGLCOLOR3USPROC mz_glad_glColor3us = NULL;
PFNGLCOLOR3USVPROC mz_glad_glColor3usv = NULL;
PFNGLCOLOR4BPROC mz_glad_glColor4b = NULL;
PFNGLCOLOR4BVPROC mz_glad_glColor4bv = NULL;
PFNGLCOLOR4DPROC mz_glad_glColor4d = NULL;
PFNGLCOLOR4DVPROC mz_glad_glColor4dv = NULL;
PFNGLCOLOR4FPROC mz_glad_glColor4f = NULL;
PFNGLCOLOR4FVPROC mz_glad_glColor4fv = NULL;
PFNGLCOLOR4IPROC mz_glad_glColor4i = NULL;
PFNGLCOLOR4IVPROC mz_glad_glColor4iv = NULL;
PFNGLCOLOR4SPROC mz_glad_glColor4s = NULL;
PFNGLCOLOR4SVPROC mz_glad_glColor4sv = NULL;
PFNGLCOLOR4UBPROC mz_glad_glColor4ub = NULL;
PFNGLCOLOR4UBVPROC mz_glad_glColor4ubv = NULL;
PFNGLCOLOR4UIPROC mz_glad_glColor4ui = NULL;
PFNGLCOLOR4UIVPROC mz_glad_glColor4uiv = NULL;
PFNGLCOLOR4USPROC mz_glad_glColor4us = NULL;
PFNGLCOLOR4USVPROC mz_glad_glColor4usv = NULL;
PFNGLCOLORMASKPROC mz_glad_glColorMask = NULL;
PFNGLCOLORMATERIALPROC mz_glad_glColorMaterial = NULL;
PFNGLCOLORPOINTERPROC mz_glad_glColorPointer = NULL;
PFNGLCOLORPOINTEREXTPROC mz_glad_glColorPointerEXT = NULL;
PFNGLCOLORSUBTABLEPROC mz_glad_glColorSubTable = NULL;
PFNGLCOLORTABLEPROC mz_glad_glColorTable = NULL;
PFNGLCOLORTABLEPARAMETERFVPROC mz_glad_glColorTableParameterfv = NULL;
PFNGLCOLORTABLEPARAMETERIVPROC mz_glad_glColorTableParameteriv = NULL;
PFNGLCOMPILESHADERPROC mz_glad_glCompileShader = NULL;
PFNGLCOMPILESHADERARBPROC mz_glad_glCompileShaderARB = NULL;
PFNGLCONVOLUTIONFILTER1DPROC mz_glad_glConvolutionFilter1D = NULL;
PFNGLCONVOLUTIONFILTER2DPROC mz_glad_glConvolutionFilter2D = NULL;
PFNGLCONVOLUTIONPARAMETERFPROC mz_glad_glConvolutionParameterf = NULL;
PFNGLCONVOLUTIONPARAMETERFVPROC mz_glad_glConvolutionParameterfv = NULL;
PFNGLCONVOLUTIONPARAMETERIPROC mz_glad_glConvolutionParameteri = NULL;
PFNGLCONVOLUTIONPARAMETERIVPROC mz_glad_glConvolutionParameteriv = NULL;
PFNGLCOPYBUFFERSUBDATAPROC mz_glad_glCopyBufferSubData = NULL;
PFNGLCOPYCOLORSUBTABLEPROC mz_glad_glCopyColorSubTable = NULL;
PFNGLCOPYCOLORTABLEPROC mz_glad_glCopyColorTable = NULL;
PFNGLCOPYCONVOLUTIONFILTER1DPROC mz_glad_glCopyConvolutionFilter1D = NULL;
PFNGLCOPYCONVOLUTIONFILTER2DPROC mz_glad_glCopyConvolutionFilter2D = NULL;
PFNGLCOPYPIXELSPROC mz_glad_glCopyPixels = NULL;
PFNGLCOPYTEXIMAGE1DPROC mz_glad_glCopyTexImage1D = NULL;
PFNGLCOPYTEXIMAGE1DEXTPROC mz_glad_glCopyTexImage1DEXT = NULL;
PFNGLCOPYTEXIMAGE2DPROC mz_glad_glCopyTexImage2D = NULL;
PFNGLCOPYTEXIMAGE2DEXTPROC mz_glad_glCopyTexImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE1DPROC mz_glad_glCopyTexSubImage1D = NULL;
PFNGLCOPYTEXSUBIMAGE1DEXTPROC mz_glad_glCopyTexSubImage1DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE2DPROC mz_glad_glCopyTexSubImage2D = NULL;
PFNGLCOPYTEXSUBIMAGE2DEXTPROC mz_glad_glCopyTexSubImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC mz_glad_glCopyTexSubImage3D = NULL;
PFNGLCOPYTEXSUBIMAGE3DEXTPROC mz_glad_glCopyTexSubImage3DEXT = NULL;
PFNGLCREATEPROGRAMPROC mz_glad_glCreateProgram = NULL;
PFNGLCREATEPROGRAMOBJECTARBPROC mz_glad_glCreateProgramObjectARB = NULL;
PFNGLCREATESHADERPROC mz_glad_glCreateShader = NULL;
PFNGLCREATESHADEROBJECTARBPROC mz_glad_glCreateShaderObjectARB = NULL;
PFNGLCREATESHADERPROGRAMVPROC mz_glad_glCreateShaderProgramv = NULL;
PFNGLCULLFACEPROC mz_glad_glCullFace = NULL;
PFNGLDEBUGMESSAGECALLBACKPROC mz_glad_glDebugMessageCallback = NULL;
PFNGLDEBUGMESSAGECONTROLPROC mz_glad_glDebugMessageControl = NULL;
PFNGLDEBUGMESSAGEINSERTPROC mz_glad_glDebugMessageInsert = NULL;
PFNGLDELETEBUFFERSPROC mz_glad_glDeleteBuffers = NULL;
PFNGLDELETEBUFFERSARBPROC mz_glad_glDeleteBuffersARB = NULL;
PFNGLDELETEFRAMEBUFFERSPROC mz_glad_glDeleteFramebuffers = NULL;
PFNGLDELETEFRAMEBUFFERSEXTPROC mz_glad_glDeleteFramebuffersEXT = NULL;
PFNGLDELETELISTSPROC mz_glad_glDeleteLists = NULL;
PFNGLDELETEOBJECTARBPROC mz_glad_glDeleteObjectARB = NULL;
PFNGLDELETEPROGRAMPIPELINESPROC mz_glad_glDeleteProgramPipelines = NULL;
PFNGLDELETEPROGRAMSARBPROC mz_glad_glDeleteProgramsARB = NULL;
PFNGLDELETEPROGRAMSNVPROC mz_glad_glDeleteProgramsNV = NULL;
PFNGLDELETERENDERBUFFERSPROC mz_glad_glDeleteRenderbuffers = NULL;
PFNGLDELETERENDERBUFFERSEXTPROC mz_glad_glDeleteRenderbuffersEXT = NULL;
PFNGLDELETETEXTURESPROC mz_glad_glDeleteTextures = NULL;
PFNGLDELETETEXTURESEXTPROC mz_glad_glDeleteTexturesEXT = NULL;
PFNGLDEPTHFUNCPROC mz_glad_glDepthFunc = NULL;
PFNGLDEPTHMASKPROC mz_glad_glDepthMask = NULL;
PFNGLDEPTHRANGEPROC mz_glad_glDepthRange = NULL;
PFNGLDETACHOBJECTARBPROC mz_glad_glDetachObjectARB = NULL;
PFNGLDETACHSHADERPROC mz_glad_glDetachShader = NULL;
PFNGLDISABLEPROC mz_glad_glDisable = NULL;
PFNGLDISABLECLIENTSTATEPROC mz_glad_glDisableClientState = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYPROC mz_glad_glDisableVertexAttribArray = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC mz_glad_glDisableVertexAttribArrayARB = NULL;
PFNGLDRAWARRAYSPROC mz_glad_glDrawArrays = NULL;
PFNGLDRAWARRAYSEXTPROC mz_glad_glDrawArraysEXT = NULL;
PFNGLDRAWBUFFERPROC mz_glad_glDrawBuffer = NULL;
PFNGLDRAWELEMENTSPROC mz_glad_glDrawElements = NULL;
PFNGLDRAWPIXELSPROC mz_glad_glDrawPixels = NULL;
PFNGLEDGEFLAGPROC mz_glad_glEdgeFlag = NULL;
PFNGLEDGEFLAGPOINTERPROC mz_glad_glEdgeFlagPointer = NULL;
PFNGLEDGEFLAGPOINTEREXTPROC mz_glad_glEdgeFlagPointerEXT = NULL;
PFNGLEDGEFLAGVPROC mz_glad_glEdgeFlagv = NULL;
PFNGLENABLEPROC mz_glad_glEnable = NULL;
PFNGLENABLECLIENTSTATEPROC mz_glad_glEnableClientState = NULL;
PFNGLENABLEVERTEXATTRIBARRAYPROC mz_glad_glEnableVertexAttribArray = NULL;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC mz_glad_glEnableVertexAttribArrayARB = NULL;
PFNGLENDPROC mz_glad_glEnd = NULL;
PFNGLENDLISTPROC mz_glad_glEndList = NULL;
PFNGLEVALCOORD1DPROC mz_glad_glEvalCoord1d = NULL;
PFNGLEVALCOORD1DVPROC mz_glad_glEvalCoord1dv = NULL;
PFNGLEVALCOORD1FPROC mz_glad_glEvalCoord1f = NULL;
PFNGLEVALCOORD1FVPROC mz_glad_glEvalCoord1fv = NULL;
PFNGLEVALCOORD2DPROC mz_glad_glEvalCoord2d = NULL;
PFNGLEVALCOORD2DVPROC mz_glad_glEvalCoord2dv = NULL;
PFNGLEVALCOORD2FPROC mz_glad_glEvalCoord2f = NULL;
PFNGLEVALCOORD2FVPROC mz_glad_glEvalCoord2fv = NULL;
PFNGLEVALMESH1PROC mz_glad_glEvalMesh1 = NULL;
PFNGLEVALMESH2PROC mz_glad_glEvalMesh2 = NULL;
PFNGLEVALPOINT1PROC mz_glad_glEvalPoint1 = NULL;
PFNGLEVALPOINT2PROC mz_glad_glEvalPoint2 = NULL;
PFNGLEXECUTEPROGRAMNVPROC mz_glad_glExecuteProgramNV = NULL;
PFNGLFEEDBACKBUFFERPROC mz_glad_glFeedbackBuffer = NULL;
PFNGLFINISHPROC mz_glad_glFinish = NULL;
PFNGLFLUSHPROC mz_glad_glFlush = NULL;
PFNGLFOGFPROC mz_glad_glFogf = NULL;
PFNGLFOGFVPROC mz_glad_glFogfv = NULL;
PFNGLFOGIPROC mz_glad_glFogi = NULL;
PFNGLFOGIVPROC mz_glad_glFogiv = NULL;
PFNGLFRAMEBUFFERRENDERBUFFERPROC mz_glad_glFramebufferRenderbuffer = NULL;
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC mz_glad_glFramebufferRenderbufferEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREPROC mz_glad_glFramebufferTexture = NULL;
PFNGLFRAMEBUFFERTEXTURE1DPROC mz_glad_glFramebufferTexture1D = NULL;
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC mz_glad_glFramebufferTexture1DEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE2DPROC mz_glad_glFramebufferTexture2D = NULL;
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC mz_glad_glFramebufferTexture2DEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE3DPROC mz_glad_glFramebufferTexture3D = NULL;
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC mz_glad_glFramebufferTexture3DEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREARBPROC mz_glad_glFramebufferTextureARB = NULL;
PFNGLFRAMEBUFFERTEXTUREEXTPROC mz_glad_glFramebufferTextureEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC mz_glad_glFramebufferTextureFaceARB = NULL;
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC mz_glad_glFramebufferTextureFaceEXT = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERPROC mz_glad_glFramebufferTextureLayer = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC mz_glad_glFramebufferTextureLayerARB = NULL;
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC mz_glad_glFramebufferTextureLayerEXT = NULL;
PFNGLFRONTFACEPROC mz_glad_glFrontFace = NULL;
PFNGLFRUSTUMPROC mz_glad_glFrustum = NULL;
PFNGLGENBUFFERSPROC mz_glad_glGenBuffers = NULL;
PFNGLGENBUFFERSARBPROC mz_glad_glGenBuffersARB = NULL;
PFNGLGENFRAMEBUFFERSPROC mz_glad_glGenFramebuffers = NULL;
PFNGLGENFRAMEBUFFERSEXTPROC mz_glad_glGenFramebuffersEXT = NULL;
PFNGLGENLISTSPROC mz_glad_glGenLists = NULL;
PFNGLGENPROGRAMPIPELINESPROC mz_glad_glGenProgramPipelines = NULL;
PFNGLGENPROGRAMSARBPROC mz_glad_glGenProgramsARB = NULL;
PFNGLGENPROGRAMSNVPROC mz_glad_glGenProgramsNV = NULL;
PFNGLGENRENDERBUFFERSPROC mz_glad_glGenRenderbuffers = NULL;
PFNGLGENRENDERBUFFERSEXTPROC mz_glad_glGenRenderbuffersEXT = NULL;
PFNGLGENTEXTURESPROC mz_glad_glGenTextures = NULL;
PFNGLGENTEXTURESEXTPROC mz_glad_glGenTexturesEXT = NULL;
PFNGLGENERATEMIPMAPPROC mz_glad_glGenerateMipmap = NULL;
PFNGLGENERATEMIPMAPEXTPROC mz_glad_glGenerateMipmapEXT = NULL;
PFNGLGETACTIVEATTRIBPROC mz_glad_glGetActiveAttrib = NULL;
PFNGLGETACTIVEATTRIBARBPROC mz_glad_glGetActiveAttribARB = NULL;
PFNGLGETACTIVEUNIFORMPROC mz_glad_glGetActiveUniform = NULL;
PFNGLGETACTIVEUNIFORMARBPROC mz_glad_glGetActiveUniformARB = NULL;
PFNGLGETATTACHEDOBJECTSARBPROC mz_glad_glGetAttachedObjectsARB = NULL;
PFNGLGETATTRIBLOCATIONPROC mz_glad_glGetAttribLocation = NULL;
PFNGLGETATTRIBLOCATIONARBPROC mz_glad_glGetAttribLocationARB = NULL;
PFNGLGETBOOLEANVPROC mz_glad_glGetBooleanv = NULL;
PFNGLGETBUFFERPARAMETERIVPROC mz_glad_glGetBufferParameteriv = NULL;
PFNGLGETBUFFERPARAMETERIVARBPROC mz_glad_glGetBufferParameterivARB = NULL;
PFNGLGETBUFFERPOINTERVPROC mz_glad_glGetBufferPointerv = NULL;
PFNGLGETBUFFERPOINTERVARBPROC mz_glad_glGetBufferPointervARB = NULL;
PFNGLGETBUFFERSUBDATAPROC mz_glad_glGetBufferSubData = NULL;
PFNGLGETBUFFERSUBDATAARBPROC mz_glad_glGetBufferSubDataARB = NULL;
PFNGLGETCLIPPLANEPROC mz_glad_glGetClipPlane = NULL;
PFNGLGETCOLORTABLEPROC mz_glad_glGetColorTable = NULL;
PFNGLGETCOLORTABLEPARAMETERFVPROC mz_glad_glGetColorTableParameterfv = NULL;
PFNGLGETCOLORTABLEPARAMETERIVPROC mz_glad_glGetColorTableParameteriv = NULL;
PFNGLGETCONVOLUTIONFILTERPROC mz_glad_glGetConvolutionFilter = NULL;
PFNGLGETCONVOLUTIONPARAMETERFVPROC mz_glad_glGetConvolutionParameterfv = NULL;
PFNGLGETCONVOLUTIONPARAMETERIVPROC mz_glad_glGetConvolutionParameteriv = NULL;
PFNGLGETDEBUGMESSAGELOGPROC mz_glad_glGetDebugMessageLog = NULL;
PFNGLGETDOUBLEVPROC mz_glad_glGetDoublev = NULL;
PFNGLGETERRORPROC mz_glad_glGetError = NULL;
PFNGLGETFLOATVPROC mz_glad_glGetFloatv = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC mz_glad_glGetFramebufferAttachmentParameteriv = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC mz_glad_glGetFramebufferAttachmentParameterivEXT = NULL;
PFNGLGETHANDLEARBPROC mz_glad_glGetHandleARB = NULL;
PFNGLGETHISTOGRAMPROC mz_glad_glGetHistogram = NULL;
PFNGLGETHISTOGRAMPARAMETERFVPROC mz_glad_glGetHistogramParameterfv = NULL;
PFNGLGETHISTOGRAMPARAMETERIVPROC mz_glad_glGetHistogramParameteriv = NULL;
PFNGLGETINFOLOGARBPROC mz_glad_glGetInfoLogARB = NULL;
PFNGLGETINTEGERVPROC mz_glad_glGetIntegerv = NULL;
PFNGLGETLIGHTFVPROC mz_glad_glGetLightfv = NULL;
PFNGLGETLIGHTIVPROC mz_glad_glGetLightiv = NULL;
PFNGLGETMAPDVPROC mz_glad_glGetMapdv = NULL;
PFNGLGETMAPFVPROC mz_glad_glGetMapfv = NULL;
PFNGLGETMAPIVPROC mz_glad_glGetMapiv = NULL;
PFNGLGETMATERIALFVPROC mz_glad_glGetMaterialfv = NULL;
PFNGLGETMATERIALIVPROC mz_glad_glGetMaterialiv = NULL;
PFNGLGETMINMAXPROC mz_glad_glGetMinmax = NULL;
PFNGLGETMINMAXPARAMETERFVPROC mz_glad_glGetMinmaxParameterfv = NULL;
PFNGLGETMINMAXPARAMETERIVPROC mz_glad_glGetMinmaxParameteriv = NULL;
PFNGLGETOBJECTLABELPROC mz_glad_glGetObjectLabel = NULL;
PFNGLGETOBJECTPARAMETERFVARBPROC mz_glad_glGetObjectParameterfvARB = NULL;
PFNGLGETOBJECTPARAMETERIVARBPROC mz_glad_glGetObjectParameterivARB = NULL;
PFNGLGETOBJECTPTRLABELPROC mz_glad_glGetObjectPtrLabel = NULL;
PFNGLGETPIXELMAPFVPROC mz_glad_glGetPixelMapfv = NULL;
PFNGLGETPIXELMAPUIVPROC mz_glad_glGetPixelMapuiv = NULL;
PFNGLGETPIXELMAPUSVPROC mz_glad_glGetPixelMapusv = NULL;
PFNGLGETPOINTERVPROC mz_glad_glGetPointerv = NULL;
PFNGLGETPOINTERVEXTPROC mz_glad_glGetPointervEXT = NULL;
PFNGLGETPOLYGONSTIPPLEPROC mz_glad_glGetPolygonStipple = NULL;
PFNGLGETPROGRAMBINARYPROC mz_glad_glGetProgramBinary = NULL;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC mz_glad_glGetProgramEnvParameterdvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC mz_glad_glGetProgramEnvParameterfvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC mz_glad_glGetProgramLocalParameterdvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC mz_glad_glGetProgramLocalParameterfvARB = NULL;
PFNGLGETPROGRAMPARAMETERDVNVPROC mz_glad_glGetProgramParameterdvNV = NULL;
PFNGLGETPROGRAMPARAMETERFVNVPROC mz_glad_glGetProgramParameterfvNV = NULL;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC mz_glad_glGetProgramPipelineInfoLog = NULL;
PFNGLGETPROGRAMPIPELINEIVPROC mz_glad_glGetProgramPipelineiv = NULL;
PFNGLGETPROGRAMSTRINGARBPROC mz_glad_glGetProgramStringARB = NULL;
PFNGLGETPROGRAMSTRINGNVPROC mz_glad_glGetProgramStringNV = NULL;
PFNGLGETPROGRAMIVARBPROC mz_glad_glGetProgramivARB = NULL;
PFNGLGETPROGRAMIVNVPROC mz_glad_glGetProgramivNV = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVPROC mz_glad_glGetRenderbufferParameteriv = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC mz_glad_glGetRenderbufferParameterivEXT = NULL;
PFNGLGETSEPARABLEFILTERPROC mz_glad_glGetSeparableFilter = NULL;
PFNGLGETSHADERSOURCEPROC mz_glad_glGetShaderSource = NULL;
PFNGLGETSHADERSOURCEARBPROC mz_glad_glGetShaderSourceARB = NULL;
PFNGLGETSTRINGPROC mz_glad_glGetString = NULL;
PFNGLGETTEXENVFVPROC mz_glad_glGetTexEnvfv = NULL;
PFNGLGETTEXENVIVPROC mz_glad_glGetTexEnviv = NULL;
PFNGLGETTEXGENDVPROC mz_glad_glGetTexGendv = NULL;
PFNGLGETTEXGENFVPROC mz_glad_glGetTexGenfv = NULL;
PFNGLGETTEXGENIVPROC mz_glad_glGetTexGeniv = NULL;
PFNGLGETTEXIMAGEPROC mz_glad_glGetTexImage = NULL;
PFNGLGETTEXLEVELPARAMETERFVPROC mz_glad_glGetTexLevelParameterfv = NULL;
PFNGLGETTEXLEVELPARAMETERIVPROC mz_glad_glGetTexLevelParameteriv = NULL;
PFNGLGETTEXPARAMETERFVPROC mz_glad_glGetTexParameterfv = NULL;
PFNGLGETTEXPARAMETERIVPROC mz_glad_glGetTexParameteriv = NULL;
PFNGLGETTRACKMATRIXIVNVPROC mz_glad_glGetTrackMatrixivNV = NULL;
PFNGLGETUNIFORMLOCATIONPROC mz_glad_glGetUniformLocation = NULL;
PFNGLGETUNIFORMLOCATIONARBPROC mz_glad_glGetUniformLocationARB = NULL;
PFNGLGETUNIFORMFVPROC mz_glad_glGetUniformfv = NULL;
PFNGLGETUNIFORMFVARBPROC mz_glad_glGetUniformfvARB = NULL;
PFNGLGETUNIFORMIVPROC mz_glad_glGetUniformiv = NULL;
PFNGLGETUNIFORMIVARBPROC mz_glad_glGetUniformivARB = NULL;
PFNGLGETVERTEXATTRIBPOINTERVPROC mz_glad_glGetVertexAttribPointerv = NULL;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC mz_glad_glGetVertexAttribPointervARB = NULL;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC mz_glad_glGetVertexAttribPointervNV = NULL;
PFNGLGETVERTEXATTRIBDVPROC mz_glad_glGetVertexAttribdv = NULL;
PFNGLGETVERTEXATTRIBDVARBPROC mz_glad_glGetVertexAttribdvARB = NULL;
PFNGLGETVERTEXATTRIBDVNVPROC mz_glad_glGetVertexAttribdvNV = NULL;
PFNGLGETVERTEXATTRIBFVPROC mz_glad_glGetVertexAttribfv = NULL;
PFNGLGETVERTEXATTRIBFVARBPROC mz_glad_glGetVertexAttribfvARB = NULL;
PFNGLGETVERTEXATTRIBFVNVPROC mz_glad_glGetVertexAttribfvNV = NULL;
PFNGLGETVERTEXATTRIBIVPROC mz_glad_glGetVertexAttribiv = NULL;
PFNGLGETVERTEXATTRIBIVARBPROC mz_glad_glGetVertexAttribivARB = NULL;
PFNGLGETVERTEXATTRIBIVNVPROC mz_glad_glGetVertexAttribivNV = NULL;
PFNGLHINTPROC mz_glad_glHint = NULL;
PFNGLHISTOGRAMPROC mz_glad_glHistogram = NULL;
PFNGLINDEXMASKPROC mz_glad_glIndexMask = NULL;
PFNGLINDEXPOINTERPROC mz_glad_glIndexPointer = NULL;
PFNGLINDEXPOINTEREXTPROC mz_glad_glIndexPointerEXT = NULL;
PFNGLINDEXDPROC mz_glad_glIndexd = NULL;
PFNGLINDEXDVPROC mz_glad_glIndexdv = NULL;
PFNGLINDEXFPROC mz_glad_glIndexf = NULL;
PFNGLINDEXFVPROC mz_glad_glIndexfv = NULL;
PFNGLINDEXIPROC mz_glad_glIndexi = NULL;
PFNGLINDEXIVPROC mz_glad_glIndexiv = NULL;
PFNGLINDEXSPROC mz_glad_glIndexs = NULL;
PFNGLINDEXSVPROC mz_glad_glIndexsv = NULL;
PFNGLINDEXUBPROC mz_glad_glIndexub = NULL;
PFNGLINDEXUBVPROC mz_glad_glIndexubv = NULL;
PFNGLINITNAMESPROC mz_glad_glInitNames = NULL;
PFNGLINTERLEAVEDARRAYSPROC mz_glad_glInterleavedArrays = NULL;
PFNGLISBUFFERPROC mz_glad_glIsBuffer = NULL;
PFNGLISBUFFERARBPROC mz_glad_glIsBufferARB = NULL;
PFNGLISENABLEDPROC mz_glad_glIsEnabled = NULL;
PFNGLISFRAMEBUFFERPROC mz_glad_glIsFramebuffer = NULL;
PFNGLISFRAMEBUFFEREXTPROC mz_glad_glIsFramebufferEXT = NULL;
PFNGLISLISTPROC mz_glad_glIsList = NULL;
PFNGLISPROGRAMARBPROC mz_glad_glIsProgramARB = NULL;
PFNGLISPROGRAMNVPROC mz_glad_glIsProgramNV = NULL;
PFNGLISPROGRAMPIPELINEPROC mz_glad_glIsProgramPipeline = NULL;
PFNGLISRENDERBUFFERPROC mz_glad_glIsRenderbuffer = NULL;
PFNGLISRENDERBUFFEREXTPROC mz_glad_glIsRenderbufferEXT = NULL;
PFNGLISTEXTUREPROC mz_glad_glIsTexture = NULL;
PFNGLISTEXTUREEXTPROC mz_glad_glIsTextureEXT = NULL;
PFNGLLIGHTMODELFPROC mz_glad_glLightModelf = NULL;
PFNGLLIGHTMODELFVPROC mz_glad_glLightModelfv = NULL;
PFNGLLIGHTMODELIPROC mz_glad_glLightModeli = NULL;
PFNGLLIGHTMODELIVPROC mz_glad_glLightModeliv = NULL;
PFNGLLIGHTFPROC mz_glad_glLightf = NULL;
PFNGLLIGHTFVPROC mz_glad_glLightfv = NULL;
PFNGLLIGHTIPROC mz_glad_glLighti = NULL;
PFNGLLIGHTIVPROC mz_glad_glLightiv = NULL;
PFNGLLINESTIPPLEPROC mz_glad_glLineStipple = NULL;
PFNGLLINEWIDTHPROC mz_glad_glLineWidth = NULL;
PFNGLLINKPROGRAMPROC mz_glad_glLinkProgram = NULL;
PFNGLLINKPROGRAMARBPROC mz_glad_glLinkProgramARB = NULL;
PFNGLLISTBASEPROC mz_glad_glListBase = NULL;
PFNGLLOADIDENTITYPROC mz_glad_glLoadIdentity = NULL;
PFNGLLOADMATRIXDPROC mz_glad_glLoadMatrixd = NULL;
PFNGLLOADMATRIXFPROC mz_glad_glLoadMatrixf = NULL;
PFNGLLOADNAMEPROC mz_glad_glLoadName = NULL;
PFNGLLOADPROGRAMNVPROC mz_glad_glLoadProgramNV = NULL;
PFNGLLOGICOPPROC mz_glad_glLogicOp = NULL;
PFNGLMAP1DPROC mz_glad_glMap1d = NULL;
PFNGLMAP1FPROC mz_glad_glMap1f = NULL;
PFNGLMAP2DPROC mz_glad_glMap2d = NULL;
PFNGLMAP2FPROC mz_glad_glMap2f = NULL;
PFNGLMAPBUFFERPROC mz_glad_glMapBuffer = NULL;
PFNGLMAPBUFFERARBPROC mz_glad_glMapBufferARB = NULL;
PFNGLMAPGRID1DPROC mz_glad_glMapGrid1d = NULL;
PFNGLMAPGRID1FPROC mz_glad_glMapGrid1f = NULL;
PFNGLMAPGRID2DPROC mz_glad_glMapGrid2d = NULL;
PFNGLMAPGRID2FPROC mz_glad_glMapGrid2f = NULL;
PFNGLMATERIALFPROC mz_glad_glMaterialf = NULL;
PFNGLMATERIALFVPROC mz_glad_glMaterialfv = NULL;
PFNGLMATERIALIPROC mz_glad_glMateriali = NULL;
PFNGLMATERIALIVPROC mz_glad_glMaterialiv = NULL;
PFNGLMATRIXMODEPROC mz_glad_glMatrixMode = NULL;
PFNGLMINMAXPROC mz_glad_glMinmax = NULL;
PFNGLMULTMATRIXDPROC mz_glad_glMultMatrixd = NULL;
PFNGLMULTMATRIXFPROC mz_glad_glMultMatrixf = NULL;
PFNGLMULTITEXCOORD1DPROC mz_glad_glMultiTexCoord1d = NULL;
PFNGLMULTITEXCOORD1DARBPROC mz_glad_glMultiTexCoord1dARB = NULL;
PFNGLMULTITEXCOORD1DVPROC mz_glad_glMultiTexCoord1dv = NULL;
PFNGLMULTITEXCOORD1DVARBPROC mz_glad_glMultiTexCoord1dvARB = NULL;
PFNGLMULTITEXCOORD1FPROC mz_glad_glMultiTexCoord1f = NULL;
PFNGLMULTITEXCOORD1FARBPROC mz_glad_glMultiTexCoord1fARB = NULL;
PFNGLMULTITEXCOORD1FVPROC mz_glad_glMultiTexCoord1fv = NULL;
PFNGLMULTITEXCOORD1FVARBPROC mz_glad_glMultiTexCoord1fvARB = NULL;
PFNGLMULTITEXCOORD1IPROC mz_glad_glMultiTexCoord1i = NULL;
PFNGLMULTITEXCOORD1IARBPROC mz_glad_glMultiTexCoord1iARB = NULL;
PFNGLMULTITEXCOORD1IVPROC mz_glad_glMultiTexCoord1iv = NULL;
PFNGLMULTITEXCOORD1IVARBPROC mz_glad_glMultiTexCoord1ivARB = NULL;
PFNGLMULTITEXCOORD1SPROC mz_glad_glMultiTexCoord1s = NULL;
PFNGLMULTITEXCOORD1SARBPROC mz_glad_glMultiTexCoord1sARB = NULL;
PFNGLMULTITEXCOORD1SVPROC mz_glad_glMultiTexCoord1sv = NULL;
PFNGLMULTITEXCOORD1SVARBPROC mz_glad_glMultiTexCoord1svARB = NULL;
PFNGLMULTITEXCOORD2DPROC mz_glad_glMultiTexCoord2d = NULL;
PFNGLMULTITEXCOORD2DARBPROC mz_glad_glMultiTexCoord2dARB = NULL;
PFNGLMULTITEXCOORD2DVPROC mz_glad_glMultiTexCoord2dv = NULL;
PFNGLMULTITEXCOORD2DVARBPROC mz_glad_glMultiTexCoord2dvARB = NULL;
PFNGLMULTITEXCOORD2FPROC mz_glad_glMultiTexCoord2f = NULL;
PFNGLMULTITEXCOORD2FARBPROC mz_glad_glMultiTexCoord2fARB = NULL;
PFNGLMULTITEXCOORD2FVPROC mz_glad_glMultiTexCoord2fv = NULL;
PFNGLMULTITEXCOORD2FVARBPROC mz_glad_glMultiTexCoord2fvARB = NULL;
PFNGLMULTITEXCOORD2IPROC mz_glad_glMultiTexCoord2i = NULL;
PFNGLMULTITEXCOORD2IARBPROC mz_glad_glMultiTexCoord2iARB = NULL;
PFNGLMULTITEXCOORD2IVPROC mz_glad_glMultiTexCoord2iv = NULL;
PFNGLMULTITEXCOORD2IVARBPROC mz_glad_glMultiTexCoord2ivARB = NULL;
PFNGLMULTITEXCOORD2SPROC mz_glad_glMultiTexCoord2s = NULL;
PFNGLMULTITEXCOORD2SARBPROC mz_glad_glMultiTexCoord2sARB = NULL;
PFNGLMULTITEXCOORD2SVPROC mz_glad_glMultiTexCoord2sv = NULL;
PFNGLMULTITEXCOORD2SVARBPROC mz_glad_glMultiTexCoord2svARB = NULL;
PFNGLMULTITEXCOORD3DPROC mz_glad_glMultiTexCoord3d = NULL;
PFNGLMULTITEXCOORD3DARBPROC mz_glad_glMultiTexCoord3dARB = NULL;
PFNGLMULTITEXCOORD3DVPROC mz_glad_glMultiTexCoord3dv = NULL;
PFNGLMULTITEXCOORD3DVARBPROC mz_glad_glMultiTexCoord3dvARB = NULL;
PFNGLMULTITEXCOORD3FPROC mz_glad_glMultiTexCoord3f = NULL;
PFNGLMULTITEXCOORD3FARBPROC mz_glad_glMultiTexCoord3fARB = NULL;
PFNGLMULTITEXCOORD3FVPROC mz_glad_glMultiTexCoord3fv = NULL;
PFNGLMULTITEXCOORD3FVARBPROC mz_glad_glMultiTexCoord3fvARB = NULL;
PFNGLMULTITEXCOORD3IPROC mz_glad_glMultiTexCoord3i = NULL;
PFNGLMULTITEXCOORD3IARBPROC mz_glad_glMultiTexCoord3iARB = NULL;
PFNGLMULTITEXCOORD3IVPROC mz_glad_glMultiTexCoord3iv = NULL;
PFNGLMULTITEXCOORD3IVARBPROC mz_glad_glMultiTexCoord3ivARB = NULL;
PFNGLMULTITEXCOORD3SPROC mz_glad_glMultiTexCoord3s = NULL;
PFNGLMULTITEXCOORD3SARBPROC mz_glad_glMultiTexCoord3sARB = NULL;
PFNGLMULTITEXCOORD3SVPROC mz_glad_glMultiTexCoord3sv = NULL;
PFNGLMULTITEXCOORD3SVARBPROC mz_glad_glMultiTexCoord3svARB = NULL;
PFNGLMULTITEXCOORD4DPROC mz_glad_glMultiTexCoord4d = NULL;
PFNGLMULTITEXCOORD4DARBPROC mz_glad_glMultiTexCoord4dARB = NULL;
PFNGLMULTITEXCOORD4DVPROC mz_glad_glMultiTexCoord4dv = NULL;
PFNGLMULTITEXCOORD4DVARBPROC mz_glad_glMultiTexCoord4dvARB = NULL;
PFNGLMULTITEXCOORD4FPROC mz_glad_glMultiTexCoord4f = NULL;
PFNGLMULTITEXCOORD4FARBPROC mz_glad_glMultiTexCoord4fARB = NULL;
PFNGLMULTITEXCOORD4FVPROC mz_glad_glMultiTexCoord4fv = NULL;
PFNGLMULTITEXCOORD4FVARBPROC mz_glad_glMultiTexCoord4fvARB = NULL;
PFNGLMULTITEXCOORD4IPROC mz_glad_glMultiTexCoord4i = NULL;
PFNGLMULTITEXCOORD4IARBPROC mz_glad_glMultiTexCoord4iARB = NULL;
PFNGLMULTITEXCOORD4IVPROC mz_glad_glMultiTexCoord4iv = NULL;
PFNGLMULTITEXCOORD4IVARBPROC mz_glad_glMultiTexCoord4ivARB = NULL;
PFNGLMULTITEXCOORD4SPROC mz_glad_glMultiTexCoord4s = NULL;
PFNGLMULTITEXCOORD4SARBPROC mz_glad_glMultiTexCoord4sARB = NULL;
PFNGLMULTITEXCOORD4SVPROC mz_glad_glMultiTexCoord4sv = NULL;
PFNGLMULTITEXCOORD4SVARBPROC mz_glad_glMultiTexCoord4svARB = NULL;
PFNGLNEWLISTPROC mz_glad_glNewList = NULL;
PFNGLNORMAL3BPROC mz_glad_glNormal3b = NULL;
PFNGLNORMAL3BVPROC mz_glad_glNormal3bv = NULL;
PFNGLNORMAL3DPROC mz_glad_glNormal3d = NULL;
PFNGLNORMAL3DVPROC mz_glad_glNormal3dv = NULL;
PFNGLNORMAL3FPROC mz_glad_glNormal3f = NULL;
PFNGLNORMAL3FVPROC mz_glad_glNormal3fv = NULL;
PFNGLNORMAL3IPROC mz_glad_glNormal3i = NULL;
PFNGLNORMAL3IVPROC mz_glad_glNormal3iv = NULL;
PFNGLNORMAL3SPROC mz_glad_glNormal3s = NULL;
PFNGLNORMAL3SVPROC mz_glad_glNormal3sv = NULL;
PFNGLNORMALPOINTERPROC mz_glad_glNormalPointer = NULL;
PFNGLNORMALPOINTEREXTPROC mz_glad_glNormalPointerEXT = NULL;
PFNGLOBJECTLABELPROC mz_glad_glObjectLabel = NULL;
PFNGLOBJECTPTRLABELPROC mz_glad_glObjectPtrLabel = NULL;
PFNGLORTHOPROC mz_glad_glOrtho = NULL;
PFNGLPASSTHROUGHPROC mz_glad_glPassThrough = NULL;
PFNGLPIXELMAPFVPROC mz_glad_glPixelMapfv = NULL;
PFNGLPIXELMAPUIVPROC mz_glad_glPixelMapuiv = NULL;
PFNGLPIXELMAPUSVPROC mz_glad_glPixelMapusv = NULL;
PFNGLPIXELSTOREFPROC mz_glad_glPixelStoref = NULL;
PFNGLPIXELSTOREIPROC mz_glad_glPixelStorei = NULL;
PFNGLPIXELTRANSFERFPROC mz_glad_glPixelTransferf = NULL;
PFNGLPIXELTRANSFERIPROC mz_glad_glPixelTransferi = NULL;
PFNGLPIXELZOOMPROC mz_glad_glPixelZoom = NULL;
PFNGLPOINTSIZEPROC mz_glad_glPointSize = NULL;
PFNGLPOLYGONMODEPROC mz_glad_glPolygonMode = NULL;
PFNGLPOLYGONOFFSETPROC mz_glad_glPolygonOffset = NULL;
PFNGLPOLYGONSTIPPLEPROC mz_glad_glPolygonStipple = NULL;
PFNGLPOPATTRIBPROC mz_glad_glPopAttrib = NULL;
PFNGLPOPCLIENTATTRIBPROC mz_glad_glPopClientAttrib = NULL;
PFNGLPOPDEBUGGROUPPROC mz_glad_glPopDebugGroup = NULL;
PFNGLPOPMATRIXPROC mz_glad_glPopMatrix = NULL;
PFNGLPOPNAMEPROC mz_glad_glPopName = NULL;
PFNGLPRIORITIZETEXTURESPROC mz_glad_glPrioritizeTextures = NULL;
PFNGLPRIORITIZETEXTURESEXTPROC mz_glad_glPrioritizeTexturesEXT = NULL;
PFNGLPROGRAMBINARYPROC mz_glad_glProgramBinary = NULL;
PFNGLPROGRAMENVPARAMETER4DARBPROC mz_glad_glProgramEnvParameter4dARB = NULL;
PFNGLPROGRAMENVPARAMETER4DVARBPROC mz_glad_glProgramEnvParameter4dvARB = NULL;
PFNGLPROGRAMENVPARAMETER4FARBPROC mz_glad_glProgramEnvParameter4fARB = NULL;
PFNGLPROGRAMENVPARAMETER4FVARBPROC mz_glad_glProgramEnvParameter4fvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC mz_glad_glProgramLocalParameter4dARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC mz_glad_glProgramLocalParameter4dvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC mz_glad_glProgramLocalParameter4fARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC mz_glad_glProgramLocalParameter4fvARB = NULL;
PFNGLPROGRAMPARAMETER4DNVPROC mz_glad_glProgramParameter4dNV = NULL;
PFNGLPROGRAMPARAMETER4DVNVPROC mz_glad_glProgramParameter4dvNV = NULL;
PFNGLPROGRAMPARAMETER4FNVPROC mz_glad_glProgramParameter4fNV = NULL;
PFNGLPROGRAMPARAMETER4FVNVPROC mz_glad_glProgramParameter4fvNV = NULL;
PFNGLPROGRAMPARAMETERIPROC mz_glad_glProgramParameteri = NULL;
PFNGLPROGRAMPARAMETERIARBPROC mz_glad_glProgramParameteriARB = NULL;
PFNGLPROGRAMPARAMETERIEXTPROC mz_glad_glProgramParameteriEXT = NULL;
PFNGLPROGRAMPARAMETERS4DVNVPROC mz_glad_glProgramParameters4dvNV = NULL;
PFNGLPROGRAMPARAMETERS4FVNVPROC mz_glad_glProgramParameters4fvNV = NULL;
PFNGLPROGRAMSTRINGARBPROC mz_glad_glProgramStringARB = NULL;
PFNGLPROGRAMUNIFORM1DPROC mz_glad_glProgramUniform1d = NULL;
PFNGLPROGRAMUNIFORM1DVPROC mz_glad_glProgramUniform1dv = NULL;
PFNGLPROGRAMUNIFORM1FPROC mz_glad_glProgramUniform1f = NULL;
PFNGLPROGRAMUNIFORM1FVPROC mz_glad_glProgramUniform1fv = NULL;
PFNGLPROGRAMUNIFORM1IPROC mz_glad_glProgramUniform1i = NULL;
PFNGLPROGRAMUNIFORM1IVPROC mz_glad_glProgramUniform1iv = NULL;
PFNGLPROGRAMUNIFORM1UIPROC mz_glad_glProgramUniform1ui = NULL;
PFNGLPROGRAMUNIFORM1UIVPROC mz_glad_glProgramUniform1uiv = NULL;
PFNGLPROGRAMUNIFORM2DPROC mz_glad_glProgramUniform2d = NULL;
PFNGLPROGRAMUNIFORM2DVPROC mz_glad_glProgramUniform2dv = NULL;
PFNGLPROGRAMUNIFORM2FPROC mz_glad_glProgramUniform2f = NULL;
PFNGLPROGRAMUNIFORM2FVPROC mz_glad_glProgramUniform2fv = NULL;
PFNGLPROGRAMUNIFORM2IPROC mz_glad_glProgramUniform2i = NULL;
PFNGLPROGRAMUNIFORM2IVPROC mz_glad_glProgramUniform2iv = NULL;
PFNGLPROGRAMUNIFORM2UIPROC mz_glad_glProgramUniform2ui = NULL;
PFNGLPROGRAMUNIFORM2UIVPROC mz_glad_glProgramUniform2uiv = NULL;
PFNGLPROGRAMUNIFORM3DPROC mz_glad_glProgramUniform3d = NULL;
PFNGLPROGRAMUNIFORM3DVPROC mz_glad_glProgramUniform3dv = NULL;
PFNGLPROGRAMUNIFORM3FPROC mz_glad_glProgramUniform3f = NULL;
PFNGLPROGRAMUNIFORM3FVPROC mz_glad_glProgramUniform3fv = NULL;
PFNGLPROGRAMUNIFORM3IPROC mz_glad_glProgramUniform3i = NULL;
PFNGLPROGRAMUNIFORM3IVPROC mz_glad_glProgramUniform3iv = NULL;
PFNGLPROGRAMUNIFORM3UIPROC mz_glad_glProgramUniform3ui = NULL;
PFNGLPROGRAMUNIFORM3UIVPROC mz_glad_glProgramUniform3uiv = NULL;
PFNGLPROGRAMUNIFORM4DPROC mz_glad_glProgramUniform4d = NULL;
PFNGLPROGRAMUNIFORM4DVPROC mz_glad_glProgramUniform4dv = NULL;
PFNGLPROGRAMUNIFORM4FPROC mz_glad_glProgramUniform4f = NULL;
PFNGLPROGRAMUNIFORM4FVPROC mz_glad_glProgramUniform4fv = NULL;
PFNGLPROGRAMUNIFORM4IPROC mz_glad_glProgramUniform4i = NULL;
PFNGLPROGRAMUNIFORM4IVPROC mz_glad_glProgramUniform4iv = NULL;
PFNGLPROGRAMUNIFORM4UIPROC mz_glad_glProgramUniform4ui = NULL;
PFNGLPROGRAMUNIFORM4UIVPROC mz_glad_glProgramUniform4uiv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC mz_glad_glProgramUniformMatrix2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC mz_glad_glProgramUniformMatrix2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC mz_glad_glProgramUniformMatrix2x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC mz_glad_glProgramUniformMatrix2x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC mz_glad_glProgramUniformMatrix2x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC mz_glad_glProgramUniformMatrix2x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC mz_glad_glProgramUniformMatrix3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC mz_glad_glProgramUniformMatrix3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC mz_glad_glProgramUniformMatrix3x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC mz_glad_glProgramUniformMatrix3x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC mz_glad_glProgramUniformMatrix3x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC mz_glad_glProgramUniformMatrix3x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC mz_glad_glProgramUniformMatrix4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC mz_glad_glProgramUniformMatrix4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC mz_glad_glProgramUniformMatrix4x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC mz_glad_glProgramUniformMatrix4x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC mz_glad_glProgramUniformMatrix4x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC mz_glad_glProgramUniformMatrix4x3fv = NULL;
PFNGLPROGRAMVERTEXLIMITNVPROC mz_glad_glProgramVertexLimitNV = NULL;
PFNGLPUSHATTRIBPROC mz_glad_glPushAttrib = NULL;
PFNGLPUSHCLIENTATTRIBPROC mz_glad_glPushClientAttrib = NULL;
PFNGLPUSHDEBUGGROUPPROC mz_glad_glPushDebugGroup = NULL;
PFNGLPUSHMATRIXPROC mz_glad_glPushMatrix = NULL;
PFNGLPUSHNAMEPROC mz_glad_glPushName = NULL;
PFNGLRASTERPOS2DPROC mz_glad_glRasterPos2d = NULL;
PFNGLRASTERPOS2DVPROC mz_glad_glRasterPos2dv = NULL;
PFNGLRASTERPOS2FPROC mz_glad_glRasterPos2f = NULL;
PFNGLRASTERPOS2FVPROC mz_glad_glRasterPos2fv = NULL;
PFNGLRASTERPOS2IPROC mz_glad_glRasterPos2i = NULL;
PFNGLRASTERPOS2IVPROC mz_glad_glRasterPos2iv = NULL;
PFNGLRASTERPOS2SPROC mz_glad_glRasterPos2s = NULL;
PFNGLRASTERPOS2SVPROC mz_glad_glRasterPos2sv = NULL;
PFNGLRASTERPOS3DPROC mz_glad_glRasterPos3d = NULL;
PFNGLRASTERPOS3DVPROC mz_glad_glRasterPos3dv = NULL;
PFNGLRASTERPOS3FPROC mz_glad_glRasterPos3f = NULL;
PFNGLRASTERPOS3FVPROC mz_glad_glRasterPos3fv = NULL;
PFNGLRASTERPOS3IPROC mz_glad_glRasterPos3i = NULL;
PFNGLRASTERPOS3IVPROC mz_glad_glRasterPos3iv = NULL;
PFNGLRASTERPOS3SPROC mz_glad_glRasterPos3s = NULL;
PFNGLRASTERPOS3SVPROC mz_glad_glRasterPos3sv = NULL;
PFNGLRASTERPOS4DPROC mz_glad_glRasterPos4d = NULL;
PFNGLRASTERPOS4DVPROC mz_glad_glRasterPos4dv = NULL;
PFNGLRASTERPOS4FPROC mz_glad_glRasterPos4f = NULL;
PFNGLRASTERPOS4FVPROC mz_glad_glRasterPos4fv = NULL;
PFNGLRASTERPOS4IPROC mz_glad_glRasterPos4i = NULL;
PFNGLRASTERPOS4IVPROC mz_glad_glRasterPos4iv = NULL;
PFNGLRASTERPOS4SPROC mz_glad_glRasterPos4s = NULL;
PFNGLRASTERPOS4SVPROC mz_glad_glRasterPos4sv = NULL;
PFNGLREADBUFFERPROC mz_glad_glReadBuffer = NULL;
PFNGLREADPIXELSPROC mz_glad_glReadPixels = NULL;
PFNGLRECTDPROC mz_glad_glRectd = NULL;
PFNGLRECTDVPROC mz_glad_glRectdv = NULL;
PFNGLRECTFPROC mz_glad_glRectf = NULL;
PFNGLRECTFVPROC mz_glad_glRectfv = NULL;
PFNGLRECTIPROC mz_glad_glRecti = NULL;
PFNGLRECTIVPROC mz_glad_glRectiv = NULL;
PFNGLRECTSPROC mz_glad_glRects = NULL;
PFNGLRECTSVPROC mz_glad_glRectsv = NULL;
PFNGLRENDERMODEPROC mz_glad_glRenderMode = NULL;
PFNGLRENDERBUFFERSTORAGEPROC mz_glad_glRenderbufferStorage = NULL;
PFNGLRENDERBUFFERSTORAGEEXTPROC mz_glad_glRenderbufferStorageEXT = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC mz_glad_glRenderbufferStorageMultisample = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC mz_glad_glRenderbufferStorageMultisampleEXT = NULL;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC mz_glad_glRequestResidentProgramsNV = NULL;
PFNGLRESETHISTOGRAMPROC mz_glad_glResetHistogram = NULL;
PFNGLRESETMINMAXPROC mz_glad_glResetMinmax = NULL;
PFNGLROTATEDPROC mz_glad_glRotated = NULL;
PFNGLROTATEFPROC mz_glad_glRotatef = NULL;
PFNGLSCALEDPROC mz_glad_glScaled = NULL;
PFNGLSCALEFPROC mz_glad_glScalef = NULL;
PFNGLSCISSORPROC mz_glad_glScissor = NULL;
PFNGLSELECTBUFFERPROC mz_glad_glSelectBuffer = NULL;
PFNGLSEPARABLEFILTER2DPROC mz_glad_glSeparableFilter2D = NULL;
PFNGLSHADEMODELPROC mz_glad_glShadeModel = NULL;
PFNGLSHADERSOURCEPROC mz_glad_glShaderSource = NULL;
PFNGLSHADERSOURCEARBPROC mz_glad_glShaderSourceARB = NULL;
PFNGLSTENCILFUNCPROC mz_glad_glStencilFunc = NULL;
PFNGLSTENCILMASKPROC mz_glad_glStencilMask = NULL;
PFNGLSTENCILOPPROC mz_glad_glStencilOp = NULL;
PFNGLTEXCOORD1DPROC mz_glad_glTexCoord1d = NULL;
PFNGLTEXCOORD1DVPROC mz_glad_glTexCoord1dv = NULL;
PFNGLTEXCOORD1FPROC mz_glad_glTexCoord1f = NULL;
PFNGLTEXCOORD1FVPROC mz_glad_glTexCoord1fv = NULL;
PFNGLTEXCOORD1IPROC mz_glad_glTexCoord1i = NULL;
PFNGLTEXCOORD1IVPROC mz_glad_glTexCoord1iv = NULL;
PFNGLTEXCOORD1SPROC mz_glad_glTexCoord1s = NULL;
PFNGLTEXCOORD1SVPROC mz_glad_glTexCoord1sv = NULL;
PFNGLTEXCOORD2DPROC mz_glad_glTexCoord2d = NULL;
PFNGLTEXCOORD2DVPROC mz_glad_glTexCoord2dv = NULL;
PFNGLTEXCOORD2FPROC mz_glad_glTexCoord2f = NULL;
PFNGLTEXCOORD2FVPROC mz_glad_glTexCoord2fv = NULL;
PFNGLTEXCOORD2IPROC mz_glad_glTexCoord2i = NULL;
PFNGLTEXCOORD2IVPROC mz_glad_glTexCoord2iv = NULL;
PFNGLTEXCOORD2SPROC mz_glad_glTexCoord2s = NULL;
PFNGLTEXCOORD2SVPROC mz_glad_glTexCoord2sv = NULL;
PFNGLTEXCOORD3DPROC mz_glad_glTexCoord3d = NULL;
PFNGLTEXCOORD3DVPROC mz_glad_glTexCoord3dv = NULL;
PFNGLTEXCOORD3FPROC mz_glad_glTexCoord3f = NULL;
PFNGLTEXCOORD3FVPROC mz_glad_glTexCoord3fv = NULL;
PFNGLTEXCOORD3IPROC mz_glad_glTexCoord3i = NULL;
PFNGLTEXCOORD3IVPROC mz_glad_glTexCoord3iv = NULL;
PFNGLTEXCOORD3SPROC mz_glad_glTexCoord3s = NULL;
PFNGLTEXCOORD3SVPROC mz_glad_glTexCoord3sv = NULL;
PFNGLTEXCOORD4DPROC mz_glad_glTexCoord4d = NULL;
PFNGLTEXCOORD4DVPROC mz_glad_glTexCoord4dv = NULL;
PFNGLTEXCOORD4FPROC mz_glad_glTexCoord4f = NULL;
PFNGLTEXCOORD4FVPROC mz_glad_glTexCoord4fv = NULL;
PFNGLTEXCOORD4IPROC mz_glad_glTexCoord4i = NULL;
PFNGLTEXCOORD4IVPROC mz_glad_glTexCoord4iv = NULL;
PFNGLTEXCOORD4SPROC mz_glad_glTexCoord4s = NULL;
PFNGLTEXCOORD4SVPROC mz_glad_glTexCoord4sv = NULL;
PFNGLTEXCOORDPOINTERPROC mz_glad_glTexCoordPointer = NULL;
PFNGLTEXCOORDPOINTEREXTPROC mz_glad_glTexCoordPointerEXT = NULL;
PFNGLTEXENVFPROC mz_glad_glTexEnvf = NULL;
PFNGLTEXENVFVPROC mz_glad_glTexEnvfv = NULL;
PFNGLTEXENVIPROC mz_glad_glTexEnvi = NULL;
PFNGLTEXENVIVPROC mz_glad_glTexEnviv = NULL;
PFNGLTEXGENDPROC mz_glad_glTexGend = NULL;
PFNGLTEXGENDVPROC mz_glad_glTexGendv = NULL;
PFNGLTEXGENFPROC mz_glad_glTexGenf = NULL;
PFNGLTEXGENFVPROC mz_glad_glTexGenfv = NULL;
PFNGLTEXGENIPROC mz_glad_glTexGeni = NULL;
PFNGLTEXGENIVPROC mz_glad_glTexGeniv = NULL;
PFNGLTEXIMAGE1DPROC mz_glad_glTexImage1D = NULL;
PFNGLTEXIMAGE2DPROC mz_glad_glTexImage2D = NULL;
PFNGLTEXPARAMETERFPROC mz_glad_glTexParameterf = NULL;
PFNGLTEXPARAMETERFVPROC mz_glad_glTexParameterfv = NULL;
PFNGLTEXPARAMETERIPROC mz_glad_glTexParameteri = NULL;
PFNGLTEXPARAMETERIVPROC mz_glad_glTexParameteriv = NULL;
PFNGLTEXSUBIMAGE1DPROC mz_glad_glTexSubImage1D = NULL;
PFNGLTEXSUBIMAGE1DEXTPROC mz_glad_glTexSubImage1DEXT = NULL;
PFNGLTEXSUBIMAGE2DPROC mz_glad_glTexSubImage2D = NULL;
PFNGLTEXSUBIMAGE2DEXTPROC mz_glad_glTexSubImage2DEXT = NULL;
PFNGLTRACKMATRIXNVPROC mz_glad_glTrackMatrixNV = NULL;
PFNGLTRANSLATEDPROC mz_glad_glTranslated = NULL;
PFNGLTRANSLATEFPROC mz_glad_glTranslatef = NULL;
PFNGLUNIFORM1FPROC mz_glad_glUniform1f = NULL;
PFNGLUNIFORM1FARBPROC mz_glad_glUniform1fARB = NULL;
PFNGLUNIFORM1FVPROC mz_glad_glUniform1fv = NULL;
PFNGLUNIFORM1FVARBPROC mz_glad_glUniform1fvARB = NULL;
PFNGLUNIFORM1IPROC mz_glad_glUniform1i = NULL;
PFNGLUNIFORM1IARBPROC mz_glad_glUniform1iARB = NULL;
PFNGLUNIFORM1IVPROC mz_glad_glUniform1iv = NULL;
PFNGLUNIFORM1IVARBPROC mz_glad_glUniform1ivARB = NULL;
PFNGLUNIFORM2FPROC mz_glad_glUniform2f = NULL;
PFNGLUNIFORM2FARBPROC mz_glad_glUniform2fARB = NULL;
PFNGLUNIFORM2FVPROC mz_glad_glUniform2fv = NULL;
PFNGLUNIFORM2FVARBPROC mz_glad_glUniform2fvARB = NULL;
PFNGLUNIFORM2IPROC mz_glad_glUniform2i = NULL;
PFNGLUNIFORM2IARBPROC mz_glad_glUniform2iARB = NULL;
PFNGLUNIFORM2IVPROC mz_glad_glUniform2iv = NULL;
PFNGLUNIFORM2IVARBPROC mz_glad_glUniform2ivARB = NULL;
PFNGLUNIFORM3FPROC mz_glad_glUniform3f = NULL;
PFNGLUNIFORM3FARBPROC mz_glad_glUniform3fARB = NULL;
PFNGLUNIFORM3FVPROC mz_glad_glUniform3fv = NULL;
PFNGLUNIFORM3FVARBPROC mz_glad_glUniform3fvARB = NULL;
PFNGLUNIFORM3IPROC mz_glad_glUniform3i = NULL;
PFNGLUNIFORM3IARBPROC mz_glad_glUniform3iARB = NULL;
PFNGLUNIFORM3IVPROC mz_glad_glUniform3iv = NULL;
PFNGLUNIFORM3IVARBPROC mz_glad_glUniform3ivARB = NULL;
PFNGLUNIFORM4FPROC mz_glad_glUniform4f = NULL;
PFNGLUNIFORM4FARBPROC mz_glad_glUniform4fARB = NULL;
PFNGLUNIFORM4FVPROC mz_glad_glUniform4fv = NULL;
PFNGLUNIFORM4FVARBPROC mz_glad_glUniform4fvARB = NULL;
PFNGLUNIFORM4IPROC mz_glad_glUniform4i = NULL;
PFNGLUNIFORM4IARBPROC mz_glad_glUniform4iARB = NULL;
PFNGLUNIFORM4IVPROC mz_glad_glUniform4iv = NULL;
PFNGLUNIFORM4IVARBPROC mz_glad_glUniform4ivARB = NULL;
PFNGLUNIFORMMATRIX2FVPROC mz_glad_glUniformMatrix2fv = NULL;
PFNGLUNIFORMMATRIX2FVARBPROC mz_glad_glUniformMatrix2fvARB = NULL;
PFNGLUNIFORMMATRIX3FVPROC mz_glad_glUniformMatrix3fv = NULL;
PFNGLUNIFORMMATRIX3FVARBPROC mz_glad_glUniformMatrix3fvARB = NULL;
PFNGLUNIFORMMATRIX4FVPROC mz_glad_glUniformMatrix4fv = NULL;
PFNGLUNIFORMMATRIX4FVARBPROC mz_glad_glUniformMatrix4fvARB = NULL;
PFNGLUNMAPBUFFERPROC mz_glad_glUnmapBuffer = NULL;
PFNGLUNMAPBUFFERARBPROC mz_glad_glUnmapBufferARB = NULL;
PFNGLUSEPROGRAMPROC mz_glad_glUseProgram = NULL;
PFNGLUSEPROGRAMOBJECTARBPROC mz_glad_glUseProgramObjectARB = NULL;
PFNGLUSEPROGRAMSTAGESPROC mz_glad_glUseProgramStages = NULL;
PFNGLVALIDATEPROGRAMPROC mz_glad_glValidateProgram = NULL;
PFNGLVALIDATEPROGRAMARBPROC mz_glad_glValidateProgramARB = NULL;
PFNGLVALIDATEPROGRAMPIPELINEPROC mz_glad_glValidateProgramPipeline = NULL;
PFNGLVERTEX2DPROC mz_glad_glVertex2d = NULL;
PFNGLVERTEX2DVPROC mz_glad_glVertex2dv = NULL;
PFNGLVERTEX2FPROC mz_glad_glVertex2f = NULL;
PFNGLVERTEX2FVPROC mz_glad_glVertex2fv = NULL;
PFNGLVERTEX2IPROC mz_glad_glVertex2i = NULL;
PFNGLVERTEX2IVPROC mz_glad_glVertex2iv = NULL;
PFNGLVERTEX2SPROC mz_glad_glVertex2s = NULL;
PFNGLVERTEX2SVPROC mz_glad_glVertex2sv = NULL;
PFNGLVERTEX3DPROC mz_glad_glVertex3d = NULL;
PFNGLVERTEX3DVPROC mz_glad_glVertex3dv = NULL;
PFNGLVERTEX3FPROC mz_glad_glVertex3f = NULL;
PFNGLVERTEX3FVPROC mz_glad_glVertex3fv = NULL;
PFNGLVERTEX3IPROC mz_glad_glVertex3i = NULL;
PFNGLVERTEX3IVPROC mz_glad_glVertex3iv = NULL;
PFNGLVERTEX3SPROC mz_glad_glVertex3s = NULL;
PFNGLVERTEX3SVPROC mz_glad_glVertex3sv = NULL;
PFNGLVERTEX4DPROC mz_glad_glVertex4d = NULL;
PFNGLVERTEX4DVPROC mz_glad_glVertex4dv = NULL;
PFNGLVERTEX4FPROC mz_glad_glVertex4f = NULL;
PFNGLVERTEX4FVPROC mz_glad_glVertex4fv = NULL;
PFNGLVERTEX4IPROC mz_glad_glVertex4i = NULL;
PFNGLVERTEX4IVPROC mz_glad_glVertex4iv = NULL;
PFNGLVERTEX4SPROC mz_glad_glVertex4s = NULL;
PFNGLVERTEX4SVPROC mz_glad_glVertex4sv = NULL;
PFNGLVERTEXATTRIB1DPROC mz_glad_glVertexAttrib1d = NULL;
PFNGLVERTEXATTRIB1DARBPROC mz_glad_glVertexAttrib1dARB = NULL;
PFNGLVERTEXATTRIB1DNVPROC mz_glad_glVertexAttrib1dNV = NULL;
PFNGLVERTEXATTRIB1DVPROC mz_glad_glVertexAttrib1dv = NULL;
PFNGLVERTEXATTRIB1DVARBPROC mz_glad_glVertexAttrib1dvARB = NULL;
PFNGLVERTEXATTRIB1DVNVPROC mz_glad_glVertexAttrib1dvNV = NULL;
PFNGLVERTEXATTRIB1FPROC mz_glad_glVertexAttrib1f = NULL;
PFNGLVERTEXATTRIB1FARBPROC mz_glad_glVertexAttrib1fARB = NULL;
PFNGLVERTEXATTRIB1FNVPROC mz_glad_glVertexAttrib1fNV = NULL;
PFNGLVERTEXATTRIB1FVPROC mz_glad_glVertexAttrib1fv = NULL;
PFNGLVERTEXATTRIB1FVARBPROC mz_glad_glVertexAttrib1fvARB = NULL;
PFNGLVERTEXATTRIB1FVNVPROC mz_glad_glVertexAttrib1fvNV = NULL;
PFNGLVERTEXATTRIB1SPROC mz_glad_glVertexAttrib1s = NULL;
PFNGLVERTEXATTRIB1SARBPROC mz_glad_glVertexAttrib1sARB = NULL;
PFNGLVERTEXATTRIB1SNVPROC mz_glad_glVertexAttrib1sNV = NULL;
PFNGLVERTEXATTRIB1SVPROC mz_glad_glVertexAttrib1sv = NULL;
PFNGLVERTEXATTRIB1SVARBPROC mz_glad_glVertexAttrib1svARB = NULL;
PFNGLVERTEXATTRIB1SVNVPROC mz_glad_glVertexAttrib1svNV = NULL;
PFNGLVERTEXATTRIB2DPROC mz_glad_glVertexAttrib2d = NULL;
PFNGLVERTEXATTRIB2DARBPROC mz_glad_glVertexAttrib2dARB = NULL;
PFNGLVERTEXATTRIB2DNVPROC mz_glad_glVertexAttrib2dNV = NULL;
PFNGLVERTEXATTRIB2DVPROC mz_glad_glVertexAttrib2dv = NULL;
PFNGLVERTEXATTRIB2DVARBPROC mz_glad_glVertexAttrib2dvARB = NULL;
PFNGLVERTEXATTRIB2DVNVPROC mz_glad_glVertexAttrib2dvNV = NULL;
PFNGLVERTEXATTRIB2FPROC mz_glad_glVertexAttrib2f = NULL;
PFNGLVERTEXATTRIB2FARBPROC mz_glad_glVertexAttrib2fARB = NULL;
PFNGLVERTEXATTRIB2FNVPROC mz_glad_glVertexAttrib2fNV = NULL;
PFNGLVERTEXATTRIB2FVPROC mz_glad_glVertexAttrib2fv = NULL;
PFNGLVERTEXATTRIB2FVARBPROC mz_glad_glVertexAttrib2fvARB = NULL;
PFNGLVERTEXATTRIB2FVNVPROC mz_glad_glVertexAttrib2fvNV = NULL;
PFNGLVERTEXATTRIB2SPROC mz_glad_glVertexAttrib2s = NULL;
PFNGLVERTEXATTRIB2SARBPROC mz_glad_glVertexAttrib2sARB = NULL;
PFNGLVERTEXATTRIB2SNVPROC mz_glad_glVertexAttrib2sNV = NULL;
PFNGLVERTEXATTRIB2SVPROC mz_glad_glVertexAttrib2sv = NULL;
PFNGLVERTEXATTRIB2SVARBPROC mz_glad_glVertexAttrib2svARB = NULL;
PFNGLVERTEXATTRIB2SVNVPROC mz_glad_glVertexAttrib2svNV = NULL;
PFNGLVERTEXATTRIB3DPROC mz_glad_glVertexAttrib3d = NULL;
PFNGLVERTEXATTRIB3DARBPROC mz_glad_glVertexAttrib3dARB = NULL;
PFNGLVERTEXATTRIB3DNVPROC mz_glad_glVertexAttrib3dNV = NULL;
PFNGLVERTEXATTRIB3DVPROC mz_glad_glVertexAttrib3dv = NULL;
PFNGLVERTEXATTRIB3DVARBPROC mz_glad_glVertexAttrib3dvARB = NULL;
PFNGLVERTEXATTRIB3DVNVPROC mz_glad_glVertexAttrib3dvNV = NULL;
PFNGLVERTEXATTRIB3FPROC mz_glad_glVertexAttrib3f = NULL;
PFNGLVERTEXATTRIB3FARBPROC mz_glad_glVertexAttrib3fARB = NULL;
PFNGLVERTEXATTRIB3FNVPROC mz_glad_glVertexAttrib3fNV = NULL;
PFNGLVERTEXATTRIB3FVPROC mz_glad_glVertexAttrib3fv = NULL;
PFNGLVERTEXATTRIB3FVARBPROC mz_glad_glVertexAttrib3fvARB = NULL;
PFNGLVERTEXATTRIB3FVNVPROC mz_glad_glVertexAttrib3fvNV = NULL;
PFNGLVERTEXATTRIB3SPROC mz_glad_glVertexAttrib3s = NULL;
PFNGLVERTEXATTRIB3SARBPROC mz_glad_glVertexAttrib3sARB = NULL;
PFNGLVERTEXATTRIB3SNVPROC mz_glad_glVertexAttrib3sNV = NULL;
PFNGLVERTEXATTRIB3SVPROC mz_glad_glVertexAttrib3sv = NULL;
PFNGLVERTEXATTRIB3SVARBPROC mz_glad_glVertexAttrib3svARB = NULL;
PFNGLVERTEXATTRIB3SVNVPROC mz_glad_glVertexAttrib3svNV = NULL;
PFNGLVERTEXATTRIB4NBVPROC mz_glad_glVertexAttrib4Nbv = NULL;
PFNGLVERTEXATTRIB4NBVARBPROC mz_glad_glVertexAttrib4NbvARB = NULL;
PFNGLVERTEXATTRIB4NIVPROC mz_glad_glVertexAttrib4Niv = NULL;
PFNGLVERTEXATTRIB4NIVARBPROC mz_glad_glVertexAttrib4NivARB = NULL;
PFNGLVERTEXATTRIB4NSVPROC mz_glad_glVertexAttrib4Nsv = NULL;
PFNGLVERTEXATTRIB4NSVARBPROC mz_glad_glVertexAttrib4NsvARB = NULL;
PFNGLVERTEXATTRIB4NUBPROC mz_glad_glVertexAttrib4Nub = NULL;
PFNGLVERTEXATTRIB4NUBARBPROC mz_glad_glVertexAttrib4NubARB = NULL;
PFNGLVERTEXATTRIB4NUBVPROC mz_glad_glVertexAttrib4Nubv = NULL;
PFNGLVERTEXATTRIB4NUBVARBPROC mz_glad_glVertexAttrib4NubvARB = NULL;
PFNGLVERTEXATTRIB4NUIVPROC mz_glad_glVertexAttrib4Nuiv = NULL;
PFNGLVERTEXATTRIB4NUIVARBPROC mz_glad_glVertexAttrib4NuivARB = NULL;
PFNGLVERTEXATTRIB4NUSVPROC mz_glad_glVertexAttrib4Nusv = NULL;
PFNGLVERTEXATTRIB4NUSVARBPROC mz_glad_glVertexAttrib4NusvARB = NULL;
PFNGLVERTEXATTRIB4BVPROC mz_glad_glVertexAttrib4bv = NULL;
PFNGLVERTEXATTRIB4BVARBPROC mz_glad_glVertexAttrib4bvARB = NULL;
PFNGLVERTEXATTRIB4DPROC mz_glad_glVertexAttrib4d = NULL;
PFNGLVERTEXATTRIB4DARBPROC mz_glad_glVertexAttrib4dARB = NULL;
PFNGLVERTEXATTRIB4DNVPROC mz_glad_glVertexAttrib4dNV = NULL;
PFNGLVERTEXATTRIB4DVPROC mz_glad_glVertexAttrib4dv = NULL;
PFNGLVERTEXATTRIB4DVARBPROC mz_glad_glVertexAttrib4dvARB = NULL;
PFNGLVERTEXATTRIB4DVNVPROC mz_glad_glVertexAttrib4dvNV = NULL;
PFNGLVERTEXATTRIB4FPROC mz_glad_glVertexAttrib4f = NULL;
PFNGLVERTEXATTRIB4FARBPROC mz_glad_glVertexAttrib4fARB = NULL;
PFNGLVERTEXATTRIB4FNVPROC mz_glad_glVertexAttrib4fNV = NULL;
PFNGLVERTEXATTRIB4FVPROC mz_glad_glVertexAttrib4fv = NULL;
PFNGLVERTEXATTRIB4FVARBPROC mz_glad_glVertexAttrib4fvARB = NULL;
PFNGLVERTEXATTRIB4FVNVPROC mz_glad_glVertexAttrib4fvNV = NULL;
PFNGLVERTEXATTRIB4IVPROC mz_glad_glVertexAttrib4iv = NULL;
PFNGLVERTEXATTRIB4IVARBPROC mz_glad_glVertexAttrib4ivARB = NULL;
PFNGLVERTEXATTRIB4SPROC mz_glad_glVertexAttrib4s = NULL;
PFNGLVERTEXATTRIB4SARBPROC mz_glad_glVertexAttrib4sARB = NULL;
PFNGLVERTEXATTRIB4SNVPROC mz_glad_glVertexAttrib4sNV = NULL;
PFNGLVERTEXATTRIB4SVPROC mz_glad_glVertexAttrib4sv = NULL;
PFNGLVERTEXATTRIB4SVARBPROC mz_glad_glVertexAttrib4svARB = NULL;
PFNGLVERTEXATTRIB4SVNVPROC mz_glad_glVertexAttrib4svNV = NULL;
PFNGLVERTEXATTRIB4UBNVPROC mz_glad_glVertexAttrib4ubNV = NULL;
PFNGLVERTEXATTRIB4UBVPROC mz_glad_glVertexAttrib4ubv = NULL;
PFNGLVERTEXATTRIB4UBVARBPROC mz_glad_glVertexAttrib4ubvARB = NULL;
PFNGLVERTEXATTRIB4UBVNVPROC mz_glad_glVertexAttrib4ubvNV = NULL;
PFNGLVERTEXATTRIB4UIVPROC mz_glad_glVertexAttrib4uiv = NULL;
PFNGLVERTEXATTRIB4UIVARBPROC mz_glad_glVertexAttrib4uivARB = NULL;
PFNGLVERTEXATTRIB4USVPROC mz_glad_glVertexAttrib4usv = NULL;
PFNGLVERTEXATTRIB4USVARBPROC mz_glad_glVertexAttrib4usvARB = NULL;
PFNGLVERTEXATTRIBPOINTERPROC mz_glad_glVertexAttribPointer = NULL;
PFNGLVERTEXATTRIBPOINTERARBPROC mz_glad_glVertexAttribPointerARB = NULL;
PFNGLVERTEXATTRIBPOINTERNVPROC mz_glad_glVertexAttribPointerNV = NULL;
PFNGLVERTEXATTRIBS1DVNVPROC mz_glad_glVertexAttribs1dvNV = NULL;
PFNGLVERTEXATTRIBS1FVNVPROC mz_glad_glVertexAttribs1fvNV = NULL;
PFNGLVERTEXATTRIBS1SVNVPROC mz_glad_glVertexAttribs1svNV = NULL;
PFNGLVERTEXATTRIBS2DVNVPROC mz_glad_glVertexAttribs2dvNV = NULL;
PFNGLVERTEXATTRIBS2FVNVPROC mz_glad_glVertexAttribs2fvNV = NULL;
PFNGLVERTEXATTRIBS2SVNVPROC mz_glad_glVertexAttribs2svNV = NULL;
PFNGLVERTEXATTRIBS3DVNVPROC mz_glad_glVertexAttribs3dvNV = NULL;
PFNGLVERTEXATTRIBS3FVNVPROC mz_glad_glVertexAttribs3fvNV = NULL;
PFNGLVERTEXATTRIBS3SVNVPROC mz_glad_glVertexAttribs3svNV = NULL;
PFNGLVERTEXATTRIBS4DVNVPROC mz_glad_glVertexAttribs4dvNV = NULL;
PFNGLVERTEXATTRIBS4FVNVPROC mz_glad_glVertexAttribs4fvNV = NULL;
PFNGLVERTEXATTRIBS4SVNVPROC mz_glad_glVertexAttribs4svNV = NULL;
PFNGLVERTEXATTRIBS4UBVNVPROC mz_glad_glVertexAttribs4ubvNV = NULL;
PFNGLVERTEXPOINTERPROC mz_glad_glVertexPointer = NULL;
PFNGLVERTEXPOINTEREXTPROC mz_glad_glVertexPointerEXT = NULL;
PFNGLVIEWPORTPROC mz_glad_glViewport = NULL;
PFNGLALPHAFUNCXPROC mz_glad_glAlphaFuncx = NULL;
PFNGLBINDFRAMEBUFFEROESPROC mz_glad_glBindFramebufferOES = NULL;
PFNGLBINDRENDERBUFFEROESPROC mz_glad_glBindRenderbufferOES = NULL;
PFNGLBLENDEQUATIONOESPROC mz_glad_glBlendEquationOES = NULL;
PFNGLBLENDEQUATIONSEPARATEOESPROC mz_glad_glBlendEquationSeparateOES = NULL;
PFNGLBLENDFUNCSEPARATEOESPROC mz_glad_glBlendFuncSeparateOES = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSOESPROC mz_glad_glCheckFramebufferStatusOES = NULL;
PFNGLCLEARCOLORXPROC mz_glad_glClearColorx = NULL;
PFNGLCLEARDEPTHFPROC mz_glad_glClearDepthf = NULL;
PFNGLCLEARDEPTHFOESPROC mz_glad_glClearDepthfOES = NULL;
PFNGLCLEARDEPTHXPROC mz_glad_glClearDepthx = NULL;
PFNGLCLIPPLANEFPROC mz_glad_glClipPlanef = NULL;
PFNGLCLIPPLANEFOESPROC mz_glad_glClipPlanefOES = NULL;
PFNGLCLIPPLANEXPROC mz_glad_glClipPlanex = NULL;
PFNGLCOLOR4XPROC mz_glad_glColor4x = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC mz_glad_glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC mz_glad_glCompressedTexSubImage2D = NULL;
PFNGLDELETEFRAMEBUFFERSOESPROC mz_glad_glDeleteFramebuffersOES = NULL;
PFNGLDELETERENDERBUFFERSOESPROC mz_glad_glDeleteRenderbuffersOES = NULL;
PFNGLDEPTHRANGEFPROC mz_glad_glDepthRangef = NULL;
PFNGLDEPTHRANGEFOESPROC mz_glad_glDepthRangefOES = NULL;
PFNGLDEPTHRANGEXPROC mz_glad_glDepthRangex = NULL;
PFNGLFOGXPROC mz_glad_glFogx = NULL;
PFNGLFOGXVPROC mz_glad_glFogxv = NULL;
PFNGLFRAMEBUFFERRENDERBUFFEROESPROC mz_glad_glFramebufferRenderbufferOES = NULL;
PFNGLFRAMEBUFFERTEXTURE2DOESPROC mz_glad_glFramebufferTexture2DOES = NULL;
PFNGLFRUSTUMFPROC mz_glad_glFrustumf = NULL;
PFNGLFRUSTUMFOESPROC mz_glad_glFrustumfOES = NULL;
PFNGLFRUSTUMXPROC mz_glad_glFrustumx = NULL;
PFNGLGENFRAMEBUFFERSOESPROC mz_glad_glGenFramebuffersOES = NULL;
PFNGLGENRENDERBUFFERSOESPROC mz_glad_glGenRenderbuffersOES = NULL;
PFNGLGENERATEMIPMAPOESPROC mz_glad_glGenerateMipmapOES = NULL;
PFNGLGETCLIPPLANEFPROC mz_glad_glGetClipPlanef = NULL;
PFNGLGETCLIPPLANEFOESPROC mz_glad_glGetClipPlanefOES = NULL;
PFNGLGETCLIPPLANEXPROC mz_glad_glGetClipPlanex = NULL;
PFNGLGETFIXEDVPROC mz_glad_glGetFixedv = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC mz_glad_glGetFramebufferAttachmentParameterivOES = NULL;
PFNGLGETLIGHTXVPROC mz_glad_glGetLightxv = NULL;
PFNGLGETMATERIALXVPROC mz_glad_glGetMaterialxv = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVOESPROC mz_glad_glGetRenderbufferParameterivOES = NULL;
PFNGLGETTEXENVXVPROC mz_glad_glGetTexEnvxv = NULL;
PFNGLGETTEXPARAMETERXVPROC mz_glad_glGetTexParameterxv = NULL;
PFNGLISFRAMEBUFFEROESPROC mz_glad_glIsFramebufferOES = NULL;
PFNGLISRENDERBUFFEROESPROC mz_glad_glIsRenderbufferOES = NULL;
PFNGLLIGHTMODELXPROC mz_glad_glLightModelx = NULL;
PFNGLLIGHTMODELXVPROC mz_glad_glLightModelxv = NULL;
PFNGLLIGHTXPROC mz_glad_glLightx = NULL;
PFNGLLIGHTXVPROC mz_glad_glLightxv = NULL;
PFNGLLINEWIDTHXPROC mz_glad_glLineWidthx = NULL;
PFNGLLOADMATRIXXPROC mz_glad_glLoadMatrixx = NULL;
PFNGLMATERIALXPROC mz_glad_glMaterialx = NULL;
PFNGLMATERIALXVPROC mz_glad_glMaterialxv = NULL;
PFNGLMULTMATRIXXPROC mz_glad_glMultMatrixx = NULL;
PFNGLMULTITEXCOORD4XPROC mz_glad_glMultiTexCoord4x = NULL;
PFNGLNORMAL3XPROC mz_glad_glNormal3x = NULL;
PFNGLORTHOFPROC mz_glad_glOrthof = NULL;
PFNGLORTHOFOESPROC mz_glad_glOrthofOES = NULL;
PFNGLORTHOXPROC mz_glad_glOrthox = NULL;
PFNGLPOINTPARAMETERFPROC mz_glad_glPointParameterf = NULL;
PFNGLPOINTPARAMETERFVPROC mz_glad_glPointParameterfv = NULL;
PFNGLPOINTPARAMETERXPROC mz_glad_glPointParameterx = NULL;
PFNGLPOINTPARAMETERXVPROC mz_glad_glPointParameterxv = NULL;
PFNGLPOINTSIZEXPROC mz_glad_glPointSizex = NULL;
PFNGLPOLYGONOFFSETXPROC mz_glad_glPolygonOffsetx = NULL;
PFNGLRENDERBUFFERSTORAGEOESPROC mz_glad_glRenderbufferStorageOES = NULL;
PFNGLROTATEXPROC mz_glad_glRotatex = NULL;
PFNGLSAMPLECOVERAGEPROC mz_glad_glSampleCoverage = NULL;
PFNGLSAMPLECOVERAGEXPROC mz_glad_glSampleCoveragex = NULL;
PFNGLSCALEXPROC mz_glad_glScalex = NULL;
PFNGLTEXENVXPROC mz_glad_glTexEnvx = NULL;
PFNGLTEXENVXVPROC mz_glad_glTexEnvxv = NULL;
PFNGLTEXPARAMETERXPROC mz_glad_glTexParameterx = NULL;
PFNGLTEXPARAMETERXVPROC mz_glad_glTexParameterxv = NULL;
PFNGLTRANSLATEXPROC mz_glad_glTranslatex = NULL;


static void mz_glad_gl_load_GL_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_VERSION_1_0) return;
    mz_glad_glAccum = (PFNGLACCUMPROC) load(userptr, "glAccum");
    mz_glad_glAlphaFunc = (PFNGLALPHAFUNCPROC) load(userptr, "glAlphaFunc");
    mz_glad_glBegin = (PFNGLBEGINPROC) load(userptr, "glBegin");
    mz_glad_glBitmap = (PFNGLBITMAPPROC) load(userptr, "glBitmap");
    mz_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    mz_glad_glCallList = (PFNGLCALLLISTPROC) load(userptr, "glCallList");
    mz_glad_glCallLists = (PFNGLCALLLISTSPROC) load(userptr, "glCallLists");
    mz_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    mz_glad_glClearAccum = (PFNGLCLEARACCUMPROC) load(userptr, "glClearAccum");
    mz_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    mz_glad_glClearDepth = (PFNGLCLEARDEPTHPROC) load(userptr, "glClearDepth");
    mz_glad_glClearIndex = (PFNGLCLEARINDEXPROC) load(userptr, "glClearIndex");
    mz_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    mz_glad_glClipPlane = (PFNGLCLIPPLANEPROC) load(userptr, "glClipPlane");
    mz_glad_glColor3b = (PFNGLCOLOR3BPROC) load(userptr, "glColor3b");
    mz_glad_glColor3bv = (PFNGLCOLOR3BVPROC) load(userptr, "glColor3bv");
    mz_glad_glColor3d = (PFNGLCOLOR3DPROC) load(userptr, "glColor3d");
    mz_glad_glColor3dv = (PFNGLCOLOR3DVPROC) load(userptr, "glColor3dv");
    mz_glad_glColor3f = (PFNGLCOLOR3FPROC) load(userptr, "glColor3f");
    mz_glad_glColor3fv = (PFNGLCOLOR3FVPROC) load(userptr, "glColor3fv");
    mz_glad_glColor3i = (PFNGLCOLOR3IPROC) load(userptr, "glColor3i");
    mz_glad_glColor3iv = (PFNGLCOLOR3IVPROC) load(userptr, "glColor3iv");
    mz_glad_glColor3s = (PFNGLCOLOR3SPROC) load(userptr, "glColor3s");
    mz_glad_glColor3sv = (PFNGLCOLOR3SVPROC) load(userptr, "glColor3sv");
    mz_glad_glColor3ub = (PFNGLCOLOR3UBPROC) load(userptr, "glColor3ub");
    mz_glad_glColor3ubv = (PFNGLCOLOR3UBVPROC) load(userptr, "glColor3ubv");
    mz_glad_glColor3ui = (PFNGLCOLOR3UIPROC) load(userptr, "glColor3ui");
    mz_glad_glColor3uiv = (PFNGLCOLOR3UIVPROC) load(userptr, "glColor3uiv");
    mz_glad_glColor3us = (PFNGLCOLOR3USPROC) load(userptr, "glColor3us");
    mz_glad_glColor3usv = (PFNGLCOLOR3USVPROC) load(userptr, "glColor3usv");
    mz_glad_glColor4b = (PFNGLCOLOR4BPROC) load(userptr, "glColor4b");
    mz_glad_glColor4bv = (PFNGLCOLOR4BVPROC) load(userptr, "glColor4bv");
    mz_glad_glColor4d = (PFNGLCOLOR4DPROC) load(userptr, "glColor4d");
    mz_glad_glColor4dv = (PFNGLCOLOR4DVPROC) load(userptr, "glColor4dv");
    mz_glad_glColor4f = (PFNGLCOLOR4FPROC) load(userptr, "glColor4f");
    mz_glad_glColor4fv = (PFNGLCOLOR4FVPROC) load(userptr, "glColor4fv");
    mz_glad_glColor4i = (PFNGLCOLOR4IPROC) load(userptr, "glColor4i");
    mz_glad_glColor4iv = (PFNGLCOLOR4IVPROC) load(userptr, "glColor4iv");
    mz_glad_glColor4s = (PFNGLCOLOR4SPROC) load(userptr, "glColor4s");
    mz_glad_glColor4sv = (PFNGLCOLOR4SVPROC) load(userptr, "glColor4sv");
    mz_glad_glColor4ub = (PFNGLCOLOR4UBPROC) load(userptr, "glColor4ub");
    mz_glad_glColor4ubv = (PFNGLCOLOR4UBVPROC) load(userptr, "glColor4ubv");
    mz_glad_glColor4ui = (PFNGLCOLOR4UIPROC) load(userptr, "glColor4ui");
    mz_glad_glColor4uiv = (PFNGLCOLOR4UIVPROC) load(userptr, "glColor4uiv");
    mz_glad_glColor4us = (PFNGLCOLOR4USPROC) load(userptr, "glColor4us");
    mz_glad_glColor4usv = (PFNGLCOLOR4USVPROC) load(userptr, "glColor4usv");
    mz_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    mz_glad_glColorMaterial = (PFNGLCOLORMATERIALPROC) load(userptr, "glColorMaterial");
    mz_glad_glCopyPixels = (PFNGLCOPYPIXELSPROC) load(userptr, "glCopyPixels");
    mz_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    mz_glad_glDeleteLists = (PFNGLDELETELISTSPROC) load(userptr, "glDeleteLists");
    mz_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    mz_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    mz_glad_glDepthRange = (PFNGLDEPTHRANGEPROC) load(userptr, "glDepthRange");
    mz_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    mz_glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC) load(userptr, "glDrawBuffer");
    mz_glad_glDrawPixels = (PFNGLDRAWPIXELSPROC) load(userptr, "glDrawPixels");
    mz_glad_glEdgeFlag = (PFNGLEDGEFLAGPROC) load(userptr, "glEdgeFlag");
    mz_glad_glEdgeFlagv = (PFNGLEDGEFLAGVPROC) load(userptr, "glEdgeFlagv");
    mz_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    mz_glad_glEnd = (PFNGLENDPROC) load(userptr, "glEnd");
    mz_glad_glEndList = (PFNGLENDLISTPROC) load(userptr, "glEndList");
    mz_glad_glEvalCoord1d = (PFNGLEVALCOORD1DPROC) load(userptr, "glEvalCoord1d");
    mz_glad_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC) load(userptr, "glEvalCoord1dv");
    mz_glad_glEvalCoord1f = (PFNGLEVALCOORD1FPROC) load(userptr, "glEvalCoord1f");
    mz_glad_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC) load(userptr, "glEvalCoord1fv");
    mz_glad_glEvalCoord2d = (PFNGLEVALCOORD2DPROC) load(userptr, "glEvalCoord2d");
    mz_glad_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC) load(userptr, "glEvalCoord2dv");
    mz_glad_glEvalCoord2f = (PFNGLEVALCOORD2FPROC) load(userptr, "glEvalCoord2f");
    mz_glad_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC) load(userptr, "glEvalCoord2fv");
    mz_glad_glEvalMesh1 = (PFNGLEVALMESH1PROC) load(userptr, "glEvalMesh1");
    mz_glad_glEvalMesh2 = (PFNGLEVALMESH2PROC) load(userptr, "glEvalMesh2");
    mz_glad_glEvalPoint1 = (PFNGLEVALPOINT1PROC) load(userptr, "glEvalPoint1");
    mz_glad_glEvalPoint2 = (PFNGLEVALPOINT2PROC) load(userptr, "glEvalPoint2");
    mz_glad_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC) load(userptr, "glFeedbackBuffer");
    mz_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    mz_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    mz_glad_glFogf = (PFNGLFOGFPROC) load(userptr, "glFogf");
    mz_glad_glFogfv = (PFNGLFOGFVPROC) load(userptr, "glFogfv");
    mz_glad_glFogi = (PFNGLFOGIPROC) load(userptr, "glFogi");
    mz_glad_glFogiv = (PFNGLFOGIVPROC) load(userptr, "glFogiv");
    mz_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    mz_glad_glFrustum = (PFNGLFRUSTUMPROC) load(userptr, "glFrustum");
    mz_glad_glGenLists = (PFNGLGENLISTSPROC) load(userptr, "glGenLists");
    mz_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    mz_glad_glGetClipPlane = (PFNGLGETCLIPPLANEPROC) load(userptr, "glGetClipPlane");
    mz_glad_glGetDoublev = (PFNGLGETDOUBLEVPROC) load(userptr, "glGetDoublev");
    mz_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    mz_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    mz_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    mz_glad_glGetLightfv = (PFNGLGETLIGHTFVPROC) load(userptr, "glGetLightfv");
    mz_glad_glGetLightiv = (PFNGLGETLIGHTIVPROC) load(userptr, "glGetLightiv");
    mz_glad_glGetMapdv = (PFNGLGETMAPDVPROC) load(userptr, "glGetMapdv");
    mz_glad_glGetMapfv = (PFNGLGETMAPFVPROC) load(userptr, "glGetMapfv");
    mz_glad_glGetMapiv = (PFNGLGETMAPIVPROC) load(userptr, "glGetMapiv");
    mz_glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC) load(userptr, "glGetMaterialfv");
    mz_glad_glGetMaterialiv = (PFNGLGETMATERIALIVPROC) load(userptr, "glGetMaterialiv");
    mz_glad_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC) load(userptr, "glGetPixelMapfv");
    mz_glad_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC) load(userptr, "glGetPixelMapuiv");
    mz_glad_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC) load(userptr, "glGetPixelMapusv");
    mz_glad_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC) load(userptr, "glGetPolygonStipple");
    mz_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    mz_glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) load(userptr, "glGetTexEnvfv");
    mz_glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC) load(userptr, "glGetTexEnviv");
    mz_glad_glGetTexGendv = (PFNGLGETTEXGENDVPROC) load(userptr, "glGetTexGendv");
    mz_glad_glGetTexGenfv = (PFNGLGETTEXGENFVPROC) load(userptr, "glGetTexGenfv");
    mz_glad_glGetTexGeniv = (PFNGLGETTEXGENIVPROC) load(userptr, "glGetTexGeniv");
    mz_glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC) load(userptr, "glGetTexImage");
    mz_glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load(userptr, "glGetTexLevelParameterfv");
    mz_glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load(userptr, "glGetTexLevelParameteriv");
    mz_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    mz_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    mz_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    mz_glad_glIndexMask = (PFNGLINDEXMASKPROC) load(userptr, "glIndexMask");
    mz_glad_glIndexd = (PFNGLINDEXDPROC) load(userptr, "glIndexd");
    mz_glad_glIndexdv = (PFNGLINDEXDVPROC) load(userptr, "glIndexdv");
    mz_glad_glIndexf = (PFNGLINDEXFPROC) load(userptr, "glIndexf");
    mz_glad_glIndexfv = (PFNGLINDEXFVPROC) load(userptr, "glIndexfv");
    mz_glad_glIndexi = (PFNGLINDEXIPROC) load(userptr, "glIndexi");
    mz_glad_glIndexiv = (PFNGLINDEXIVPROC) load(userptr, "glIndexiv");
    mz_glad_glIndexs = (PFNGLINDEXSPROC) load(userptr, "glIndexs");
    mz_glad_glIndexsv = (PFNGLINDEXSVPROC) load(userptr, "glIndexsv");
    mz_glad_glInitNames = (PFNGLINITNAMESPROC) load(userptr, "glInitNames");
    mz_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    mz_glad_glIsList = (PFNGLISLISTPROC) load(userptr, "glIsList");
    mz_glad_glLightModelf = (PFNGLLIGHTMODELFPROC) load(userptr, "glLightModelf");
    mz_glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC) load(userptr, "glLightModelfv");
    mz_glad_glLightModeli = (PFNGLLIGHTMODELIPROC) load(userptr, "glLightModeli");
    mz_glad_glLightModeliv = (PFNGLLIGHTMODELIVPROC) load(userptr, "glLightModeliv");
    mz_glad_glLightf = (PFNGLLIGHTFPROC) load(userptr, "glLightf");
    mz_glad_glLightfv = (PFNGLLIGHTFVPROC) load(userptr, "glLightfv");
    mz_glad_glLighti = (PFNGLLIGHTIPROC) load(userptr, "glLighti");
    mz_glad_glLightiv = (PFNGLLIGHTIVPROC) load(userptr, "glLightiv");
    mz_glad_glLineStipple = (PFNGLLINESTIPPLEPROC) load(userptr, "glLineStipple");
    mz_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    mz_glad_glListBase = (PFNGLLISTBASEPROC) load(userptr, "glListBase");
    mz_glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC) load(userptr, "glLoadIdentity");
    mz_glad_glLoadMatrixd = (PFNGLLOADMATRIXDPROC) load(userptr, "glLoadMatrixd");
    mz_glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC) load(userptr, "glLoadMatrixf");
    mz_glad_glLoadName = (PFNGLLOADNAMEPROC) load(userptr, "glLoadName");
    mz_glad_glLogicOp = (PFNGLLOGICOPPROC) load(userptr, "glLogicOp");
    mz_glad_glMap1d = (PFNGLMAP1DPROC) load(userptr, "glMap1d");
    mz_glad_glMap1f = (PFNGLMAP1FPROC) load(userptr, "glMap1f");
    mz_glad_glMap2d = (PFNGLMAP2DPROC) load(userptr, "glMap2d");
    mz_glad_glMap2f = (PFNGLMAP2FPROC) load(userptr, "glMap2f");
    mz_glad_glMapGrid1d = (PFNGLMAPGRID1DPROC) load(userptr, "glMapGrid1d");
    mz_glad_glMapGrid1f = (PFNGLMAPGRID1FPROC) load(userptr, "glMapGrid1f");
    mz_glad_glMapGrid2d = (PFNGLMAPGRID2DPROC) load(userptr, "glMapGrid2d");
    mz_glad_glMapGrid2f = (PFNGLMAPGRID2FPROC) load(userptr, "glMapGrid2f");
    mz_glad_glMaterialf = (PFNGLMATERIALFPROC) load(userptr, "glMaterialf");
    mz_glad_glMaterialfv = (PFNGLMATERIALFVPROC) load(userptr, "glMaterialfv");
    mz_glad_glMateriali = (PFNGLMATERIALIPROC) load(userptr, "glMateriali");
    mz_glad_glMaterialiv = (PFNGLMATERIALIVPROC) load(userptr, "glMaterialiv");
    mz_glad_glMatrixMode = (PFNGLMATRIXMODEPROC) load(userptr, "glMatrixMode");
    mz_glad_glMultMatrixd = (PFNGLMULTMATRIXDPROC) load(userptr, "glMultMatrixd");
    mz_glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC) load(userptr, "glMultMatrixf");
    mz_glad_glNewList = (PFNGLNEWLISTPROC) load(userptr, "glNewList");
    mz_glad_glNormal3b = (PFNGLNORMAL3BPROC) load(userptr, "glNormal3b");
    mz_glad_glNormal3bv = (PFNGLNORMAL3BVPROC) load(userptr, "glNormal3bv");
    mz_glad_glNormal3d = (PFNGLNORMAL3DPROC) load(userptr, "glNormal3d");
    mz_glad_glNormal3dv = (PFNGLNORMAL3DVPROC) load(userptr, "glNormal3dv");
    mz_glad_glNormal3f = (PFNGLNORMAL3FPROC) load(userptr, "glNormal3f");
    mz_glad_glNormal3fv = (PFNGLNORMAL3FVPROC) load(userptr, "glNormal3fv");
    mz_glad_glNormal3i = (PFNGLNORMAL3IPROC) load(userptr, "glNormal3i");
    mz_glad_glNormal3iv = (PFNGLNORMAL3IVPROC) load(userptr, "glNormal3iv");
    mz_glad_glNormal3s = (PFNGLNORMAL3SPROC) load(userptr, "glNormal3s");
    mz_glad_glNormal3sv = (PFNGLNORMAL3SVPROC) load(userptr, "glNormal3sv");
    mz_glad_glOrtho = (PFNGLORTHOPROC) load(userptr, "glOrtho");
    mz_glad_glPassThrough = (PFNGLPASSTHROUGHPROC) load(userptr, "glPassThrough");
    mz_glad_glPixelMapfv = (PFNGLPIXELMAPFVPROC) load(userptr, "glPixelMapfv");
    mz_glad_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC) load(userptr, "glPixelMapuiv");
    mz_glad_glPixelMapusv = (PFNGLPIXELMAPUSVPROC) load(userptr, "glPixelMapusv");
    mz_glad_glPixelStoref = (PFNGLPIXELSTOREFPROC) load(userptr, "glPixelStoref");
    mz_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    mz_glad_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC) load(userptr, "glPixelTransferf");
    mz_glad_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC) load(userptr, "glPixelTransferi");
    mz_glad_glPixelZoom = (PFNGLPIXELZOOMPROC) load(userptr, "glPixelZoom");
    mz_glad_glPointSize = (PFNGLPOINTSIZEPROC) load(userptr, "glPointSize");
    mz_glad_glPolygonMode = (PFNGLPOLYGONMODEPROC) load(userptr, "glPolygonMode");
    mz_glad_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC) load(userptr, "glPolygonStipple");
    mz_glad_glPopAttrib = (PFNGLPOPATTRIBPROC) load(userptr, "glPopAttrib");
    mz_glad_glPopMatrix = (PFNGLPOPMATRIXPROC) load(userptr, "glPopMatrix");
    mz_glad_glPopName = (PFNGLPOPNAMEPROC) load(userptr, "glPopName");
    mz_glad_glPushAttrib = (PFNGLPUSHATTRIBPROC) load(userptr, "glPushAttrib");
    mz_glad_glPushMatrix = (PFNGLPUSHMATRIXPROC) load(userptr, "glPushMatrix");
    mz_glad_glPushName = (PFNGLPUSHNAMEPROC) load(userptr, "glPushName");
    mz_glad_glRasterPos2d = (PFNGLRASTERPOS2DPROC) load(userptr, "glRasterPos2d");
    mz_glad_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC) load(userptr, "glRasterPos2dv");
    mz_glad_glRasterPos2f = (PFNGLRASTERPOS2FPROC) load(userptr, "glRasterPos2f");
    mz_glad_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC) load(userptr, "glRasterPos2fv");
    mz_glad_glRasterPos2i = (PFNGLRASTERPOS2IPROC) load(userptr, "glRasterPos2i");
    mz_glad_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC) load(userptr, "glRasterPos2iv");
    mz_glad_glRasterPos2s = (PFNGLRASTERPOS2SPROC) load(userptr, "glRasterPos2s");
    mz_glad_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC) load(userptr, "glRasterPos2sv");
    mz_glad_glRasterPos3d = (PFNGLRASTERPOS3DPROC) load(userptr, "glRasterPos3d");
    mz_glad_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC) load(userptr, "glRasterPos3dv");
    mz_glad_glRasterPos3f = (PFNGLRASTERPOS3FPROC) load(userptr, "glRasterPos3f");
    mz_glad_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC) load(userptr, "glRasterPos3fv");
    mz_glad_glRasterPos3i = (PFNGLRASTERPOS3IPROC) load(userptr, "glRasterPos3i");
    mz_glad_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC) load(userptr, "glRasterPos3iv");
    mz_glad_glRasterPos3s = (PFNGLRASTERPOS3SPROC) load(userptr, "glRasterPos3s");
    mz_glad_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC) load(userptr, "glRasterPos3sv");
    mz_glad_glRasterPos4d = (PFNGLRASTERPOS4DPROC) load(userptr, "glRasterPos4d");
    mz_glad_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC) load(userptr, "glRasterPos4dv");
    mz_glad_glRasterPos4f = (PFNGLRASTERPOS4FPROC) load(userptr, "glRasterPos4f");
    mz_glad_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC) load(userptr, "glRasterPos4fv");
    mz_glad_glRasterPos4i = (PFNGLRASTERPOS4IPROC) load(userptr, "glRasterPos4i");
    mz_glad_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC) load(userptr, "glRasterPos4iv");
    mz_glad_glRasterPos4s = (PFNGLRASTERPOS4SPROC) load(userptr, "glRasterPos4s");
    mz_glad_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC) load(userptr, "glRasterPos4sv");
    mz_glad_glReadBuffer = (PFNGLREADBUFFERPROC) load(userptr, "glReadBuffer");
    mz_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    mz_glad_glRectd = (PFNGLRECTDPROC) load(userptr, "glRectd");
    mz_glad_glRectdv = (PFNGLRECTDVPROC) load(userptr, "glRectdv");
    mz_glad_glRectf = (PFNGLRECTFPROC) load(userptr, "glRectf");
    mz_glad_glRectfv = (PFNGLRECTFVPROC) load(userptr, "glRectfv");
    mz_glad_glRecti = (PFNGLRECTIPROC) load(userptr, "glRecti");
    mz_glad_glRectiv = (PFNGLRECTIVPROC) load(userptr, "glRectiv");
    mz_glad_glRects = (PFNGLRECTSPROC) load(userptr, "glRects");
    mz_glad_glRectsv = (PFNGLRECTSVPROC) load(userptr, "glRectsv");
    mz_glad_glRenderMode = (PFNGLRENDERMODEPROC) load(userptr, "glRenderMode");
    mz_glad_glRotated = (PFNGLROTATEDPROC) load(userptr, "glRotated");
    mz_glad_glRotatef = (PFNGLROTATEFPROC) load(userptr, "glRotatef");
    mz_glad_glScaled = (PFNGLSCALEDPROC) load(userptr, "glScaled");
    mz_glad_glScalef = (PFNGLSCALEFPROC) load(userptr, "glScalef");
    mz_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    mz_glad_glSelectBuffer = (PFNGLSELECTBUFFERPROC) load(userptr, "glSelectBuffer");
    mz_glad_glShadeModel = (PFNGLSHADEMODELPROC) load(userptr, "glShadeModel");
    mz_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    mz_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    mz_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    mz_glad_glTexCoord1d = (PFNGLTEXCOORD1DPROC) load(userptr, "glTexCoord1d");
    mz_glad_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC) load(userptr, "glTexCoord1dv");
    mz_glad_glTexCoord1f = (PFNGLTEXCOORD1FPROC) load(userptr, "glTexCoord1f");
    mz_glad_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC) load(userptr, "glTexCoord1fv");
    mz_glad_glTexCoord1i = (PFNGLTEXCOORD1IPROC) load(userptr, "glTexCoord1i");
    mz_glad_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC) load(userptr, "glTexCoord1iv");
    mz_glad_glTexCoord1s = (PFNGLTEXCOORD1SPROC) load(userptr, "glTexCoord1s");
    mz_glad_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC) load(userptr, "glTexCoord1sv");
    mz_glad_glTexCoord2d = (PFNGLTEXCOORD2DPROC) load(userptr, "glTexCoord2d");
    mz_glad_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC) load(userptr, "glTexCoord2dv");
    mz_glad_glTexCoord2f = (PFNGLTEXCOORD2FPROC) load(userptr, "glTexCoord2f");
    mz_glad_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC) load(userptr, "glTexCoord2fv");
    mz_glad_glTexCoord2i = (PFNGLTEXCOORD2IPROC) load(userptr, "glTexCoord2i");
    mz_glad_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC) load(userptr, "glTexCoord2iv");
    mz_glad_glTexCoord2s = (PFNGLTEXCOORD2SPROC) load(userptr, "glTexCoord2s");
    mz_glad_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC) load(userptr, "glTexCoord2sv");
    mz_glad_glTexCoord3d = (PFNGLTEXCOORD3DPROC) load(userptr, "glTexCoord3d");
    mz_glad_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC) load(userptr, "glTexCoord3dv");
    mz_glad_glTexCoord3f = (PFNGLTEXCOORD3FPROC) load(userptr, "glTexCoord3f");
    mz_glad_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC) load(userptr, "glTexCoord3fv");
    mz_glad_glTexCoord3i = (PFNGLTEXCOORD3IPROC) load(userptr, "glTexCoord3i");
    mz_glad_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC) load(userptr, "glTexCoord3iv");
    mz_glad_glTexCoord3s = (PFNGLTEXCOORD3SPROC) load(userptr, "glTexCoord3s");
    mz_glad_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC) load(userptr, "glTexCoord3sv");
    mz_glad_glTexCoord4d = (PFNGLTEXCOORD4DPROC) load(userptr, "glTexCoord4d");
    mz_glad_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC) load(userptr, "glTexCoord4dv");
    mz_glad_glTexCoord4f = (PFNGLTEXCOORD4FPROC) load(userptr, "glTexCoord4f");
    mz_glad_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC) load(userptr, "glTexCoord4fv");
    mz_glad_glTexCoord4i = (PFNGLTEXCOORD4IPROC) load(userptr, "glTexCoord4i");
    mz_glad_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC) load(userptr, "glTexCoord4iv");
    mz_glad_glTexCoord4s = (PFNGLTEXCOORD4SPROC) load(userptr, "glTexCoord4s");
    mz_glad_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC) load(userptr, "glTexCoord4sv");
    mz_glad_glTexEnvf = (PFNGLTEXENVFPROC) load(userptr, "glTexEnvf");
    mz_glad_glTexEnvfv = (PFNGLTEXENVFVPROC) load(userptr, "glTexEnvfv");
    mz_glad_glTexEnvi = (PFNGLTEXENVIPROC) load(userptr, "glTexEnvi");
    mz_glad_glTexEnviv = (PFNGLTEXENVIVPROC) load(userptr, "glTexEnviv");
    mz_glad_glTexGend = (PFNGLTEXGENDPROC) load(userptr, "glTexGend");
    mz_glad_glTexGendv = (PFNGLTEXGENDVPROC) load(userptr, "glTexGendv");
    mz_glad_glTexGenf = (PFNGLTEXGENFPROC) load(userptr, "glTexGenf");
    mz_glad_glTexGenfv = (PFNGLTEXGENFVPROC) load(userptr, "glTexGenfv");
    mz_glad_glTexGeni = (PFNGLTEXGENIPROC) load(userptr, "glTexGeni");
    mz_glad_glTexGeniv = (PFNGLTEXGENIVPROC) load(userptr, "glTexGeniv");
    mz_glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC) load(userptr, "glTexImage1D");
    mz_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    mz_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    mz_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    mz_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    mz_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    mz_glad_glTranslated = (PFNGLTRANSLATEDPROC) load(userptr, "glTranslated");
    mz_glad_glTranslatef = (PFNGLTRANSLATEFPROC) load(userptr, "glTranslatef");
    mz_glad_glVertex2d = (PFNGLVERTEX2DPROC) load(userptr, "glVertex2d");
    mz_glad_glVertex2dv = (PFNGLVERTEX2DVPROC) load(userptr, "glVertex2dv");
    mz_glad_glVertex2f = (PFNGLVERTEX2FPROC) load(userptr, "glVertex2f");
    mz_glad_glVertex2fv = (PFNGLVERTEX2FVPROC) load(userptr, "glVertex2fv");
    mz_glad_glVertex2i = (PFNGLVERTEX2IPROC) load(userptr, "glVertex2i");
    mz_glad_glVertex2iv = (PFNGLVERTEX2IVPROC) load(userptr, "glVertex2iv");
    mz_glad_glVertex2s = (PFNGLVERTEX2SPROC) load(userptr, "glVertex2s");
    mz_glad_glVertex2sv = (PFNGLVERTEX2SVPROC) load(userptr, "glVertex2sv");
    mz_glad_glVertex3d = (PFNGLVERTEX3DPROC) load(userptr, "glVertex3d");
    mz_glad_glVertex3dv = (PFNGLVERTEX3DVPROC) load(userptr, "glVertex3dv");
    mz_glad_glVertex3f = (PFNGLVERTEX3FPROC) load(userptr, "glVertex3f");
    mz_glad_glVertex3fv = (PFNGLVERTEX3FVPROC) load(userptr, "glVertex3fv");
    mz_glad_glVertex3i = (PFNGLVERTEX3IPROC) load(userptr, "glVertex3i");
    mz_glad_glVertex3iv = (PFNGLVERTEX3IVPROC) load(userptr, "glVertex3iv");
    mz_glad_glVertex3s = (PFNGLVERTEX3SPROC) load(userptr, "glVertex3s");
    mz_glad_glVertex3sv = (PFNGLVERTEX3SVPROC) load(userptr, "glVertex3sv");
    mz_glad_glVertex4d = (PFNGLVERTEX4DPROC) load(userptr, "glVertex4d");
    mz_glad_glVertex4dv = (PFNGLVERTEX4DVPROC) load(userptr, "glVertex4dv");
    mz_glad_glVertex4f = (PFNGLVERTEX4FPROC) load(userptr, "glVertex4f");
    mz_glad_glVertex4fv = (PFNGLVERTEX4FVPROC) load(userptr, "glVertex4fv");
    mz_glad_glVertex4i = (PFNGLVERTEX4IPROC) load(userptr, "glVertex4i");
    mz_glad_glVertex4iv = (PFNGLVERTEX4IVPROC) load(userptr, "glVertex4iv");
    mz_glad_glVertex4s = (PFNGLVERTEX4SPROC) load(userptr, "glVertex4s");
    mz_glad_glVertex4sv = (PFNGLVERTEX4SVPROC) load(userptr, "glVertex4sv");
    mz_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void mz_glad_gl_load_GL_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_VERSION_1_1) return;
    mz_glad_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC) load(userptr, "glAreTexturesResident");
    mz_glad_glArrayElement = (PFNGLARRAYELEMENTPROC) load(userptr, "glArrayElement");
    mz_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    mz_glad_glColorPointer = (PFNGLCOLORPOINTERPROC) load(userptr, "glColorPointer");
    mz_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load(userptr, "glCopyTexImage1D");
    mz_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    mz_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load(userptr, "glCopyTexSubImage1D");
    mz_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    mz_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    mz_glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) load(userptr, "glDisableClientState");
    mz_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    mz_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    mz_glad_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC) load(userptr, "glEdgeFlagPointer");
    mz_glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) load(userptr, "glEnableClientState");
    mz_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    mz_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    mz_glad_glIndexPointer = (PFNGLINDEXPOINTERPROC) load(userptr, "glIndexPointer");
    mz_glad_glIndexub = (PFNGLINDEXUBPROC) load(userptr, "glIndexub");
    mz_glad_glIndexubv = (PFNGLINDEXUBVPROC) load(userptr, "glIndexubv");
    mz_glad_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC) load(userptr, "glInterleavedArrays");
    mz_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    mz_glad_glNormalPointer = (PFNGLNORMALPOINTERPROC) load(userptr, "glNormalPointer");
    mz_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    mz_glad_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC) load(userptr, "glPopClientAttrib");
    mz_glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) load(userptr, "glPrioritizeTextures");
    mz_glad_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC) load(userptr, "glPushClientAttrib");
    mz_glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) load(userptr, "glTexCoordPointer");
    mz_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load(userptr, "glTexSubImage1D");
    mz_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    mz_glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC) load(userptr, "glVertexPointer");
}
static void mz_glad_gl_load_GL_VERSION_ES_CM_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_VERSION_ES_CM_1_0) return;
    mz_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    mz_glad_glAlphaFunc = (PFNGLALPHAFUNCPROC) load(userptr, "glAlphaFunc");
    mz_glad_glAlphaFuncx = (PFNGLALPHAFUNCXPROC) load(userptr, "glAlphaFuncx");
    mz_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    mz_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    mz_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    mz_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    mz_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    mz_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    mz_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    mz_glad_glClearColorx = (PFNGLCLEARCOLORXPROC) load(userptr, "glClearColorx");
    mz_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    mz_glad_glClearDepthx = (PFNGLCLEARDEPTHXPROC) load(userptr, "glClearDepthx");
    mz_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    mz_glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) load(userptr, "glClientActiveTexture");
    mz_glad_glClipPlanef = (PFNGLCLIPPLANEFPROC) load(userptr, "glClipPlanef");
    mz_glad_glClipPlanex = (PFNGLCLIPPLANEXPROC) load(userptr, "glClipPlanex");
    mz_glad_glColor4f = (PFNGLCOLOR4FPROC) load(userptr, "glColor4f");
    mz_glad_glColor4ub = (PFNGLCOLOR4UBPROC) load(userptr, "glColor4ub");
    mz_glad_glColor4x = (PFNGLCOLOR4XPROC) load(userptr, "glColor4x");
    mz_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    mz_glad_glColorPointer = (PFNGLCOLORPOINTERPROC) load(userptr, "glColorPointer");
    mz_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    mz_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    mz_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    mz_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    mz_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    mz_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    mz_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    mz_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    mz_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    mz_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    mz_glad_glDepthRangex = (PFNGLDEPTHRANGEXPROC) load(userptr, "glDepthRangex");
    mz_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    mz_glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) load(userptr, "glDisableClientState");
    mz_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    mz_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    mz_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    mz_glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) load(userptr, "glEnableClientState");
    mz_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    mz_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    mz_glad_glFogf = (PFNGLFOGFPROC) load(userptr, "glFogf");
    mz_glad_glFogfv = (PFNGLFOGFVPROC) load(userptr, "glFogfv");
    mz_glad_glFogx = (PFNGLFOGXPROC) load(userptr, "glFogx");
    mz_glad_glFogxv = (PFNGLFOGXVPROC) load(userptr, "glFogxv");
    mz_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    mz_glad_glFrustumf = (PFNGLFRUSTUMFPROC) load(userptr, "glFrustumf");
    mz_glad_glFrustumx = (PFNGLFRUSTUMXPROC) load(userptr, "glFrustumx");
    mz_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    mz_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    mz_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    mz_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    mz_glad_glGetClipPlanef = (PFNGLGETCLIPPLANEFPROC) load(userptr, "glGetClipPlanef");
    mz_glad_glGetClipPlanex = (PFNGLGETCLIPPLANEXPROC) load(userptr, "glGetClipPlanex");
    mz_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    mz_glad_glGetFixedv = (PFNGLGETFIXEDVPROC) load(userptr, "glGetFixedv");
    mz_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    mz_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    mz_glad_glGetLightfv = (PFNGLGETLIGHTFVPROC) load(userptr, "glGetLightfv");
    mz_glad_glGetLightxv = (PFNGLGETLIGHTXVPROC) load(userptr, "glGetLightxv");
    mz_glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC) load(userptr, "glGetMaterialfv");
    mz_glad_glGetMaterialxv = (PFNGLGETMATERIALXVPROC) load(userptr, "glGetMaterialxv");
    mz_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    mz_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    mz_glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) load(userptr, "glGetTexEnvfv");
    mz_glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC) load(userptr, "glGetTexEnviv");
    mz_glad_glGetTexEnvxv = (PFNGLGETTEXENVXVPROC) load(userptr, "glGetTexEnvxv");
    mz_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    mz_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    mz_glad_glGetTexParameterxv = (PFNGLGETTEXPARAMETERXVPROC) load(userptr, "glGetTexParameterxv");
    mz_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    mz_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    mz_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    mz_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    mz_glad_glLightModelf = (PFNGLLIGHTMODELFPROC) load(userptr, "glLightModelf");
    mz_glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC) load(userptr, "glLightModelfv");
    mz_glad_glLightModelx = (PFNGLLIGHTMODELXPROC) load(userptr, "glLightModelx");
    mz_glad_glLightModelxv = (PFNGLLIGHTMODELXVPROC) load(userptr, "glLightModelxv");
    mz_glad_glLightf = (PFNGLLIGHTFPROC) load(userptr, "glLightf");
    mz_glad_glLightfv = (PFNGLLIGHTFVPROC) load(userptr, "glLightfv");
    mz_glad_glLightx = (PFNGLLIGHTXPROC) load(userptr, "glLightx");
    mz_glad_glLightxv = (PFNGLLIGHTXVPROC) load(userptr, "glLightxv");
    mz_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    mz_glad_glLineWidthx = (PFNGLLINEWIDTHXPROC) load(userptr, "glLineWidthx");
    mz_glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC) load(userptr, "glLoadIdentity");
    mz_glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC) load(userptr, "glLoadMatrixf");
    mz_glad_glLoadMatrixx = (PFNGLLOADMATRIXXPROC) load(userptr, "glLoadMatrixx");
    mz_glad_glLogicOp = (PFNGLLOGICOPPROC) load(userptr, "glLogicOp");
    mz_glad_glMaterialf = (PFNGLMATERIALFPROC) load(userptr, "glMaterialf");
    mz_glad_glMaterialfv = (PFNGLMATERIALFVPROC) load(userptr, "glMaterialfv");
    mz_glad_glMaterialx = (PFNGLMATERIALXPROC) load(userptr, "glMaterialx");
    mz_glad_glMaterialxv = (PFNGLMATERIALXVPROC) load(userptr, "glMaterialxv");
    mz_glad_glMatrixMode = (PFNGLMATRIXMODEPROC) load(userptr, "glMatrixMode");
    mz_glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC) load(userptr, "glMultMatrixf");
    mz_glad_glMultMatrixx = (PFNGLMULTMATRIXXPROC) load(userptr, "glMultMatrixx");
    mz_glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) load(userptr, "glMultiTexCoord4f");
    mz_glad_glMultiTexCoord4x = (PFNGLMULTITEXCOORD4XPROC) load(userptr, "glMultiTexCoord4x");
    mz_glad_glNormal3f = (PFNGLNORMAL3FPROC) load(userptr, "glNormal3f");
    mz_glad_glNormal3x = (PFNGLNORMAL3XPROC) load(userptr, "glNormal3x");
    mz_glad_glNormalPointer = (PFNGLNORMALPOINTERPROC) load(userptr, "glNormalPointer");
    mz_glad_glOrthof = (PFNGLORTHOFPROC) load(userptr, "glOrthof");
    mz_glad_glOrthox = (PFNGLORTHOXPROC) load(userptr, "glOrthox");
    mz_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    mz_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC) load(userptr, "glPointParameterf");
    mz_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load(userptr, "glPointParameterfv");
    mz_glad_glPointParameterx = (PFNGLPOINTPARAMETERXPROC) load(userptr, "glPointParameterx");
    mz_glad_glPointParameterxv = (PFNGLPOINTPARAMETERXVPROC) load(userptr, "glPointParameterxv");
    mz_glad_glPointSize = (PFNGLPOINTSIZEPROC) load(userptr, "glPointSize");
    mz_glad_glPointSizex = (PFNGLPOINTSIZEXPROC) load(userptr, "glPointSizex");
    mz_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    mz_glad_glPolygonOffsetx = (PFNGLPOLYGONOFFSETXPROC) load(userptr, "glPolygonOffsetx");
    mz_glad_glPopMatrix = (PFNGLPOPMATRIXPROC) load(userptr, "glPopMatrix");
    mz_glad_glPushMatrix = (PFNGLPUSHMATRIXPROC) load(userptr, "glPushMatrix");
    mz_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    mz_glad_glRotatef = (PFNGLROTATEFPROC) load(userptr, "glRotatef");
    mz_glad_glRotatex = (PFNGLROTATEXPROC) load(userptr, "glRotatex");
    mz_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
    mz_glad_glSampleCoveragex = (PFNGLSAMPLECOVERAGEXPROC) load(userptr, "glSampleCoveragex");
    mz_glad_glScalef = (PFNGLSCALEFPROC) load(userptr, "glScalef");
    mz_glad_glScalex = (PFNGLSCALEXPROC) load(userptr, "glScalex");
    mz_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    mz_glad_glShadeModel = (PFNGLSHADEMODELPROC) load(userptr, "glShadeModel");
    mz_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    mz_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    mz_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    mz_glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) load(userptr, "glTexCoordPointer");
    mz_glad_glTexEnvf = (PFNGLTEXENVFPROC) load(userptr, "glTexEnvf");
    mz_glad_glTexEnvfv = (PFNGLTEXENVFVPROC) load(userptr, "glTexEnvfv");
    mz_glad_glTexEnvi = (PFNGLTEXENVIPROC) load(userptr, "glTexEnvi");
    mz_glad_glTexEnviv = (PFNGLTEXENVIVPROC) load(userptr, "glTexEnviv");
    mz_glad_glTexEnvx = (PFNGLTEXENVXPROC) load(userptr, "glTexEnvx");
    mz_glad_glTexEnvxv = (PFNGLTEXENVXVPROC) load(userptr, "glTexEnvxv");
    mz_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    mz_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    mz_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    mz_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    mz_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    mz_glad_glTexParameterx = (PFNGLTEXPARAMETERXPROC) load(userptr, "glTexParameterx");
    mz_glad_glTexParameterxv = (PFNGLTEXPARAMETERXVPROC) load(userptr, "glTexParameterxv");
    mz_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    mz_glad_glTranslatef = (PFNGLTRANSLATEFPROC) load(userptr, "glTranslatef");
    mz_glad_glTranslatex = (PFNGLTRANSLATEXPROC) load(userptr, "glTranslatex");
    mz_glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC) load(userptr, "glVertexPointer");
    mz_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void mz_glad_gl_load_GL_ARB_copy_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_copy_buffer) return;
    mz_glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
}
static void mz_glad_gl_load_GL_ARB_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_framebuffer_object) return;
    mz_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    mz_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    mz_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    mz_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    mz_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    mz_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    mz_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    mz_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    mz_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    mz_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    mz_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    mz_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    mz_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    mz_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    mz_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    mz_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    mz_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    mz_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    mz_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    mz_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
}
static void mz_glad_gl_load_GL_ARB_geometry_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_geometry_shader4) return;
    mz_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    mz_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC) load(userptr, "glFramebufferTextureARB");
    mz_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) load(userptr, "glFramebufferTextureFaceARB");
    mz_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    mz_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) load(userptr, "glFramebufferTextureLayerARB");
    mz_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    mz_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC) load(userptr, "glProgramParameteriARB");
}
static void mz_glad_gl_load_GL_ARB_get_program_binary( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_get_program_binary) return;
    mz_glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    mz_glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    mz_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
}
static void mz_glad_gl_load_GL_ARB_imaging( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_imaging) return;
    mz_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    mz_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    mz_glad_glColorSubTable = (PFNGLCOLORSUBTABLEPROC) load(userptr, "glColorSubTable");
    mz_glad_glColorTable = (PFNGLCOLORTABLEPROC) load(userptr, "glColorTable");
    mz_glad_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC) load(userptr, "glColorTableParameterfv");
    mz_glad_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC) load(userptr, "glColorTableParameteriv");
    mz_glad_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC) load(userptr, "glConvolutionFilter1D");
    mz_glad_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC) load(userptr, "glConvolutionFilter2D");
    mz_glad_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC) load(userptr, "glConvolutionParameterf");
    mz_glad_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC) load(userptr, "glConvolutionParameterfv");
    mz_glad_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC) load(userptr, "glConvolutionParameteri");
    mz_glad_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC) load(userptr, "glConvolutionParameteriv");
    mz_glad_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC) load(userptr, "glCopyColorSubTable");
    mz_glad_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC) load(userptr, "glCopyColorTable");
    mz_glad_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC) load(userptr, "glCopyConvolutionFilter1D");
    mz_glad_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC) load(userptr, "glCopyConvolutionFilter2D");
    mz_glad_glGetColorTable = (PFNGLGETCOLORTABLEPROC) load(userptr, "glGetColorTable");
    mz_glad_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC) load(userptr, "glGetColorTableParameterfv");
    mz_glad_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC) load(userptr, "glGetColorTableParameteriv");
    mz_glad_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC) load(userptr, "glGetConvolutionFilter");
    mz_glad_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC) load(userptr, "glGetConvolutionParameterfv");
    mz_glad_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC) load(userptr, "glGetConvolutionParameteriv");
    mz_glad_glGetHistogram = (PFNGLGETHISTOGRAMPROC) load(userptr, "glGetHistogram");
    mz_glad_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC) load(userptr, "glGetHistogramParameterfv");
    mz_glad_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC) load(userptr, "glGetHistogramParameteriv");
    mz_glad_glGetMinmax = (PFNGLGETMINMAXPROC) load(userptr, "glGetMinmax");
    mz_glad_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC) load(userptr, "glGetMinmaxParameterfv");
    mz_glad_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC) load(userptr, "glGetMinmaxParameteriv");
    mz_glad_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC) load(userptr, "glGetSeparableFilter");
    mz_glad_glHistogram = (PFNGLHISTOGRAMPROC) load(userptr, "glHistogram");
    mz_glad_glMinmax = (PFNGLMINMAXPROC) load(userptr, "glMinmax");
    mz_glad_glResetHistogram = (PFNGLRESETHISTOGRAMPROC) load(userptr, "glResetHistogram");
    mz_glad_glResetMinmax = (PFNGLRESETMINMAXPROC) load(userptr, "glResetMinmax");
    mz_glad_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC) load(userptr, "glSeparableFilter2D");
}
static void mz_glad_gl_load_GL_ARB_multitexture( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_multitexture) return;
    mz_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    mz_glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC) load(userptr, "glActiveTextureARB");
    mz_glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) load(userptr, "glClientActiveTexture");
    mz_glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC) load(userptr, "glClientActiveTextureARB");
    mz_glad_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC) load(userptr, "glMultiTexCoord1d");
    mz_glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC) load(userptr, "glMultiTexCoord1dARB");
    mz_glad_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC) load(userptr, "glMultiTexCoord1dv");
    mz_glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC) load(userptr, "glMultiTexCoord1dvARB");
    mz_glad_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC) load(userptr, "glMultiTexCoord1f");
    mz_glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC) load(userptr, "glMultiTexCoord1fARB");
    mz_glad_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC) load(userptr, "glMultiTexCoord1fv");
    mz_glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC) load(userptr, "glMultiTexCoord1fvARB");
    mz_glad_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC) load(userptr, "glMultiTexCoord1i");
    mz_glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC) load(userptr, "glMultiTexCoord1iARB");
    mz_glad_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC) load(userptr, "glMultiTexCoord1iv");
    mz_glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC) load(userptr, "glMultiTexCoord1ivARB");
    mz_glad_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC) load(userptr, "glMultiTexCoord1s");
    mz_glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC) load(userptr, "glMultiTexCoord1sARB");
    mz_glad_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC) load(userptr, "glMultiTexCoord1sv");
    mz_glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC) load(userptr, "glMultiTexCoord1svARB");
    mz_glad_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC) load(userptr, "glMultiTexCoord2d");
    mz_glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC) load(userptr, "glMultiTexCoord2dARB");
    mz_glad_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC) load(userptr, "glMultiTexCoord2dv");
    mz_glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC) load(userptr, "glMultiTexCoord2dvARB");
    mz_glad_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC) load(userptr, "glMultiTexCoord2f");
    mz_glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC) load(userptr, "glMultiTexCoord2fARB");
    mz_glad_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC) load(userptr, "glMultiTexCoord2fv");
    mz_glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC) load(userptr, "glMultiTexCoord2fvARB");
    mz_glad_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC) load(userptr, "glMultiTexCoord2i");
    mz_glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC) load(userptr, "glMultiTexCoord2iARB");
    mz_glad_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC) load(userptr, "glMultiTexCoord2iv");
    mz_glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC) load(userptr, "glMultiTexCoord2ivARB");
    mz_glad_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC) load(userptr, "glMultiTexCoord2s");
    mz_glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC) load(userptr, "glMultiTexCoord2sARB");
    mz_glad_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC) load(userptr, "glMultiTexCoord2sv");
    mz_glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC) load(userptr, "glMultiTexCoord2svARB");
    mz_glad_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC) load(userptr, "glMultiTexCoord3d");
    mz_glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC) load(userptr, "glMultiTexCoord3dARB");
    mz_glad_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC) load(userptr, "glMultiTexCoord3dv");
    mz_glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC) load(userptr, "glMultiTexCoord3dvARB");
    mz_glad_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC) load(userptr, "glMultiTexCoord3f");
    mz_glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC) load(userptr, "glMultiTexCoord3fARB");
    mz_glad_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC) load(userptr, "glMultiTexCoord3fv");
    mz_glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC) load(userptr, "glMultiTexCoord3fvARB");
    mz_glad_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC) load(userptr, "glMultiTexCoord3i");
    mz_glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC) load(userptr, "glMultiTexCoord3iARB");
    mz_glad_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC) load(userptr, "glMultiTexCoord3iv");
    mz_glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC) load(userptr, "glMultiTexCoord3ivARB");
    mz_glad_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC) load(userptr, "glMultiTexCoord3s");
    mz_glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC) load(userptr, "glMultiTexCoord3sARB");
    mz_glad_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC) load(userptr, "glMultiTexCoord3sv");
    mz_glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC) load(userptr, "glMultiTexCoord3svARB");
    mz_glad_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC) load(userptr, "glMultiTexCoord4d");
    mz_glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC) load(userptr, "glMultiTexCoord4dARB");
    mz_glad_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC) load(userptr, "glMultiTexCoord4dv");
    mz_glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC) load(userptr, "glMultiTexCoord4dvARB");
    mz_glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) load(userptr, "glMultiTexCoord4f");
    mz_glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC) load(userptr, "glMultiTexCoord4fARB");
    mz_glad_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC) load(userptr, "glMultiTexCoord4fv");
    mz_glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC) load(userptr, "glMultiTexCoord4fvARB");
    mz_glad_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC) load(userptr, "glMultiTexCoord4i");
    mz_glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC) load(userptr, "glMultiTexCoord4iARB");
    mz_glad_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC) load(userptr, "glMultiTexCoord4iv");
    mz_glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC) load(userptr, "glMultiTexCoord4ivARB");
    mz_glad_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC) load(userptr, "glMultiTexCoord4s");
    mz_glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC) load(userptr, "glMultiTexCoord4sARB");
    mz_glad_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC) load(userptr, "glMultiTexCoord4sv");
    mz_glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC) load(userptr, "glMultiTexCoord4svARB");
}
static void mz_glad_gl_load_GL_ARB_separate_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_separate_shader_objects) return;
    mz_glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    mz_glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    mz_glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    mz_glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    mz_glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    mz_glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    mz_glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    mz_glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    mz_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    mz_glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load(userptr, "glProgramUniform1d");
    mz_glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load(userptr, "glProgramUniform1dv");
    mz_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    mz_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    mz_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    mz_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    mz_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    mz_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    mz_glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load(userptr, "glProgramUniform2d");
    mz_glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load(userptr, "glProgramUniform2dv");
    mz_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    mz_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    mz_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    mz_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    mz_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    mz_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    mz_glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load(userptr, "glProgramUniform3d");
    mz_glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load(userptr, "glProgramUniform3dv");
    mz_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    mz_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    mz_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    mz_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    mz_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    mz_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    mz_glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load(userptr, "glProgramUniform4d");
    mz_glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load(userptr, "glProgramUniform4dv");
    mz_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    mz_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    mz_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    mz_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    mz_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    mz_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    mz_glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load(userptr, "glProgramUniformMatrix2dv");
    mz_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    mz_glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load(userptr, "glProgramUniformMatrix2x3dv");
    mz_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    mz_glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load(userptr, "glProgramUniformMatrix2x4dv");
    mz_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    mz_glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load(userptr, "glProgramUniformMatrix3dv");
    mz_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    mz_glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load(userptr, "glProgramUniformMatrix3x2dv");
    mz_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    mz_glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load(userptr, "glProgramUniformMatrix3x4dv");
    mz_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    mz_glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load(userptr, "glProgramUniformMatrix4dv");
    mz_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    mz_glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load(userptr, "glProgramUniformMatrix4x2dv");
    mz_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    mz_glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load(userptr, "glProgramUniformMatrix4x3dv");
    mz_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    mz_glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    mz_glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
}
static void mz_glad_gl_load_GL_ARB_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_shader_objects) return;
    mz_glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC) load(userptr, "glAttachObjectARB");
    mz_glad_glAttachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    mz_glad_glCompileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    mz_glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC) load(userptr, "glCompileShaderARB");
    mz_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    mz_glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC) load(userptr, "glCreateProgramObjectARB");
    mz_glad_glCreateShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    mz_glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC) load(userptr, "glCreateShaderObjectARB");
    mz_glad_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC) load(userptr, "glDeleteObjectARB");
    mz_glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC) load(userptr, "glDetachObjectARB");
    mz_glad_glDetachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    mz_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    mz_glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC) load(userptr, "glGetActiveUniformARB");
    mz_glad_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC) load(userptr, "glGetAttachedObjectsARB");
    mz_glad_glGetHandleARB = (PFNGLGETHANDLEARBPROC) load(userptr, "glGetHandleARB");
    mz_glad_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC) load(userptr, "glGetInfoLogARB");
    mz_glad_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) load(userptr, "glGetObjectParameterfvARB");
    mz_glad_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) load(userptr, "glGetObjectParameterivARB");
    mz_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    mz_glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC) load(userptr, "glGetShaderSourceARB");
    mz_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    mz_glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC) load(userptr, "glGetUniformLocationARB");
    mz_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    mz_glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC) load(userptr, "glGetUniformfvARB");
    mz_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    mz_glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC) load(userptr, "glGetUniformivARB");
    mz_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    mz_glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC) load(userptr, "glLinkProgramARB");
    mz_glad_glShaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    mz_glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC) load(userptr, "glShaderSourceARB");
    mz_glad_glUniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    mz_glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC) load(userptr, "glUniform1fARB");
    mz_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    mz_glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC) load(userptr, "glUniform1fvARB");
    mz_glad_glUniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    mz_glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC) load(userptr, "glUniform1iARB");
    mz_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    mz_glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC) load(userptr, "glUniform1ivARB");
    mz_glad_glUniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    mz_glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC) load(userptr, "glUniform2fARB");
    mz_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    mz_glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC) load(userptr, "glUniform2fvARB");
    mz_glad_glUniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    mz_glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC) load(userptr, "glUniform2iARB");
    mz_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    mz_glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC) load(userptr, "glUniform2ivARB");
    mz_glad_glUniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    mz_glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC) load(userptr, "glUniform3fARB");
    mz_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    mz_glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC) load(userptr, "glUniform3fvARB");
    mz_glad_glUniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    mz_glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC) load(userptr, "glUniform3iARB");
    mz_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    mz_glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC) load(userptr, "glUniform3ivARB");
    mz_glad_glUniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    mz_glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC) load(userptr, "glUniform4fARB");
    mz_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    mz_glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC) load(userptr, "glUniform4fvARB");
    mz_glad_glUniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    mz_glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC) load(userptr, "glUniform4iARB");
    mz_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    mz_glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC) load(userptr, "glUniform4ivARB");
    mz_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    mz_glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC) load(userptr, "glUniformMatrix2fvARB");
    mz_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    mz_glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC) load(userptr, "glUniformMatrix3fvARB");
    mz_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    mz_glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC) load(userptr, "glUniformMatrix4fvARB");
    mz_glad_glUseProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    mz_glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC) load(userptr, "glUseProgramObjectARB");
    mz_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    mz_glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC) load(userptr, "glValidateProgramARB");
}
static void mz_glad_gl_load_GL_ARB_vertex_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_vertex_buffer_object) return;
    mz_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    mz_glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC) load(userptr, "glBindBufferARB");
    mz_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    mz_glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC) load(userptr, "glBufferDataARB");
    mz_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    mz_glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC) load(userptr, "glBufferSubDataARB");
    mz_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    mz_glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC) load(userptr, "glDeleteBuffersARB");
    mz_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    mz_glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC) load(userptr, "glGenBuffersARB");
    mz_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    mz_glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) load(userptr, "glGetBufferParameterivARB");
    mz_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load(userptr, "glGetBufferPointerv");
    mz_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC) load(userptr, "glGetBufferPointervARB");
    mz_glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) load(userptr, "glGetBufferSubData");
    mz_glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC) load(userptr, "glGetBufferSubDataARB");
    mz_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    mz_glad_glIsBufferARB = (PFNGLISBUFFERARBPROC) load(userptr, "glIsBufferARB");
    mz_glad_glMapBuffer = (PFNGLMAPBUFFERPROC) load(userptr, "glMapBuffer");
    mz_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC) load(userptr, "glMapBufferARB");
    mz_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) load(userptr, "glUnmapBuffer");
    mz_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC) load(userptr, "glUnmapBufferARB");
}
static void mz_glad_gl_load_GL_ARB_vertex_program( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_vertex_program) return;
    mz_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) load(userptr, "glBindProgramARB");
    mz_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) load(userptr, "glDeleteProgramsARB");
    mz_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    mz_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    mz_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    mz_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    mz_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) load(userptr, "glGenProgramsARB");
    mz_glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) load(userptr, "glGetProgramEnvParameterdvARB");
    mz_glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) load(userptr, "glGetProgramEnvParameterfvARB");
    mz_glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) load(userptr, "glGetProgramLocalParameterdvARB");
    mz_glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) load(userptr, "glGetProgramLocalParameterfvARB");
    mz_glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) load(userptr, "glGetProgramStringARB");
    mz_glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) load(userptr, "glGetProgramivARB");
    mz_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    mz_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    mz_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    mz_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    mz_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    mz_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    mz_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    mz_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    mz_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC) load(userptr, "glIsProgramARB");
    mz_glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) load(userptr, "glProgramEnvParameter4dARB");
    mz_glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) load(userptr, "glProgramEnvParameter4dvARB");
    mz_glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) load(userptr, "glProgramEnvParameter4fARB");
    mz_glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) load(userptr, "glProgramEnvParameter4fvARB");
    mz_glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) load(userptr, "glProgramLocalParameter4dARB");
    mz_glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) load(userptr, "glProgramLocalParameter4dvARB");
    mz_glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) load(userptr, "glProgramLocalParameter4fARB");
    mz_glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) load(userptr, "glProgramLocalParameter4fvARB");
    mz_glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) load(userptr, "glProgramStringARB");
    mz_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    mz_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    mz_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    mz_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    mz_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    mz_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    mz_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    mz_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    mz_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    mz_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    mz_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    mz_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    mz_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    mz_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    mz_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    mz_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    mz_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    mz_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    mz_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    mz_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    mz_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    mz_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    mz_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    mz_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    mz_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    mz_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    mz_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    mz_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    mz_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    mz_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    mz_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    mz_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    mz_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    mz_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    mz_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    mz_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    mz_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load(userptr, "glVertexAttrib4Nbv");
    mz_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    mz_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load(userptr, "glVertexAttrib4Niv");
    mz_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    mz_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load(userptr, "glVertexAttrib4Nsv");
    mz_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    mz_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    mz_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    mz_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    mz_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    mz_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load(userptr, "glVertexAttrib4Nuiv");
    mz_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    mz_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load(userptr, "glVertexAttrib4Nusv");
    mz_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    mz_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load(userptr, "glVertexAttrib4bv");
    mz_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    mz_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    mz_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    mz_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    mz_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    mz_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    mz_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    mz_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    mz_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    mz_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load(userptr, "glVertexAttrib4iv");
    mz_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    mz_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    mz_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    mz_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    mz_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    mz_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load(userptr, "glVertexAttrib4ubv");
    mz_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    mz_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load(userptr, "glVertexAttrib4uiv");
    mz_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    mz_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load(userptr, "glVertexAttrib4usv");
    mz_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    mz_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
    mz_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void mz_glad_gl_load_GL_ARB_vertex_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_ARB_vertex_shader) return;
    mz_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    mz_glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) load(userptr, "glBindAttribLocationARB");
    mz_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    mz_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    mz_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    mz_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    mz_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    mz_glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC) load(userptr, "glGetActiveAttribARB");
    mz_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    mz_glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC) load(userptr, "glGetAttribLocationARB");
    mz_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    mz_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    mz_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    mz_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    mz_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    mz_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    mz_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    mz_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    mz_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    mz_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    mz_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    mz_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    mz_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    mz_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    mz_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    mz_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    mz_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    mz_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    mz_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    mz_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    mz_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    mz_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    mz_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    mz_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    mz_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    mz_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    mz_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    mz_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    mz_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    mz_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    mz_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    mz_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    mz_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    mz_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    mz_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    mz_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    mz_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    mz_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    mz_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    mz_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    mz_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    mz_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    mz_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    mz_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    mz_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load(userptr, "glVertexAttrib4Nbv");
    mz_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    mz_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load(userptr, "glVertexAttrib4Niv");
    mz_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    mz_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load(userptr, "glVertexAttrib4Nsv");
    mz_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    mz_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    mz_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    mz_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    mz_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    mz_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load(userptr, "glVertexAttrib4Nuiv");
    mz_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    mz_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load(userptr, "glVertexAttrib4Nusv");
    mz_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    mz_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load(userptr, "glVertexAttrib4bv");
    mz_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    mz_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    mz_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    mz_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    mz_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    mz_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    mz_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    mz_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    mz_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    mz_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load(userptr, "glVertexAttrib4iv");
    mz_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    mz_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    mz_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    mz_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    mz_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    mz_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load(userptr, "glVertexAttrib4ubv");
    mz_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    mz_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load(userptr, "glVertexAttrib4uiv");
    mz_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    mz_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load(userptr, "glVertexAttrib4usv");
    mz_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    mz_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
    mz_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void mz_glad_gl_load_GL_EXT_blend_equation_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_blend_equation_separate) return;
    mz_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    mz_glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC) load(userptr, "glBlendEquationSeparateEXT");
}
static void mz_glad_gl_load_GL_EXT_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_blend_func_separate) return;
    mz_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    mz_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) load(userptr, "glBlendFuncSeparateEXT");
}
static void mz_glad_gl_load_GL_EXT_blend_minmax( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_blend_minmax) return;
    mz_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    mz_glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC) load(userptr, "glBlendEquationEXT");
}
static void mz_glad_gl_load_GL_EXT_copy_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_copy_texture) return;
    mz_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load(userptr, "glCopyTexImage1D");
    mz_glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC) load(userptr, "glCopyTexImage1DEXT");
    mz_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    mz_glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC) load(userptr, "glCopyTexImage2DEXT");
    mz_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load(userptr, "glCopyTexSubImage1D");
    mz_glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyTexSubImage1DEXT");
    mz_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    mz_glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyTexSubImage2DEXT");
    mz_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load(userptr, "glCopyTexSubImage3D");
    mz_glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyTexSubImage3DEXT");
}
static void mz_glad_gl_load_GL_EXT_framebuffer_blit( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_framebuffer_blit) return;
    mz_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    mz_glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC) load(userptr, "glBlitFramebufferEXT");
}
static void mz_glad_gl_load_GL_EXT_framebuffer_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_framebuffer_multisample) return;
    mz_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    mz_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glRenderbufferStorageMultisampleEXT");
}
static void mz_glad_gl_load_GL_EXT_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_framebuffer_object) return;
    mz_glad_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC) load(userptr, "glBindFramebufferEXT");
    mz_glad_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC) load(userptr, "glBindRenderbufferEXT");
    mz_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    mz_glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckFramebufferStatusEXT");
    mz_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    mz_glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC) load(userptr, "glDeleteFramebuffersEXT");
    mz_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    mz_glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC) load(userptr, "glDeleteRenderbuffersEXT");
    mz_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    mz_glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glFramebufferRenderbufferEXT");
    mz_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    mz_glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glFramebufferTexture1DEXT");
    mz_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    mz_glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glFramebufferTexture2DEXT");
    mz_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    mz_glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glFramebufferTexture3DEXT");
    mz_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    mz_glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC) load(userptr, "glGenFramebuffersEXT");
    mz_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    mz_glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC) load(userptr, "glGenRenderbuffersEXT");
    mz_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    mz_glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC) load(userptr, "glGenerateMipmapEXT");
    mz_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    mz_glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferAttachmentParameterivEXT");
    mz_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    mz_glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetRenderbufferParameterivEXT");
    mz_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    mz_glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC) load(userptr, "glIsFramebufferEXT");
    mz_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    mz_glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC) load(userptr, "glIsRenderbufferEXT");
    mz_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    mz_glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glRenderbufferStorageEXT");
}
static void mz_glad_gl_load_GL_EXT_geometry_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_geometry_shader4) return;
    mz_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    mz_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) load(userptr, "glProgramParameteriEXT");
}
static void mz_glad_gl_load_GL_EXT_subtexture( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_subtexture) return;
    mz_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load(userptr, "glTexSubImage1D");
    mz_glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC) load(userptr, "glTexSubImage1DEXT");
    mz_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    mz_glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC) load(userptr, "glTexSubImage2DEXT");
}
static void mz_glad_gl_load_GL_EXT_texture_array( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_texture_array) return;
    mz_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    mz_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
}
static void mz_glad_gl_load_GL_EXT_texture_object( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_texture_object) return;
    mz_glad_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC) load(userptr, "glAreTexturesResidentEXT");
    mz_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    mz_glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC) load(userptr, "glBindTextureEXT");
    mz_glad_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC) load(userptr, "glDeleteTexturesEXT");
    mz_glad_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC) load(userptr, "glGenTexturesEXT");
    mz_glad_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC) load(userptr, "glIsTextureEXT");
    mz_glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) load(userptr, "glPrioritizeTextures");
    mz_glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC) load(userptr, "glPrioritizeTexturesEXT");
}
static void mz_glad_gl_load_GL_EXT_vertex_array( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_EXT_vertex_array) return;
    mz_glad_glArrayElement = (PFNGLARRAYELEMENTPROC) load(userptr, "glArrayElement");
    mz_glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC) load(userptr, "glArrayElementEXT");
    mz_glad_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC) load(userptr, "glColorPointerEXT");
    mz_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    mz_glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC) load(userptr, "glDrawArraysEXT");
    mz_glad_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC) load(userptr, "glEdgeFlagPointerEXT");
    mz_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    mz_glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC) load(userptr, "glGetPointervEXT");
    mz_glad_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC) load(userptr, "glIndexPointerEXT");
    mz_glad_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC) load(userptr, "glNormalPointerEXT");
    mz_glad_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC) load(userptr, "glTexCoordPointerEXT");
    mz_glad_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC) load(userptr, "glVertexPointerEXT");
}
static void mz_glad_gl_load_GL_INGR_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_INGR_blend_func_separate) return;
    mz_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    mz_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC) load(userptr, "glBlendFuncSeparateINGR");
}
static void mz_glad_gl_load_GL_KHR_debug( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_KHR_debug) return;
    mz_glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load(userptr, "glDebugMessageCallback");
    mz_glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load(userptr, "glDebugMessageControl");
    mz_glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load(userptr, "glDebugMessageInsert");
    mz_glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load(userptr, "glGetDebugMessageLog");
    mz_glad_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) load(userptr, "glGetObjectLabel");
    mz_glad_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load(userptr, "glGetObjectPtrLabel");
    mz_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    mz_glad_glObjectLabel = (PFNGLOBJECTLABELPROC) load(userptr, "glObjectLabel");
    mz_glad_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load(userptr, "glObjectPtrLabel");
    mz_glad_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load(userptr, "glPopDebugGroup");
    mz_glad_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load(userptr, "glPushDebugGroup");
}
static void mz_glad_gl_load_GL_NV_geometry_program4( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_NV_geometry_program4) return;
    mz_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    mz_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glFramebufferTextureEXT");
    mz_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) load(userptr, "glFramebufferTextureFaceARB");
    mz_glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glFramebufferTextureFaceEXT");
    mz_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    mz_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
    mz_glad_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC) load(userptr, "glProgramVertexLimitNV");
}
static void mz_glad_gl_load_GL_NV_vertex_program( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_NV_vertex_program) return;
    mz_glad_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC) load(userptr, "glAreProgramsResidentNV");
    mz_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) load(userptr, "glBindProgramARB");
    mz_glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC) load(userptr, "glBindProgramNV");
    mz_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) load(userptr, "glDeleteProgramsARB");
    mz_glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC) load(userptr, "glDeleteProgramsNV");
    mz_glad_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC) load(userptr, "glExecuteProgramNV");
    mz_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) load(userptr, "glGenProgramsARB");
    mz_glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC) load(userptr, "glGenProgramsNV");
    mz_glad_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC) load(userptr, "glGetProgramParameterdvNV");
    mz_glad_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC) load(userptr, "glGetProgramParameterfvNV");
    mz_glad_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC) load(userptr, "glGetProgramStringNV");
    mz_glad_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC) load(userptr, "glGetProgramivNV");
    mz_glad_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC) load(userptr, "glGetTrackMatrixivNV");
    mz_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    mz_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC) load(userptr, "glGetVertexAttribPointervNV");
    mz_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    mz_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC) load(userptr, "glGetVertexAttribdvNV");
    mz_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    mz_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC) load(userptr, "glGetVertexAttribfvNV");
    mz_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    mz_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC) load(userptr, "glGetVertexAttribivNV");
    mz_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC) load(userptr, "glIsProgramARB");
    mz_glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC) load(userptr, "glIsProgramNV");
    mz_glad_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC) load(userptr, "glLoadProgramNV");
    mz_glad_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC) load(userptr, "glProgramParameter4dNV");
    mz_glad_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC) load(userptr, "glProgramParameter4dvNV");
    mz_glad_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC) load(userptr, "glProgramParameter4fNV");
    mz_glad_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC) load(userptr, "glProgramParameter4fvNV");
    mz_glad_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC) load(userptr, "glProgramParameters4dvNV");
    mz_glad_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC) load(userptr, "glProgramParameters4fvNV");
    mz_glad_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC) load(userptr, "glRequestResidentProgramsNV");
    mz_glad_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC) load(userptr, "glTrackMatrixNV");
    mz_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    mz_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC) load(userptr, "glVertexAttrib1dNV");
    mz_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    mz_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC) load(userptr, "glVertexAttrib1dvNV");
    mz_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    mz_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC) load(userptr, "glVertexAttrib1fNV");
    mz_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    mz_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC) load(userptr, "glVertexAttrib1fvNV");
    mz_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    mz_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC) load(userptr, "glVertexAttrib1sNV");
    mz_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    mz_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC) load(userptr, "glVertexAttrib1svNV");
    mz_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    mz_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC) load(userptr, "glVertexAttrib2dNV");
    mz_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    mz_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC) load(userptr, "glVertexAttrib2dvNV");
    mz_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    mz_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC) load(userptr, "glVertexAttrib2fNV");
    mz_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    mz_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC) load(userptr, "glVertexAttrib2fvNV");
    mz_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    mz_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC) load(userptr, "glVertexAttrib2sNV");
    mz_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    mz_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC) load(userptr, "glVertexAttrib2svNV");
    mz_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    mz_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC) load(userptr, "glVertexAttrib3dNV");
    mz_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    mz_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC) load(userptr, "glVertexAttrib3dvNV");
    mz_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    mz_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC) load(userptr, "glVertexAttrib3fNV");
    mz_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    mz_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC) load(userptr, "glVertexAttrib3fvNV");
    mz_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    mz_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC) load(userptr, "glVertexAttrib3sNV");
    mz_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    mz_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC) load(userptr, "glVertexAttrib3svNV");
    mz_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    mz_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    mz_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    mz_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC) load(userptr, "glVertexAttrib4dNV");
    mz_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    mz_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC) load(userptr, "glVertexAttrib4dvNV");
    mz_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    mz_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC) load(userptr, "glVertexAttrib4fNV");
    mz_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    mz_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC) load(userptr, "glVertexAttrib4fvNV");
    mz_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    mz_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC) load(userptr, "glVertexAttrib4sNV");
    mz_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    mz_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC) load(userptr, "glVertexAttrib4svNV");
    mz_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC) load(userptr, "glVertexAttrib4ubNV");
    mz_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC) load(userptr, "glVertexAttrib4ubvNV");
    mz_glad_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC) load(userptr, "glVertexAttribPointerNV");
    mz_glad_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC) load(userptr, "glVertexAttribs1dvNV");
    mz_glad_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC) load(userptr, "glVertexAttribs1fvNV");
    mz_glad_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC) load(userptr, "glVertexAttribs1svNV");
    mz_glad_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC) load(userptr, "glVertexAttribs2dvNV");
    mz_glad_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC) load(userptr, "glVertexAttribs2fvNV");
    mz_glad_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC) load(userptr, "glVertexAttribs2svNV");
    mz_glad_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC) load(userptr, "glVertexAttribs3dvNV");
    mz_glad_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC) load(userptr, "glVertexAttribs3fvNV");
    mz_glad_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC) load(userptr, "glVertexAttribs3svNV");
    mz_glad_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC) load(userptr, "glVertexAttribs4dvNV");
    mz_glad_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC) load(userptr, "glVertexAttribs4fvNV");
    mz_glad_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC) load(userptr, "glVertexAttribs4svNV");
    mz_glad_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC) load(userptr, "glVertexAttribs4ubvNV");
}
static void mz_glad_gl_load_GL_OES_blend_equation_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_OES_blend_equation_separate) return;
    mz_glad_glBlendEquationSeparateOES = (PFNGLBLENDEQUATIONSEPARATEOESPROC) load(userptr, "glBlendEquationSeparateOES");
}
static void mz_glad_gl_load_GL_OES_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_OES_blend_func_separate) return;
    mz_glad_glBlendFuncSeparateOES = (PFNGLBLENDFUNCSEPARATEOESPROC) load(userptr, "glBlendFuncSeparateOES");
}
static void mz_glad_gl_load_GL_OES_blend_subtract( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_OES_blend_subtract) return;
    mz_glad_glBlendEquationOES = (PFNGLBLENDEQUATIONOESPROC) load(userptr, "glBlendEquationOES");
}
static void mz_glad_gl_load_GL_OES_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_OES_framebuffer_object) return;
    mz_glad_glBindFramebufferOES = (PFNGLBINDFRAMEBUFFEROESPROC) load(userptr, "glBindFramebufferOES");
    mz_glad_glBindRenderbufferOES = (PFNGLBINDRENDERBUFFEROESPROC) load(userptr, "glBindRenderbufferOES");
    mz_glad_glCheckFramebufferStatusOES = (PFNGLCHECKFRAMEBUFFERSTATUSOESPROC) load(userptr, "glCheckFramebufferStatusOES");
    mz_glad_glDeleteFramebuffersOES = (PFNGLDELETEFRAMEBUFFERSOESPROC) load(userptr, "glDeleteFramebuffersOES");
    mz_glad_glDeleteRenderbuffersOES = (PFNGLDELETERENDERBUFFERSOESPROC) load(userptr, "glDeleteRenderbuffersOES");
    mz_glad_glFramebufferRenderbufferOES = (PFNGLFRAMEBUFFERRENDERBUFFEROESPROC) load(userptr, "glFramebufferRenderbufferOES");
    mz_glad_glFramebufferTexture2DOES = (PFNGLFRAMEBUFFERTEXTURE2DOESPROC) load(userptr, "glFramebufferTexture2DOES");
    mz_glad_glGenFramebuffersOES = (PFNGLGENFRAMEBUFFERSOESPROC) load(userptr, "glGenFramebuffersOES");
    mz_glad_glGenRenderbuffersOES = (PFNGLGENRENDERBUFFERSOESPROC) load(userptr, "glGenRenderbuffersOES");
    mz_glad_glGenerateMipmapOES = (PFNGLGENERATEMIPMAPOESPROC) load(userptr, "glGenerateMipmapOES");
    mz_glad_glGetFramebufferAttachmentParameterivOES = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC) load(userptr, "glGetFramebufferAttachmentParameterivOES");
    mz_glad_glGetRenderbufferParameterivOES = (PFNGLGETRENDERBUFFERPARAMETERIVOESPROC) load(userptr, "glGetRenderbufferParameterivOES");
    mz_glad_glIsFramebufferOES = (PFNGLISFRAMEBUFFEROESPROC) load(userptr, "glIsFramebufferOES");
    mz_glad_glIsRenderbufferOES = (PFNGLISRENDERBUFFEROESPROC) load(userptr, "glIsRenderbufferOES");
    mz_glad_glRenderbufferStorageOES = (PFNGLRENDERBUFFERSTORAGEOESPROC) load(userptr, "glRenderbufferStorageOES");
}
static void mz_glad_gl_load_GL_OES_single_precision( GLADuserptrloadfunc load, void* userptr) {
    if(!MAZE_GLAD_GL_OES_single_precision) return;
    mz_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    mz_glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC) load(userptr, "glClearDepthfOES");
    mz_glad_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC) load(userptr, "glClipPlanefOES");
    mz_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    mz_glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC) load(userptr, "glDepthRangefOES");
    mz_glad_glFrustumfOES = (PFNGLFRUSTUMFOESPROC) load(userptr, "glFrustumfOES");
    mz_glad_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC) load(userptr, "glGetClipPlanefOES");
    mz_glad_glOrthofOES = (PFNGLORTHOFOESPROC) load(userptr, "glOrthofOES");
}


static void mz_glad_gl_resolve_aliases(void) {
    if (mz_glad_glActiveTexture == NULL && mz_glad_glActiveTextureARB != NULL) mz_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC)mz_glad_glActiveTextureARB;
    if (mz_glad_glActiveTextureARB == NULL && mz_glad_glActiveTexture != NULL) mz_glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)mz_glad_glActiveTexture;
    if (mz_glad_glArrayElement == NULL && mz_glad_glArrayElementEXT != NULL) mz_glad_glArrayElement = (PFNGLARRAYELEMENTPROC)mz_glad_glArrayElementEXT;
    if (mz_glad_glArrayElementEXT == NULL && mz_glad_glArrayElement != NULL) mz_glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)mz_glad_glArrayElement;
    if (mz_glad_glAttachObjectARB == NULL && mz_glad_glAttachShader != NULL) mz_glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)mz_glad_glAttachShader;
    if (mz_glad_glAttachShader == NULL && mz_glad_glAttachObjectARB != NULL) mz_glad_glAttachShader = (PFNGLATTACHSHADERPROC)mz_glad_glAttachObjectARB;
    if (mz_glad_glBindAttribLocation == NULL && mz_glad_glBindAttribLocationARB != NULL) mz_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)mz_glad_glBindAttribLocationARB;
    if (mz_glad_glBindAttribLocationARB == NULL && mz_glad_glBindAttribLocation != NULL) mz_glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)mz_glad_glBindAttribLocation;
    if (mz_glad_glBindBuffer == NULL && mz_glad_glBindBufferARB != NULL) mz_glad_glBindBuffer = (PFNGLBINDBUFFERPROC)mz_glad_glBindBufferARB;
    if (mz_glad_glBindBufferARB == NULL && mz_glad_glBindBuffer != NULL) mz_glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC)mz_glad_glBindBuffer;
    if (mz_glad_glBindProgramARB == NULL && mz_glad_glBindProgramNV != NULL) mz_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)mz_glad_glBindProgramNV;
    if (mz_glad_glBindProgramNV == NULL && mz_glad_glBindProgramARB != NULL) mz_glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)mz_glad_glBindProgramARB;
    if (mz_glad_glBindTexture == NULL && mz_glad_glBindTextureEXT != NULL) mz_glad_glBindTexture = (PFNGLBINDTEXTUREPROC)mz_glad_glBindTextureEXT;
    if (mz_glad_glBindTextureEXT == NULL && mz_glad_glBindTexture != NULL) mz_glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)mz_glad_glBindTexture;
    if (mz_glad_glBlendEquation == NULL && mz_glad_glBlendEquationEXT != NULL) mz_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC)mz_glad_glBlendEquationEXT;
    if (mz_glad_glBlendEquationEXT == NULL && mz_glad_glBlendEquation != NULL) mz_glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)mz_glad_glBlendEquation;
    if (mz_glad_glBlendEquationSeparate == NULL && mz_glad_glBlendEquationSeparateEXT != NULL) mz_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)mz_glad_glBlendEquationSeparateEXT;
    if (mz_glad_glBlendEquationSeparateEXT == NULL && mz_glad_glBlendEquationSeparate != NULL) mz_glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)mz_glad_glBlendEquationSeparate;
    if (mz_glad_glBlendFuncSeparate == NULL && mz_glad_glBlendFuncSeparateINGR != NULL) mz_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)mz_glad_glBlendFuncSeparateINGR;
    if (mz_glad_glBlendFuncSeparate == NULL && mz_glad_glBlendFuncSeparateEXT != NULL) mz_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)mz_glad_glBlendFuncSeparateEXT;
    if (mz_glad_glBlendFuncSeparateEXT == NULL && mz_glad_glBlendFuncSeparate != NULL) mz_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)mz_glad_glBlendFuncSeparate;
    if (mz_glad_glBlendFuncSeparateEXT == NULL && mz_glad_glBlendFuncSeparateINGR != NULL) mz_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)mz_glad_glBlendFuncSeparateINGR;
    if (mz_glad_glBlendFuncSeparateINGR == NULL && mz_glad_glBlendFuncSeparate != NULL) mz_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)mz_glad_glBlendFuncSeparate;
    if (mz_glad_glBlendFuncSeparateINGR == NULL && mz_glad_glBlendFuncSeparateEXT != NULL) mz_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)mz_glad_glBlendFuncSeparateEXT;
    if (mz_glad_glBlitFramebuffer == NULL && mz_glad_glBlitFramebufferEXT != NULL) mz_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)mz_glad_glBlitFramebufferEXT;
    if (mz_glad_glBlitFramebufferEXT == NULL && mz_glad_glBlitFramebuffer != NULL) mz_glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)mz_glad_glBlitFramebuffer;
    if (mz_glad_glBufferData == NULL && mz_glad_glBufferDataARB != NULL) mz_glad_glBufferData = (PFNGLBUFFERDATAPROC)mz_glad_glBufferDataARB;
    if (mz_glad_glBufferDataARB == NULL && mz_glad_glBufferData != NULL) mz_glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC)mz_glad_glBufferData;
    if (mz_glad_glBufferSubData == NULL && mz_glad_glBufferSubDataARB != NULL) mz_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)mz_glad_glBufferSubDataARB;
    if (mz_glad_glBufferSubDataARB == NULL && mz_glad_glBufferSubData != NULL) mz_glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)mz_glad_glBufferSubData;
    if (mz_glad_glCheckFramebufferStatus == NULL && mz_glad_glCheckFramebufferStatusEXT != NULL) mz_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)mz_glad_glCheckFramebufferStatusEXT;
    if (mz_glad_glCheckFramebufferStatusEXT == NULL && mz_glad_glCheckFramebufferStatus != NULL) mz_glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)mz_glad_glCheckFramebufferStatus;
    if (mz_glad_glClearDepthf == NULL && mz_glad_glClearDepthfOES != NULL) mz_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC)mz_glad_glClearDepthfOES;
    if (mz_glad_glClearDepthfOES == NULL && mz_glad_glClearDepthf != NULL) mz_glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)mz_glad_glClearDepthf;
    if (mz_glad_glClientActiveTexture == NULL && mz_glad_glClientActiveTextureARB != NULL) mz_glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)mz_glad_glClientActiveTextureARB;
    if (mz_glad_glClientActiveTextureARB == NULL && mz_glad_glClientActiveTexture != NULL) mz_glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)mz_glad_glClientActiveTexture;
    if (mz_glad_glCompileShader == NULL && mz_glad_glCompileShaderARB != NULL) mz_glad_glCompileShader = (PFNGLCOMPILESHADERPROC)mz_glad_glCompileShaderARB;
    if (mz_glad_glCompileShaderARB == NULL && mz_glad_glCompileShader != NULL) mz_glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)mz_glad_glCompileShader;
    if (mz_glad_glCopyTexImage1D == NULL && mz_glad_glCopyTexImage1DEXT != NULL) mz_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)mz_glad_glCopyTexImage1DEXT;
    if (mz_glad_glCopyTexImage1DEXT == NULL && mz_glad_glCopyTexImage1D != NULL) mz_glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)mz_glad_glCopyTexImage1D;
    if (mz_glad_glCopyTexImage2D == NULL && mz_glad_glCopyTexImage2DEXT != NULL) mz_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)mz_glad_glCopyTexImage2DEXT;
    if (mz_glad_glCopyTexImage2DEXT == NULL && mz_glad_glCopyTexImage2D != NULL) mz_glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)mz_glad_glCopyTexImage2D;
    if (mz_glad_glCopyTexSubImage1D == NULL && mz_glad_glCopyTexSubImage1DEXT != NULL) mz_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)mz_glad_glCopyTexSubImage1DEXT;
    if (mz_glad_glCopyTexSubImage1DEXT == NULL && mz_glad_glCopyTexSubImage1D != NULL) mz_glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)mz_glad_glCopyTexSubImage1D;
    if (mz_glad_glCopyTexSubImage2D == NULL && mz_glad_glCopyTexSubImage2DEXT != NULL) mz_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)mz_glad_glCopyTexSubImage2DEXT;
    if (mz_glad_glCopyTexSubImage2DEXT == NULL && mz_glad_glCopyTexSubImage2D != NULL) mz_glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)mz_glad_glCopyTexSubImage2D;
    if (mz_glad_glCopyTexSubImage3D == NULL && mz_glad_glCopyTexSubImage3DEXT != NULL) mz_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)mz_glad_glCopyTexSubImage3DEXT;
    if (mz_glad_glCopyTexSubImage3DEXT == NULL && mz_glad_glCopyTexSubImage3D != NULL) mz_glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)mz_glad_glCopyTexSubImage3D;
    if (mz_glad_glCreateProgram == NULL && mz_glad_glCreateProgramObjectARB != NULL) mz_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC)mz_glad_glCreateProgramObjectARB;
    if (mz_glad_glCreateProgramObjectARB == NULL && mz_glad_glCreateProgram != NULL) mz_glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)mz_glad_glCreateProgram;
    if (mz_glad_glCreateShader == NULL && mz_glad_glCreateShaderObjectARB != NULL) mz_glad_glCreateShader = (PFNGLCREATESHADERPROC)mz_glad_glCreateShaderObjectARB;
    if (mz_glad_glCreateShaderObjectARB == NULL && mz_glad_glCreateShader != NULL) mz_glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)mz_glad_glCreateShader;
    if (mz_glad_glDeleteBuffers == NULL && mz_glad_glDeleteBuffersARB != NULL) mz_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)mz_glad_glDeleteBuffersARB;
    if (mz_glad_glDeleteBuffersARB == NULL && mz_glad_glDeleteBuffers != NULL) mz_glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)mz_glad_glDeleteBuffers;
    if (mz_glad_glDeleteFramebuffers == NULL && mz_glad_glDeleteFramebuffersEXT != NULL) mz_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)mz_glad_glDeleteFramebuffersEXT;
    if (mz_glad_glDeleteFramebuffersEXT == NULL && mz_glad_glDeleteFramebuffers != NULL) mz_glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)mz_glad_glDeleteFramebuffers;
    if (mz_glad_glDeleteProgramsARB == NULL && mz_glad_glDeleteProgramsNV != NULL) mz_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)mz_glad_glDeleteProgramsNV;
    if (mz_glad_glDeleteProgramsNV == NULL && mz_glad_glDeleteProgramsARB != NULL) mz_glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)mz_glad_glDeleteProgramsARB;
    if (mz_glad_glDeleteRenderbuffers == NULL && mz_glad_glDeleteRenderbuffersEXT != NULL) mz_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)mz_glad_glDeleteRenderbuffersEXT;
    if (mz_glad_glDeleteRenderbuffersEXT == NULL && mz_glad_glDeleteRenderbuffers != NULL) mz_glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)mz_glad_glDeleteRenderbuffers;
    if (mz_glad_glDepthRangef == NULL && mz_glad_glDepthRangefOES != NULL) mz_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC)mz_glad_glDepthRangefOES;
    if (mz_glad_glDepthRangefOES == NULL && mz_glad_glDepthRangef != NULL) mz_glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)mz_glad_glDepthRangef;
    if (mz_glad_glDetachObjectARB == NULL && mz_glad_glDetachShader != NULL) mz_glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)mz_glad_glDetachShader;
    if (mz_glad_glDetachShader == NULL && mz_glad_glDetachObjectARB != NULL) mz_glad_glDetachShader = (PFNGLDETACHSHADERPROC)mz_glad_glDetachObjectARB;
    if (mz_glad_glDisableVertexAttribArray == NULL && mz_glad_glDisableVertexAttribArrayARB != NULL) mz_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)mz_glad_glDisableVertexAttribArrayARB;
    if (mz_glad_glDisableVertexAttribArrayARB == NULL && mz_glad_glDisableVertexAttribArray != NULL) mz_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)mz_glad_glDisableVertexAttribArray;
    if (mz_glad_glDrawArrays == NULL && mz_glad_glDrawArraysEXT != NULL) mz_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC)mz_glad_glDrawArraysEXT;
    if (mz_glad_glDrawArraysEXT == NULL && mz_glad_glDrawArrays != NULL) mz_glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)mz_glad_glDrawArrays;
    if (mz_glad_glEnableVertexAttribArray == NULL && mz_glad_glEnableVertexAttribArrayARB != NULL) mz_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)mz_glad_glEnableVertexAttribArrayARB;
    if (mz_glad_glEnableVertexAttribArrayARB == NULL && mz_glad_glEnableVertexAttribArray != NULL) mz_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)mz_glad_glEnableVertexAttribArray;
    if (mz_glad_glFramebufferRenderbuffer == NULL && mz_glad_glFramebufferRenderbufferEXT != NULL) mz_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)mz_glad_glFramebufferRenderbufferEXT;
    if (mz_glad_glFramebufferRenderbufferEXT == NULL && mz_glad_glFramebufferRenderbuffer != NULL) mz_glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)mz_glad_glFramebufferRenderbuffer;
    if (mz_glad_glFramebufferTexture == NULL && mz_glad_glFramebufferTextureEXT != NULL) mz_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)mz_glad_glFramebufferTextureEXT;
    if (mz_glad_glFramebufferTexture == NULL && mz_glad_glFramebufferTextureARB != NULL) mz_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)mz_glad_glFramebufferTextureARB;
    if (mz_glad_glFramebufferTexture1D == NULL && mz_glad_glFramebufferTexture1DEXT != NULL) mz_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)mz_glad_glFramebufferTexture1DEXT;
    if (mz_glad_glFramebufferTexture1DEXT == NULL && mz_glad_glFramebufferTexture1D != NULL) mz_glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)mz_glad_glFramebufferTexture1D;
    if (mz_glad_glFramebufferTexture2D == NULL && mz_glad_glFramebufferTexture2DEXT != NULL) mz_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)mz_glad_glFramebufferTexture2DEXT;
    if (mz_glad_glFramebufferTexture2DEXT == NULL && mz_glad_glFramebufferTexture2D != NULL) mz_glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)mz_glad_glFramebufferTexture2D;
    if (mz_glad_glFramebufferTexture3D == NULL && mz_glad_glFramebufferTexture3DEXT != NULL) mz_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)mz_glad_glFramebufferTexture3DEXT;
    if (mz_glad_glFramebufferTexture3DEXT == NULL && mz_glad_glFramebufferTexture3D != NULL) mz_glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)mz_glad_glFramebufferTexture3D;
    if (mz_glad_glFramebufferTextureARB == NULL && mz_glad_glFramebufferTextureEXT != NULL) mz_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)mz_glad_glFramebufferTextureEXT;
    if (mz_glad_glFramebufferTextureARB == NULL && mz_glad_glFramebufferTexture != NULL) mz_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)mz_glad_glFramebufferTexture;
    if (mz_glad_glFramebufferTextureEXT == NULL && mz_glad_glFramebufferTexture != NULL) mz_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)mz_glad_glFramebufferTexture;
    if (mz_glad_glFramebufferTextureEXT == NULL && mz_glad_glFramebufferTextureARB != NULL) mz_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)mz_glad_glFramebufferTextureARB;
    if (mz_glad_glFramebufferTextureFaceARB == NULL && mz_glad_glFramebufferTextureFaceEXT != NULL) mz_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)mz_glad_glFramebufferTextureFaceEXT;
    if (mz_glad_glFramebufferTextureFaceEXT == NULL && mz_glad_glFramebufferTextureFaceARB != NULL) mz_glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)mz_glad_glFramebufferTextureFaceARB;
    if (mz_glad_glFramebufferTextureLayer == NULL && mz_glad_glFramebufferTextureLayerARB != NULL) mz_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)mz_glad_glFramebufferTextureLayerARB;
    if (mz_glad_glFramebufferTextureLayer == NULL && mz_glad_glFramebufferTextureLayerEXT != NULL) mz_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)mz_glad_glFramebufferTextureLayerEXT;
    if (mz_glad_glFramebufferTextureLayerARB == NULL && mz_glad_glFramebufferTextureLayerEXT != NULL) mz_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)mz_glad_glFramebufferTextureLayerEXT;
    if (mz_glad_glFramebufferTextureLayerARB == NULL && mz_glad_glFramebufferTextureLayer != NULL) mz_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)mz_glad_glFramebufferTextureLayer;
    if (mz_glad_glFramebufferTextureLayerEXT == NULL && mz_glad_glFramebufferTextureLayerARB != NULL) mz_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)mz_glad_glFramebufferTextureLayerARB;
    if (mz_glad_glFramebufferTextureLayerEXT == NULL && mz_glad_glFramebufferTextureLayer != NULL) mz_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)mz_glad_glFramebufferTextureLayer;
    if (mz_glad_glGenBuffers == NULL && mz_glad_glGenBuffersARB != NULL) mz_glad_glGenBuffers = (PFNGLGENBUFFERSPROC)mz_glad_glGenBuffersARB;
    if (mz_glad_glGenBuffersARB == NULL && mz_glad_glGenBuffers != NULL) mz_glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)mz_glad_glGenBuffers;
    if (mz_glad_glGenerateMipmap == NULL && mz_glad_glGenerateMipmapEXT != NULL) mz_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)mz_glad_glGenerateMipmapEXT;
    if (mz_glad_glGenerateMipmapEXT == NULL && mz_glad_glGenerateMipmap != NULL) mz_glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)mz_glad_glGenerateMipmap;
    if (mz_glad_glGenFramebuffers == NULL && mz_glad_glGenFramebuffersEXT != NULL) mz_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)mz_glad_glGenFramebuffersEXT;
    if (mz_glad_glGenFramebuffersEXT == NULL && mz_glad_glGenFramebuffers != NULL) mz_glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)mz_glad_glGenFramebuffers;
    if (mz_glad_glGenProgramsARB == NULL && mz_glad_glGenProgramsNV != NULL) mz_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)mz_glad_glGenProgramsNV;
    if (mz_glad_glGenProgramsNV == NULL && mz_glad_glGenProgramsARB != NULL) mz_glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)mz_glad_glGenProgramsARB;
    if (mz_glad_glGenRenderbuffers == NULL && mz_glad_glGenRenderbuffersEXT != NULL) mz_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)mz_glad_glGenRenderbuffersEXT;
    if (mz_glad_glGenRenderbuffersEXT == NULL && mz_glad_glGenRenderbuffers != NULL) mz_glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)mz_glad_glGenRenderbuffers;
    if (mz_glad_glGetActiveAttrib == NULL && mz_glad_glGetActiveAttribARB != NULL) mz_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)mz_glad_glGetActiveAttribARB;
    if (mz_glad_glGetActiveAttribARB == NULL && mz_glad_glGetActiveAttrib != NULL) mz_glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)mz_glad_glGetActiveAttrib;
    if (mz_glad_glGetActiveUniform == NULL && mz_glad_glGetActiveUniformARB != NULL) mz_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)mz_glad_glGetActiveUniformARB;
    if (mz_glad_glGetActiveUniformARB == NULL && mz_glad_glGetActiveUniform != NULL) mz_glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)mz_glad_glGetActiveUniform;
    if (mz_glad_glGetAttribLocation == NULL && mz_glad_glGetAttribLocationARB != NULL) mz_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)mz_glad_glGetAttribLocationARB;
    if (mz_glad_glGetAttribLocationARB == NULL && mz_glad_glGetAttribLocation != NULL) mz_glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)mz_glad_glGetAttribLocation;
    if (mz_glad_glGetBufferParameteriv == NULL && mz_glad_glGetBufferParameterivARB != NULL) mz_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)mz_glad_glGetBufferParameterivARB;
    if (mz_glad_glGetBufferParameterivARB == NULL && mz_glad_glGetBufferParameteriv != NULL) mz_glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)mz_glad_glGetBufferParameteriv;
    if (mz_glad_glGetBufferPointerv == NULL && mz_glad_glGetBufferPointervARB != NULL) mz_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)mz_glad_glGetBufferPointervARB;
    if (mz_glad_glGetBufferPointervARB == NULL && mz_glad_glGetBufferPointerv != NULL) mz_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)mz_glad_glGetBufferPointerv;
    if (mz_glad_glGetBufferSubData == NULL && mz_glad_glGetBufferSubDataARB != NULL) mz_glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)mz_glad_glGetBufferSubDataARB;
    if (mz_glad_glGetBufferSubDataARB == NULL && mz_glad_glGetBufferSubData != NULL) mz_glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)mz_glad_glGetBufferSubData;
    if (mz_glad_glGetFramebufferAttachmentParameteriv == NULL && mz_glad_glGetFramebufferAttachmentParameterivEXT != NULL) mz_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)mz_glad_glGetFramebufferAttachmentParameterivEXT;
    if (mz_glad_glGetFramebufferAttachmentParameterivEXT == NULL && mz_glad_glGetFramebufferAttachmentParameteriv != NULL) mz_glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)mz_glad_glGetFramebufferAttachmentParameteriv;
    if (mz_glad_glGetPointerv == NULL && mz_glad_glGetPointervEXT != NULL) mz_glad_glGetPointerv = (PFNGLGETPOINTERVPROC)mz_glad_glGetPointervEXT;
    if (mz_glad_glGetPointervEXT == NULL && mz_glad_glGetPointerv != NULL) mz_glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)mz_glad_glGetPointerv;
    if (mz_glad_glGetRenderbufferParameteriv == NULL && mz_glad_glGetRenderbufferParameterivEXT != NULL) mz_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)mz_glad_glGetRenderbufferParameterivEXT;
    if (mz_glad_glGetRenderbufferParameterivEXT == NULL && mz_glad_glGetRenderbufferParameteriv != NULL) mz_glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)mz_glad_glGetRenderbufferParameteriv;
    if (mz_glad_glGetShaderSource == NULL && mz_glad_glGetShaderSourceARB != NULL) mz_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)mz_glad_glGetShaderSourceARB;
    if (mz_glad_glGetShaderSourceARB == NULL && mz_glad_glGetShaderSource != NULL) mz_glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)mz_glad_glGetShaderSource;
    if (mz_glad_glGetUniformfv == NULL && mz_glad_glGetUniformfvARB != NULL) mz_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)mz_glad_glGetUniformfvARB;
    if (mz_glad_glGetUniformfvARB == NULL && mz_glad_glGetUniformfv != NULL) mz_glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)mz_glad_glGetUniformfv;
    if (mz_glad_glGetUniformiv == NULL && mz_glad_glGetUniformivARB != NULL) mz_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)mz_glad_glGetUniformivARB;
    if (mz_glad_glGetUniformivARB == NULL && mz_glad_glGetUniformiv != NULL) mz_glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)mz_glad_glGetUniformiv;
    if (mz_glad_glGetUniformLocation == NULL && mz_glad_glGetUniformLocationARB != NULL) mz_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)mz_glad_glGetUniformLocationARB;
    if (mz_glad_glGetUniformLocationARB == NULL && mz_glad_glGetUniformLocation != NULL) mz_glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)mz_glad_glGetUniformLocation;
    if (mz_glad_glGetVertexAttribdv == NULL && mz_glad_glGetVertexAttribdvARB != NULL) mz_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)mz_glad_glGetVertexAttribdvARB;
    if (mz_glad_glGetVertexAttribdv == NULL && mz_glad_glGetVertexAttribdvNV != NULL) mz_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)mz_glad_glGetVertexAttribdvNV;
    if (mz_glad_glGetVertexAttribdvARB == NULL && mz_glad_glGetVertexAttribdv != NULL) mz_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)mz_glad_glGetVertexAttribdv;
    if (mz_glad_glGetVertexAttribdvARB == NULL && mz_glad_glGetVertexAttribdvNV != NULL) mz_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)mz_glad_glGetVertexAttribdvNV;
    if (mz_glad_glGetVertexAttribdvNV == NULL && mz_glad_glGetVertexAttribdv != NULL) mz_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)mz_glad_glGetVertexAttribdv;
    if (mz_glad_glGetVertexAttribdvNV == NULL && mz_glad_glGetVertexAttribdvARB != NULL) mz_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)mz_glad_glGetVertexAttribdvARB;
    if (mz_glad_glGetVertexAttribfv == NULL && mz_glad_glGetVertexAttribfvARB != NULL) mz_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)mz_glad_glGetVertexAttribfvARB;
    if (mz_glad_glGetVertexAttribfv == NULL && mz_glad_glGetVertexAttribfvNV != NULL) mz_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)mz_glad_glGetVertexAttribfvNV;
    if (mz_glad_glGetVertexAttribfvARB == NULL && mz_glad_glGetVertexAttribfv != NULL) mz_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)mz_glad_glGetVertexAttribfv;
    if (mz_glad_glGetVertexAttribfvARB == NULL && mz_glad_glGetVertexAttribfvNV != NULL) mz_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)mz_glad_glGetVertexAttribfvNV;
    if (mz_glad_glGetVertexAttribfvNV == NULL && mz_glad_glGetVertexAttribfvARB != NULL) mz_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)mz_glad_glGetVertexAttribfvARB;
    if (mz_glad_glGetVertexAttribfvNV == NULL && mz_glad_glGetVertexAttribfv != NULL) mz_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)mz_glad_glGetVertexAttribfv;
    if (mz_glad_glGetVertexAttribiv == NULL && mz_glad_glGetVertexAttribivNV != NULL) mz_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)mz_glad_glGetVertexAttribivNV;
    if (mz_glad_glGetVertexAttribiv == NULL && mz_glad_glGetVertexAttribivARB != NULL) mz_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)mz_glad_glGetVertexAttribivARB;
    if (mz_glad_glGetVertexAttribivARB == NULL && mz_glad_glGetVertexAttribivNV != NULL) mz_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)mz_glad_glGetVertexAttribivNV;
    if (mz_glad_glGetVertexAttribivARB == NULL && mz_glad_glGetVertexAttribiv != NULL) mz_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)mz_glad_glGetVertexAttribiv;
    if (mz_glad_glGetVertexAttribivNV == NULL && mz_glad_glGetVertexAttribiv != NULL) mz_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)mz_glad_glGetVertexAttribiv;
    if (mz_glad_glGetVertexAttribivNV == NULL && mz_glad_glGetVertexAttribivARB != NULL) mz_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)mz_glad_glGetVertexAttribivARB;
    if (mz_glad_glGetVertexAttribPointerv == NULL && mz_glad_glGetVertexAttribPointervNV != NULL) mz_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)mz_glad_glGetVertexAttribPointervNV;
    if (mz_glad_glGetVertexAttribPointerv == NULL && mz_glad_glGetVertexAttribPointervARB != NULL) mz_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)mz_glad_glGetVertexAttribPointervARB;
    if (mz_glad_glGetVertexAttribPointervARB == NULL && mz_glad_glGetVertexAttribPointervNV != NULL) mz_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)mz_glad_glGetVertexAttribPointervNV;
    if (mz_glad_glGetVertexAttribPointervARB == NULL && mz_glad_glGetVertexAttribPointerv != NULL) mz_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)mz_glad_glGetVertexAttribPointerv;
    if (mz_glad_glGetVertexAttribPointervNV == NULL && mz_glad_glGetVertexAttribPointerv != NULL) mz_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)mz_glad_glGetVertexAttribPointerv;
    if (mz_glad_glGetVertexAttribPointervNV == NULL && mz_glad_glGetVertexAttribPointervARB != NULL) mz_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)mz_glad_glGetVertexAttribPointervARB;
    if (mz_glad_glIsBuffer == NULL && mz_glad_glIsBufferARB != NULL) mz_glad_glIsBuffer = (PFNGLISBUFFERPROC)mz_glad_glIsBufferARB;
    if (mz_glad_glIsBufferARB == NULL && mz_glad_glIsBuffer != NULL) mz_glad_glIsBufferARB = (PFNGLISBUFFERARBPROC)mz_glad_glIsBuffer;
    if (mz_glad_glIsFramebuffer == NULL && mz_glad_glIsFramebufferEXT != NULL) mz_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)mz_glad_glIsFramebufferEXT;
    if (mz_glad_glIsFramebufferEXT == NULL && mz_glad_glIsFramebuffer != NULL) mz_glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)mz_glad_glIsFramebuffer;
    if (mz_glad_glIsProgramARB == NULL && mz_glad_glIsProgramNV != NULL) mz_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC)mz_glad_glIsProgramNV;
    if (mz_glad_glIsProgramNV == NULL && mz_glad_glIsProgramARB != NULL) mz_glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC)mz_glad_glIsProgramARB;
    if (mz_glad_glIsRenderbuffer == NULL && mz_glad_glIsRenderbufferEXT != NULL) mz_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)mz_glad_glIsRenderbufferEXT;
    if (mz_glad_glIsRenderbufferEXT == NULL && mz_glad_glIsRenderbuffer != NULL) mz_glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)mz_glad_glIsRenderbuffer;
    if (mz_glad_glLinkProgram == NULL && mz_glad_glLinkProgramARB != NULL) mz_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC)mz_glad_glLinkProgramARB;
    if (mz_glad_glLinkProgramARB == NULL && mz_glad_glLinkProgram != NULL) mz_glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)mz_glad_glLinkProgram;
    if (mz_glad_glMapBuffer == NULL && mz_glad_glMapBufferARB != NULL) mz_glad_glMapBuffer = (PFNGLMAPBUFFERPROC)mz_glad_glMapBufferARB;
    if (mz_glad_glMapBufferARB == NULL && mz_glad_glMapBuffer != NULL) mz_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)mz_glad_glMapBuffer;
    if (mz_glad_glMultiTexCoord1d == NULL && mz_glad_glMultiTexCoord1dARB != NULL) mz_glad_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)mz_glad_glMultiTexCoord1dARB;
    if (mz_glad_glMultiTexCoord1dARB == NULL && mz_glad_glMultiTexCoord1d != NULL) mz_glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)mz_glad_glMultiTexCoord1d;
    if (mz_glad_glMultiTexCoord1dv == NULL && mz_glad_glMultiTexCoord1dvARB != NULL) mz_glad_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)mz_glad_glMultiTexCoord1dvARB;
    if (mz_glad_glMultiTexCoord1dvARB == NULL && mz_glad_glMultiTexCoord1dv != NULL) mz_glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)mz_glad_glMultiTexCoord1dv;
    if (mz_glad_glMultiTexCoord1f == NULL && mz_glad_glMultiTexCoord1fARB != NULL) mz_glad_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)mz_glad_glMultiTexCoord1fARB;
    if (mz_glad_glMultiTexCoord1fARB == NULL && mz_glad_glMultiTexCoord1f != NULL) mz_glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)mz_glad_glMultiTexCoord1f;
    if (mz_glad_glMultiTexCoord1fv == NULL && mz_glad_glMultiTexCoord1fvARB != NULL) mz_glad_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)mz_glad_glMultiTexCoord1fvARB;
    if (mz_glad_glMultiTexCoord1fvARB == NULL && mz_glad_glMultiTexCoord1fv != NULL) mz_glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)mz_glad_glMultiTexCoord1fv;
    if (mz_glad_glMultiTexCoord1i == NULL && mz_glad_glMultiTexCoord1iARB != NULL) mz_glad_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)mz_glad_glMultiTexCoord1iARB;
    if (mz_glad_glMultiTexCoord1iARB == NULL && mz_glad_glMultiTexCoord1i != NULL) mz_glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)mz_glad_glMultiTexCoord1i;
    if (mz_glad_glMultiTexCoord1iv == NULL && mz_glad_glMultiTexCoord1ivARB != NULL) mz_glad_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)mz_glad_glMultiTexCoord1ivARB;
    if (mz_glad_glMultiTexCoord1ivARB == NULL && mz_glad_glMultiTexCoord1iv != NULL) mz_glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)mz_glad_glMultiTexCoord1iv;
    if (mz_glad_glMultiTexCoord1s == NULL && mz_glad_glMultiTexCoord1sARB != NULL) mz_glad_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)mz_glad_glMultiTexCoord1sARB;
    if (mz_glad_glMultiTexCoord1sARB == NULL && mz_glad_glMultiTexCoord1s != NULL) mz_glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)mz_glad_glMultiTexCoord1s;
    if (mz_glad_glMultiTexCoord1sv == NULL && mz_glad_glMultiTexCoord1svARB != NULL) mz_glad_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)mz_glad_glMultiTexCoord1svARB;
    if (mz_glad_glMultiTexCoord1svARB == NULL && mz_glad_glMultiTexCoord1sv != NULL) mz_glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)mz_glad_glMultiTexCoord1sv;
    if (mz_glad_glMultiTexCoord2d == NULL && mz_glad_glMultiTexCoord2dARB != NULL) mz_glad_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)mz_glad_glMultiTexCoord2dARB;
    if (mz_glad_glMultiTexCoord2dARB == NULL && mz_glad_glMultiTexCoord2d != NULL) mz_glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)mz_glad_glMultiTexCoord2d;
    if (mz_glad_glMultiTexCoord2dv == NULL && mz_glad_glMultiTexCoord2dvARB != NULL) mz_glad_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)mz_glad_glMultiTexCoord2dvARB;
    if (mz_glad_glMultiTexCoord2dvARB == NULL && mz_glad_glMultiTexCoord2dv != NULL) mz_glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)mz_glad_glMultiTexCoord2dv;
    if (mz_glad_glMultiTexCoord2f == NULL && mz_glad_glMultiTexCoord2fARB != NULL) mz_glad_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)mz_glad_glMultiTexCoord2fARB;
    if (mz_glad_glMultiTexCoord2fARB == NULL && mz_glad_glMultiTexCoord2f != NULL) mz_glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)mz_glad_glMultiTexCoord2f;
    if (mz_glad_glMultiTexCoord2fv == NULL && mz_glad_glMultiTexCoord2fvARB != NULL) mz_glad_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)mz_glad_glMultiTexCoord2fvARB;
    if (mz_glad_glMultiTexCoord2fvARB == NULL && mz_glad_glMultiTexCoord2fv != NULL) mz_glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)mz_glad_glMultiTexCoord2fv;
    if (mz_glad_glMultiTexCoord2i == NULL && mz_glad_glMultiTexCoord2iARB != NULL) mz_glad_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)mz_glad_glMultiTexCoord2iARB;
    if (mz_glad_glMultiTexCoord2iARB == NULL && mz_glad_glMultiTexCoord2i != NULL) mz_glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)mz_glad_glMultiTexCoord2i;
    if (mz_glad_glMultiTexCoord2iv == NULL && mz_glad_glMultiTexCoord2ivARB != NULL) mz_glad_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)mz_glad_glMultiTexCoord2ivARB;
    if (mz_glad_glMultiTexCoord2ivARB == NULL && mz_glad_glMultiTexCoord2iv != NULL) mz_glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)mz_glad_glMultiTexCoord2iv;
    if (mz_glad_glMultiTexCoord2s == NULL && mz_glad_glMultiTexCoord2sARB != NULL) mz_glad_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)mz_glad_glMultiTexCoord2sARB;
    if (mz_glad_glMultiTexCoord2sARB == NULL && mz_glad_glMultiTexCoord2s != NULL) mz_glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)mz_glad_glMultiTexCoord2s;
    if (mz_glad_glMultiTexCoord2sv == NULL && mz_glad_glMultiTexCoord2svARB != NULL) mz_glad_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)mz_glad_glMultiTexCoord2svARB;
    if (mz_glad_glMultiTexCoord2svARB == NULL && mz_glad_glMultiTexCoord2sv != NULL) mz_glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)mz_glad_glMultiTexCoord2sv;
    if (mz_glad_glMultiTexCoord3d == NULL && mz_glad_glMultiTexCoord3dARB != NULL) mz_glad_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)mz_glad_glMultiTexCoord3dARB;
    if (mz_glad_glMultiTexCoord3dARB == NULL && mz_glad_glMultiTexCoord3d != NULL) mz_glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)mz_glad_glMultiTexCoord3d;
    if (mz_glad_glMultiTexCoord3dv == NULL && mz_glad_glMultiTexCoord3dvARB != NULL) mz_glad_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)mz_glad_glMultiTexCoord3dvARB;
    if (mz_glad_glMultiTexCoord3dvARB == NULL && mz_glad_glMultiTexCoord3dv != NULL) mz_glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)mz_glad_glMultiTexCoord3dv;
    if (mz_glad_glMultiTexCoord3f == NULL && mz_glad_glMultiTexCoord3fARB != NULL) mz_glad_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)mz_glad_glMultiTexCoord3fARB;
    if (mz_glad_glMultiTexCoord3fARB == NULL && mz_glad_glMultiTexCoord3f != NULL) mz_glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)mz_glad_glMultiTexCoord3f;
    if (mz_glad_glMultiTexCoord3fv == NULL && mz_glad_glMultiTexCoord3fvARB != NULL) mz_glad_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)mz_glad_glMultiTexCoord3fvARB;
    if (mz_glad_glMultiTexCoord3fvARB == NULL && mz_glad_glMultiTexCoord3fv != NULL) mz_glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)mz_glad_glMultiTexCoord3fv;
    if (mz_glad_glMultiTexCoord3i == NULL && mz_glad_glMultiTexCoord3iARB != NULL) mz_glad_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)mz_glad_glMultiTexCoord3iARB;
    if (mz_glad_glMultiTexCoord3iARB == NULL && mz_glad_glMultiTexCoord3i != NULL) mz_glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)mz_glad_glMultiTexCoord3i;
    if (mz_glad_glMultiTexCoord3iv == NULL && mz_glad_glMultiTexCoord3ivARB != NULL) mz_glad_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)mz_glad_glMultiTexCoord3ivARB;
    if (mz_glad_glMultiTexCoord3ivARB == NULL && mz_glad_glMultiTexCoord3iv != NULL) mz_glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)mz_glad_glMultiTexCoord3iv;
    if (mz_glad_glMultiTexCoord3s == NULL && mz_glad_glMultiTexCoord3sARB != NULL) mz_glad_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)mz_glad_glMultiTexCoord3sARB;
    if (mz_glad_glMultiTexCoord3sARB == NULL && mz_glad_glMultiTexCoord3s != NULL) mz_glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)mz_glad_glMultiTexCoord3s;
    if (mz_glad_glMultiTexCoord3sv == NULL && mz_glad_glMultiTexCoord3svARB != NULL) mz_glad_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)mz_glad_glMultiTexCoord3svARB;
    if (mz_glad_glMultiTexCoord3svARB == NULL && mz_glad_glMultiTexCoord3sv != NULL) mz_glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)mz_glad_glMultiTexCoord3sv;
    if (mz_glad_glMultiTexCoord4d == NULL && mz_glad_glMultiTexCoord4dARB != NULL) mz_glad_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)mz_glad_glMultiTexCoord4dARB;
    if (mz_glad_glMultiTexCoord4dARB == NULL && mz_glad_glMultiTexCoord4d != NULL) mz_glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)mz_glad_glMultiTexCoord4d;
    if (mz_glad_glMultiTexCoord4dv == NULL && mz_glad_glMultiTexCoord4dvARB != NULL) mz_glad_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)mz_glad_glMultiTexCoord4dvARB;
    if (mz_glad_glMultiTexCoord4dvARB == NULL && mz_glad_glMultiTexCoord4dv != NULL) mz_glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)mz_glad_glMultiTexCoord4dv;
    if (mz_glad_glMultiTexCoord4f == NULL && mz_glad_glMultiTexCoord4fARB != NULL) mz_glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)mz_glad_glMultiTexCoord4fARB;
    if (mz_glad_glMultiTexCoord4fARB == NULL && mz_glad_glMultiTexCoord4f != NULL) mz_glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)mz_glad_glMultiTexCoord4f;
    if (mz_glad_glMultiTexCoord4fv == NULL && mz_glad_glMultiTexCoord4fvARB != NULL) mz_glad_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)mz_glad_glMultiTexCoord4fvARB;
    if (mz_glad_glMultiTexCoord4fvARB == NULL && mz_glad_glMultiTexCoord4fv != NULL) mz_glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)mz_glad_glMultiTexCoord4fv;
    if (mz_glad_glMultiTexCoord4i == NULL && mz_glad_glMultiTexCoord4iARB != NULL) mz_glad_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)mz_glad_glMultiTexCoord4iARB;
    if (mz_glad_glMultiTexCoord4iARB == NULL && mz_glad_glMultiTexCoord4i != NULL) mz_glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)mz_glad_glMultiTexCoord4i;
    if (mz_glad_glMultiTexCoord4iv == NULL && mz_glad_glMultiTexCoord4ivARB != NULL) mz_glad_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)mz_glad_glMultiTexCoord4ivARB;
    if (mz_glad_glMultiTexCoord4ivARB == NULL && mz_glad_glMultiTexCoord4iv != NULL) mz_glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)mz_glad_glMultiTexCoord4iv;
    if (mz_glad_glMultiTexCoord4s == NULL && mz_glad_glMultiTexCoord4sARB != NULL) mz_glad_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)mz_glad_glMultiTexCoord4sARB;
    if (mz_glad_glMultiTexCoord4sARB == NULL && mz_glad_glMultiTexCoord4s != NULL) mz_glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)mz_glad_glMultiTexCoord4s;
    if (mz_glad_glMultiTexCoord4sv == NULL && mz_glad_glMultiTexCoord4svARB != NULL) mz_glad_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)mz_glad_glMultiTexCoord4svARB;
    if (mz_glad_glMultiTexCoord4svARB == NULL && mz_glad_glMultiTexCoord4sv != NULL) mz_glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)mz_glad_glMultiTexCoord4sv;
    if (mz_glad_glPrioritizeTextures == NULL && mz_glad_glPrioritizeTexturesEXT != NULL) mz_glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)mz_glad_glPrioritizeTexturesEXT;
    if (mz_glad_glPrioritizeTexturesEXT == NULL && mz_glad_glPrioritizeTextures != NULL) mz_glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)mz_glad_glPrioritizeTextures;
    if (mz_glad_glProgramParameteri == NULL && mz_glad_glProgramParameteriARB != NULL) mz_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)mz_glad_glProgramParameteriARB;
    if (mz_glad_glProgramParameteri == NULL && mz_glad_glProgramParameteriEXT != NULL) mz_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)mz_glad_glProgramParameteriEXT;
    if (mz_glad_glProgramParameteriARB == NULL && mz_glad_glProgramParameteri != NULL) mz_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)mz_glad_glProgramParameteri;
    if (mz_glad_glProgramParameteriARB == NULL && mz_glad_glProgramParameteriEXT != NULL) mz_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)mz_glad_glProgramParameteriEXT;
    if (mz_glad_glProgramParameteriEXT == NULL && mz_glad_glProgramParameteriARB != NULL) mz_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)mz_glad_glProgramParameteriARB;
    if (mz_glad_glProgramParameteriEXT == NULL && mz_glad_glProgramParameteri != NULL) mz_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)mz_glad_glProgramParameteri;
    if (mz_glad_glRenderbufferStorage == NULL && mz_glad_glRenderbufferStorageEXT != NULL) mz_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)mz_glad_glRenderbufferStorageEXT;
    if (mz_glad_glRenderbufferStorageEXT == NULL && mz_glad_glRenderbufferStorage != NULL) mz_glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)mz_glad_glRenderbufferStorage;
    if (mz_glad_glRenderbufferStorageMultisample == NULL && mz_glad_glRenderbufferStorageMultisampleEXT != NULL) mz_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)mz_glad_glRenderbufferStorageMultisampleEXT;
    if (mz_glad_glRenderbufferStorageMultisampleEXT == NULL && mz_glad_glRenderbufferStorageMultisample != NULL) mz_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)mz_glad_glRenderbufferStorageMultisample;
    if (mz_glad_glShaderSource == NULL && mz_glad_glShaderSourceARB != NULL) mz_glad_glShaderSource = (PFNGLSHADERSOURCEPROC)mz_glad_glShaderSourceARB;
    if (mz_glad_glShaderSourceARB == NULL && mz_glad_glShaderSource != NULL) mz_glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)mz_glad_glShaderSource;
    if (mz_glad_glTexSubImage1D == NULL && mz_glad_glTexSubImage1DEXT != NULL) mz_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)mz_glad_glTexSubImage1DEXT;
    if (mz_glad_glTexSubImage1DEXT == NULL && mz_glad_glTexSubImage1D != NULL) mz_glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)mz_glad_glTexSubImage1D;
    if (mz_glad_glTexSubImage2D == NULL && mz_glad_glTexSubImage2DEXT != NULL) mz_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)mz_glad_glTexSubImage2DEXT;
    if (mz_glad_glTexSubImage2DEXT == NULL && mz_glad_glTexSubImage2D != NULL) mz_glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)mz_glad_glTexSubImage2D;
    if (mz_glad_glUniform1f == NULL && mz_glad_glUniform1fARB != NULL) mz_glad_glUniform1f = (PFNGLUNIFORM1FPROC)mz_glad_glUniform1fARB;
    if (mz_glad_glUniform1fARB == NULL && mz_glad_glUniform1f != NULL) mz_glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC)mz_glad_glUniform1f;
    if (mz_glad_glUniform1fv == NULL && mz_glad_glUniform1fvARB != NULL) mz_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC)mz_glad_glUniform1fvARB;
    if (mz_glad_glUniform1fvARB == NULL && mz_glad_glUniform1fv != NULL) mz_glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)mz_glad_glUniform1fv;
    if (mz_glad_glUniform1i == NULL && mz_glad_glUniform1iARB != NULL) mz_glad_glUniform1i = (PFNGLUNIFORM1IPROC)mz_glad_glUniform1iARB;
    if (mz_glad_glUniform1iARB == NULL && mz_glad_glUniform1i != NULL) mz_glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC)mz_glad_glUniform1i;
    if (mz_glad_glUniform1iv == NULL && mz_glad_glUniform1ivARB != NULL) mz_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC)mz_glad_glUniform1ivARB;
    if (mz_glad_glUniform1ivARB == NULL && mz_glad_glUniform1iv != NULL) mz_glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)mz_glad_glUniform1iv;
    if (mz_glad_glUniform2f == NULL && mz_glad_glUniform2fARB != NULL) mz_glad_glUniform2f = (PFNGLUNIFORM2FPROC)mz_glad_glUniform2fARB;
    if (mz_glad_glUniform2fARB == NULL && mz_glad_glUniform2f != NULL) mz_glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC)mz_glad_glUniform2f;
    if (mz_glad_glUniform2fv == NULL && mz_glad_glUniform2fvARB != NULL) mz_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC)mz_glad_glUniform2fvARB;
    if (mz_glad_glUniform2fvARB == NULL && mz_glad_glUniform2fv != NULL) mz_glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)mz_glad_glUniform2fv;
    if (mz_glad_glUniform2i == NULL && mz_glad_glUniform2iARB != NULL) mz_glad_glUniform2i = (PFNGLUNIFORM2IPROC)mz_glad_glUniform2iARB;
    if (mz_glad_glUniform2iARB == NULL && mz_glad_glUniform2i != NULL) mz_glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC)mz_glad_glUniform2i;
    if (mz_glad_glUniform2iv == NULL && mz_glad_glUniform2ivARB != NULL) mz_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC)mz_glad_glUniform2ivARB;
    if (mz_glad_glUniform2ivARB == NULL && mz_glad_glUniform2iv != NULL) mz_glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)mz_glad_glUniform2iv;
    if (mz_glad_glUniform3f == NULL && mz_glad_glUniform3fARB != NULL) mz_glad_glUniform3f = (PFNGLUNIFORM3FPROC)mz_glad_glUniform3fARB;
    if (mz_glad_glUniform3fARB == NULL && mz_glad_glUniform3f != NULL) mz_glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC)mz_glad_glUniform3f;
    if (mz_glad_glUniform3fv == NULL && mz_glad_glUniform3fvARB != NULL) mz_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC)mz_glad_glUniform3fvARB;
    if (mz_glad_glUniform3fvARB == NULL && mz_glad_glUniform3fv != NULL) mz_glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)mz_glad_glUniform3fv;
    if (mz_glad_glUniform3i == NULL && mz_glad_glUniform3iARB != NULL) mz_glad_glUniform3i = (PFNGLUNIFORM3IPROC)mz_glad_glUniform3iARB;
    if (mz_glad_glUniform3iARB == NULL && mz_glad_glUniform3i != NULL) mz_glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC)mz_glad_glUniform3i;
    if (mz_glad_glUniform3iv == NULL && mz_glad_glUniform3ivARB != NULL) mz_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC)mz_glad_glUniform3ivARB;
    if (mz_glad_glUniform3ivARB == NULL && mz_glad_glUniform3iv != NULL) mz_glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)mz_glad_glUniform3iv;
    if (mz_glad_glUniform4f == NULL && mz_glad_glUniform4fARB != NULL) mz_glad_glUniform4f = (PFNGLUNIFORM4FPROC)mz_glad_glUniform4fARB;
    if (mz_glad_glUniform4fARB == NULL && mz_glad_glUniform4f != NULL) mz_glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC)mz_glad_glUniform4f;
    if (mz_glad_glUniform4fv == NULL && mz_glad_glUniform4fvARB != NULL) mz_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC)mz_glad_glUniform4fvARB;
    if (mz_glad_glUniform4fvARB == NULL && mz_glad_glUniform4fv != NULL) mz_glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)mz_glad_glUniform4fv;
    if (mz_glad_glUniform4i == NULL && mz_glad_glUniform4iARB != NULL) mz_glad_glUniform4i = (PFNGLUNIFORM4IPROC)mz_glad_glUniform4iARB;
    if (mz_glad_glUniform4iARB == NULL && mz_glad_glUniform4i != NULL) mz_glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC)mz_glad_glUniform4i;
    if (mz_glad_glUniform4iv == NULL && mz_glad_glUniform4ivARB != NULL) mz_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC)mz_glad_glUniform4ivARB;
    if (mz_glad_glUniform4ivARB == NULL && mz_glad_glUniform4iv != NULL) mz_glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)mz_glad_glUniform4iv;
    if (mz_glad_glUniformMatrix2fv == NULL && mz_glad_glUniformMatrix2fvARB != NULL) mz_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)mz_glad_glUniformMatrix2fvARB;
    if (mz_glad_glUniformMatrix2fvARB == NULL && mz_glad_glUniformMatrix2fv != NULL) mz_glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)mz_glad_glUniformMatrix2fv;
    if (mz_glad_glUniformMatrix3fv == NULL && mz_glad_glUniformMatrix3fvARB != NULL) mz_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)mz_glad_glUniformMatrix3fvARB;
    if (mz_glad_glUniformMatrix3fvARB == NULL && mz_glad_glUniformMatrix3fv != NULL) mz_glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)mz_glad_glUniformMatrix3fv;
    if (mz_glad_glUniformMatrix4fv == NULL && mz_glad_glUniformMatrix4fvARB != NULL) mz_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)mz_glad_glUniformMatrix4fvARB;
    if (mz_glad_glUniformMatrix4fvARB == NULL && mz_glad_glUniformMatrix4fv != NULL) mz_glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)mz_glad_glUniformMatrix4fv;
    if (mz_glad_glUnmapBuffer == NULL && mz_glad_glUnmapBufferARB != NULL) mz_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)mz_glad_glUnmapBufferARB;
    if (mz_glad_glUnmapBufferARB == NULL && mz_glad_glUnmapBuffer != NULL) mz_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)mz_glad_glUnmapBuffer;
    if (mz_glad_glUseProgram == NULL && mz_glad_glUseProgramObjectARB != NULL) mz_glad_glUseProgram = (PFNGLUSEPROGRAMPROC)mz_glad_glUseProgramObjectARB;
    if (mz_glad_glUseProgramObjectARB == NULL && mz_glad_glUseProgram != NULL) mz_glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)mz_glad_glUseProgram;
    if (mz_glad_glValidateProgram == NULL && mz_glad_glValidateProgramARB != NULL) mz_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)mz_glad_glValidateProgramARB;
    if (mz_glad_glValidateProgramARB == NULL && mz_glad_glValidateProgram != NULL) mz_glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)mz_glad_glValidateProgram;
    if (mz_glad_glVertexAttrib1d == NULL && mz_glad_glVertexAttrib1dNV != NULL) mz_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)mz_glad_glVertexAttrib1dNV;
    if (mz_glad_glVertexAttrib1d == NULL && mz_glad_glVertexAttrib1dARB != NULL) mz_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)mz_glad_glVertexAttrib1dARB;
    if (mz_glad_glVertexAttrib1dARB == NULL && mz_glad_glVertexAttrib1dNV != NULL) mz_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)mz_glad_glVertexAttrib1dNV;
    if (mz_glad_glVertexAttrib1dARB == NULL && mz_glad_glVertexAttrib1d != NULL) mz_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)mz_glad_glVertexAttrib1d;
    if (mz_glad_glVertexAttrib1dNV == NULL && mz_glad_glVertexAttrib1d != NULL) mz_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)mz_glad_glVertexAttrib1d;
    if (mz_glad_glVertexAttrib1dNV == NULL && mz_glad_glVertexAttrib1dARB != NULL) mz_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)mz_glad_glVertexAttrib1dARB;
    if (mz_glad_glVertexAttrib1dv == NULL && mz_glad_glVertexAttrib1dvARB != NULL) mz_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)mz_glad_glVertexAttrib1dvARB;
    if (mz_glad_glVertexAttrib1dv == NULL && mz_glad_glVertexAttrib1dvNV != NULL) mz_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)mz_glad_glVertexAttrib1dvNV;
    if (mz_glad_glVertexAttrib1dvARB == NULL && mz_glad_glVertexAttrib1dvNV != NULL) mz_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)mz_glad_glVertexAttrib1dvNV;
    if (mz_glad_glVertexAttrib1dvARB == NULL && mz_glad_glVertexAttrib1dv != NULL) mz_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)mz_glad_glVertexAttrib1dv;
    if (mz_glad_glVertexAttrib1dvNV == NULL && mz_glad_glVertexAttrib1dvARB != NULL) mz_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)mz_glad_glVertexAttrib1dvARB;
    if (mz_glad_glVertexAttrib1dvNV == NULL && mz_glad_glVertexAttrib1dv != NULL) mz_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)mz_glad_glVertexAttrib1dv;
    if (mz_glad_glVertexAttrib1f == NULL && mz_glad_glVertexAttrib1fNV != NULL) mz_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)mz_glad_glVertexAttrib1fNV;
    if (mz_glad_glVertexAttrib1f == NULL && mz_glad_glVertexAttrib1fARB != NULL) mz_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)mz_glad_glVertexAttrib1fARB;
    if (mz_glad_glVertexAttrib1fARB == NULL && mz_glad_glVertexAttrib1fNV != NULL) mz_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)mz_glad_glVertexAttrib1fNV;
    if (mz_glad_glVertexAttrib1fARB == NULL && mz_glad_glVertexAttrib1f != NULL) mz_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)mz_glad_glVertexAttrib1f;
    if (mz_glad_glVertexAttrib1fNV == NULL && mz_glad_glVertexAttrib1fARB != NULL) mz_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)mz_glad_glVertexAttrib1fARB;
    if (mz_glad_glVertexAttrib1fNV == NULL && mz_glad_glVertexAttrib1f != NULL) mz_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)mz_glad_glVertexAttrib1f;
    if (mz_glad_glVertexAttrib1fv == NULL && mz_glad_glVertexAttrib1fvARB != NULL) mz_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)mz_glad_glVertexAttrib1fvARB;
    if (mz_glad_glVertexAttrib1fv == NULL && mz_glad_glVertexAttrib1fvNV != NULL) mz_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)mz_glad_glVertexAttrib1fvNV;
    if (mz_glad_glVertexAttrib1fvARB == NULL && mz_glad_glVertexAttrib1fvNV != NULL) mz_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)mz_glad_glVertexAttrib1fvNV;
    if (mz_glad_glVertexAttrib1fvARB == NULL && mz_glad_glVertexAttrib1fv != NULL) mz_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)mz_glad_glVertexAttrib1fv;
    if (mz_glad_glVertexAttrib1fvNV == NULL && mz_glad_glVertexAttrib1fvARB != NULL) mz_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)mz_glad_glVertexAttrib1fvARB;
    if (mz_glad_glVertexAttrib1fvNV == NULL && mz_glad_glVertexAttrib1fv != NULL) mz_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)mz_glad_glVertexAttrib1fv;
    if (mz_glad_glVertexAttrib1s == NULL && mz_glad_glVertexAttrib1sNV != NULL) mz_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)mz_glad_glVertexAttrib1sNV;
    if (mz_glad_glVertexAttrib1s == NULL && mz_glad_glVertexAttrib1sARB != NULL) mz_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)mz_glad_glVertexAttrib1sARB;
    if (mz_glad_glVertexAttrib1sARB == NULL && mz_glad_glVertexAttrib1sNV != NULL) mz_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)mz_glad_glVertexAttrib1sNV;
    if (mz_glad_glVertexAttrib1sARB == NULL && mz_glad_glVertexAttrib1s != NULL) mz_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)mz_glad_glVertexAttrib1s;
    if (mz_glad_glVertexAttrib1sNV == NULL && mz_glad_glVertexAttrib1s != NULL) mz_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)mz_glad_glVertexAttrib1s;
    if (mz_glad_glVertexAttrib1sNV == NULL && mz_glad_glVertexAttrib1sARB != NULL) mz_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)mz_glad_glVertexAttrib1sARB;
    if (mz_glad_glVertexAttrib1sv == NULL && mz_glad_glVertexAttrib1svNV != NULL) mz_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)mz_glad_glVertexAttrib1svNV;
    if (mz_glad_glVertexAttrib1sv == NULL && mz_glad_glVertexAttrib1svARB != NULL) mz_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)mz_glad_glVertexAttrib1svARB;
    if (mz_glad_glVertexAttrib1svARB == NULL && mz_glad_glVertexAttrib1svNV != NULL) mz_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)mz_glad_glVertexAttrib1svNV;
    if (mz_glad_glVertexAttrib1svARB == NULL && mz_glad_glVertexAttrib1sv != NULL) mz_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)mz_glad_glVertexAttrib1sv;
    if (mz_glad_glVertexAttrib1svNV == NULL && mz_glad_glVertexAttrib1svARB != NULL) mz_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)mz_glad_glVertexAttrib1svARB;
    if (mz_glad_glVertexAttrib1svNV == NULL && mz_glad_glVertexAttrib1sv != NULL) mz_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)mz_glad_glVertexAttrib1sv;
    if (mz_glad_glVertexAttrib2d == NULL && mz_glad_glVertexAttrib2dARB != NULL) mz_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)mz_glad_glVertexAttrib2dARB;
    if (mz_glad_glVertexAttrib2d == NULL && mz_glad_glVertexAttrib2dNV != NULL) mz_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)mz_glad_glVertexAttrib2dNV;
    if (mz_glad_glVertexAttrib2dARB == NULL && mz_glad_glVertexAttrib2d != NULL) mz_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)mz_glad_glVertexAttrib2d;
    if (mz_glad_glVertexAttrib2dARB == NULL && mz_glad_glVertexAttrib2dNV != NULL) mz_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)mz_glad_glVertexAttrib2dNV;
    if (mz_glad_glVertexAttrib2dNV == NULL && mz_glad_glVertexAttrib2dARB != NULL) mz_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)mz_glad_glVertexAttrib2dARB;
    if (mz_glad_glVertexAttrib2dNV == NULL && mz_glad_glVertexAttrib2d != NULL) mz_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)mz_glad_glVertexAttrib2d;
    if (mz_glad_glVertexAttrib2dv == NULL && mz_glad_glVertexAttrib2dvARB != NULL) mz_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)mz_glad_glVertexAttrib2dvARB;
    if (mz_glad_glVertexAttrib2dv == NULL && mz_glad_glVertexAttrib2dvNV != NULL) mz_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)mz_glad_glVertexAttrib2dvNV;
    if (mz_glad_glVertexAttrib2dvARB == NULL && mz_glad_glVertexAttrib2dv != NULL) mz_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)mz_glad_glVertexAttrib2dv;
    if (mz_glad_glVertexAttrib2dvARB == NULL && mz_glad_glVertexAttrib2dvNV != NULL) mz_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)mz_glad_glVertexAttrib2dvNV;
    if (mz_glad_glVertexAttrib2dvNV == NULL && mz_glad_glVertexAttrib2dv != NULL) mz_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)mz_glad_glVertexAttrib2dv;
    if (mz_glad_glVertexAttrib2dvNV == NULL && mz_glad_glVertexAttrib2dvARB != NULL) mz_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)mz_glad_glVertexAttrib2dvARB;
    if (mz_glad_glVertexAttrib2f == NULL && mz_glad_glVertexAttrib2fARB != NULL) mz_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)mz_glad_glVertexAttrib2fARB;
    if (mz_glad_glVertexAttrib2f == NULL && mz_glad_glVertexAttrib2fNV != NULL) mz_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)mz_glad_glVertexAttrib2fNV;
    if (mz_glad_glVertexAttrib2fARB == NULL && mz_glad_glVertexAttrib2fNV != NULL) mz_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)mz_glad_glVertexAttrib2fNV;
    if (mz_glad_glVertexAttrib2fARB == NULL && mz_glad_glVertexAttrib2f != NULL) mz_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)mz_glad_glVertexAttrib2f;
    if (mz_glad_glVertexAttrib2fNV == NULL && mz_glad_glVertexAttrib2fARB != NULL) mz_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)mz_glad_glVertexAttrib2fARB;
    if (mz_glad_glVertexAttrib2fNV == NULL && mz_glad_glVertexAttrib2f != NULL) mz_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)mz_glad_glVertexAttrib2f;
    if (mz_glad_glVertexAttrib2fv == NULL && mz_glad_glVertexAttrib2fvNV != NULL) mz_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)mz_glad_glVertexAttrib2fvNV;
    if (mz_glad_glVertexAttrib2fv == NULL && mz_glad_glVertexAttrib2fvARB != NULL) mz_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)mz_glad_glVertexAttrib2fvARB;
    if (mz_glad_glVertexAttrib2fvARB == NULL && mz_glad_glVertexAttrib2fvNV != NULL) mz_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)mz_glad_glVertexAttrib2fvNV;
    if (mz_glad_glVertexAttrib2fvARB == NULL && mz_glad_glVertexAttrib2fv != NULL) mz_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)mz_glad_glVertexAttrib2fv;
    if (mz_glad_glVertexAttrib2fvNV == NULL && mz_glad_glVertexAttrib2fvARB != NULL) mz_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)mz_glad_glVertexAttrib2fvARB;
    if (mz_glad_glVertexAttrib2fvNV == NULL && mz_glad_glVertexAttrib2fv != NULL) mz_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)mz_glad_glVertexAttrib2fv;
    if (mz_glad_glVertexAttrib2s == NULL && mz_glad_glVertexAttrib2sARB != NULL) mz_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)mz_glad_glVertexAttrib2sARB;
    if (mz_glad_glVertexAttrib2s == NULL && mz_glad_glVertexAttrib2sNV != NULL) mz_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)mz_glad_glVertexAttrib2sNV;
    if (mz_glad_glVertexAttrib2sARB == NULL && mz_glad_glVertexAttrib2s != NULL) mz_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)mz_glad_glVertexAttrib2s;
    if (mz_glad_glVertexAttrib2sARB == NULL && mz_glad_glVertexAttrib2sNV != NULL) mz_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)mz_glad_glVertexAttrib2sNV;
    if (mz_glad_glVertexAttrib2sNV == NULL && mz_glad_glVertexAttrib2sARB != NULL) mz_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)mz_glad_glVertexAttrib2sARB;
    if (mz_glad_glVertexAttrib2sNV == NULL && mz_glad_glVertexAttrib2s != NULL) mz_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)mz_glad_glVertexAttrib2s;
    if (mz_glad_glVertexAttrib2sv == NULL && mz_glad_glVertexAttrib2svARB != NULL) mz_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)mz_glad_glVertexAttrib2svARB;
    if (mz_glad_glVertexAttrib2sv == NULL && mz_glad_glVertexAttrib2svNV != NULL) mz_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)mz_glad_glVertexAttrib2svNV;
    if (mz_glad_glVertexAttrib2svARB == NULL && mz_glad_glVertexAttrib2sv != NULL) mz_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)mz_glad_glVertexAttrib2sv;
    if (mz_glad_glVertexAttrib2svARB == NULL && mz_glad_glVertexAttrib2svNV != NULL) mz_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)mz_glad_glVertexAttrib2svNV;
    if (mz_glad_glVertexAttrib2svNV == NULL && mz_glad_glVertexAttrib2sv != NULL) mz_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)mz_glad_glVertexAttrib2sv;
    if (mz_glad_glVertexAttrib2svNV == NULL && mz_glad_glVertexAttrib2svARB != NULL) mz_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)mz_glad_glVertexAttrib2svARB;
    if (mz_glad_glVertexAttrib3d == NULL && mz_glad_glVertexAttrib3dARB != NULL) mz_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)mz_glad_glVertexAttrib3dARB;
    if (mz_glad_glVertexAttrib3d == NULL && mz_glad_glVertexAttrib3dNV != NULL) mz_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)mz_glad_glVertexAttrib3dNV;
    if (mz_glad_glVertexAttrib3dARB == NULL && mz_glad_glVertexAttrib3d != NULL) mz_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)mz_glad_glVertexAttrib3d;
    if (mz_glad_glVertexAttrib3dARB == NULL && mz_glad_glVertexAttrib3dNV != NULL) mz_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)mz_glad_glVertexAttrib3dNV;
    if (mz_glad_glVertexAttrib3dNV == NULL && mz_glad_glVertexAttrib3dARB != NULL) mz_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)mz_glad_glVertexAttrib3dARB;
    if (mz_glad_glVertexAttrib3dNV == NULL && mz_glad_glVertexAttrib3d != NULL) mz_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)mz_glad_glVertexAttrib3d;
    if (mz_glad_glVertexAttrib3dv == NULL && mz_glad_glVertexAttrib3dvARB != NULL) mz_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)mz_glad_glVertexAttrib3dvARB;
    if (mz_glad_glVertexAttrib3dv == NULL && mz_glad_glVertexAttrib3dvNV != NULL) mz_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)mz_glad_glVertexAttrib3dvNV;
    if (mz_glad_glVertexAttrib3dvARB == NULL && mz_glad_glVertexAttrib3dv != NULL) mz_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)mz_glad_glVertexAttrib3dv;
    if (mz_glad_glVertexAttrib3dvARB == NULL && mz_glad_glVertexAttrib3dvNV != NULL) mz_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)mz_glad_glVertexAttrib3dvNV;
    if (mz_glad_glVertexAttrib3dvNV == NULL && mz_glad_glVertexAttrib3dv != NULL) mz_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)mz_glad_glVertexAttrib3dv;
    if (mz_glad_glVertexAttrib3dvNV == NULL && mz_glad_glVertexAttrib3dvARB != NULL) mz_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)mz_glad_glVertexAttrib3dvARB;
    if (mz_glad_glVertexAttrib3f == NULL && mz_glad_glVertexAttrib3fARB != NULL) mz_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)mz_glad_glVertexAttrib3fARB;
    if (mz_glad_glVertexAttrib3f == NULL && mz_glad_glVertexAttrib3fNV != NULL) mz_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)mz_glad_glVertexAttrib3fNV;
    if (mz_glad_glVertexAttrib3fARB == NULL && mz_glad_glVertexAttrib3f != NULL) mz_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)mz_glad_glVertexAttrib3f;
    if (mz_glad_glVertexAttrib3fARB == NULL && mz_glad_glVertexAttrib3fNV != NULL) mz_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)mz_glad_glVertexAttrib3fNV;
    if (mz_glad_glVertexAttrib3fNV == NULL && mz_glad_glVertexAttrib3f != NULL) mz_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)mz_glad_glVertexAttrib3f;
    if (mz_glad_glVertexAttrib3fNV == NULL && mz_glad_glVertexAttrib3fARB != NULL) mz_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)mz_glad_glVertexAttrib3fARB;
    if (mz_glad_glVertexAttrib3fv == NULL && mz_glad_glVertexAttrib3fvNV != NULL) mz_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)mz_glad_glVertexAttrib3fvNV;
    if (mz_glad_glVertexAttrib3fv == NULL && mz_glad_glVertexAttrib3fvARB != NULL) mz_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)mz_glad_glVertexAttrib3fvARB;
    if (mz_glad_glVertexAttrib3fvARB == NULL && mz_glad_glVertexAttrib3fvNV != NULL) mz_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)mz_glad_glVertexAttrib3fvNV;
    if (mz_glad_glVertexAttrib3fvARB == NULL && mz_glad_glVertexAttrib3fv != NULL) mz_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)mz_glad_glVertexAttrib3fv;
    if (mz_glad_glVertexAttrib3fvNV == NULL && mz_glad_glVertexAttrib3fv != NULL) mz_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)mz_glad_glVertexAttrib3fv;
    if (mz_glad_glVertexAttrib3fvNV == NULL && mz_glad_glVertexAttrib3fvARB != NULL) mz_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)mz_glad_glVertexAttrib3fvARB;
    if (mz_glad_glVertexAttrib3s == NULL && mz_glad_glVertexAttrib3sARB != NULL) mz_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)mz_glad_glVertexAttrib3sARB;
    if (mz_glad_glVertexAttrib3s == NULL && mz_glad_glVertexAttrib3sNV != NULL) mz_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)mz_glad_glVertexAttrib3sNV;
    if (mz_glad_glVertexAttrib3sARB == NULL && mz_glad_glVertexAttrib3s != NULL) mz_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)mz_glad_glVertexAttrib3s;
    if (mz_glad_glVertexAttrib3sARB == NULL && mz_glad_glVertexAttrib3sNV != NULL) mz_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)mz_glad_glVertexAttrib3sNV;
    if (mz_glad_glVertexAttrib3sNV == NULL && mz_glad_glVertexAttrib3sARB != NULL) mz_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)mz_glad_glVertexAttrib3sARB;
    if (mz_glad_glVertexAttrib3sNV == NULL && mz_glad_glVertexAttrib3s != NULL) mz_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)mz_glad_glVertexAttrib3s;
    if (mz_glad_glVertexAttrib3sv == NULL && mz_glad_glVertexAttrib3svARB != NULL) mz_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)mz_glad_glVertexAttrib3svARB;
    if (mz_glad_glVertexAttrib3sv == NULL && mz_glad_glVertexAttrib3svNV != NULL) mz_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)mz_glad_glVertexAttrib3svNV;
    if (mz_glad_glVertexAttrib3svARB == NULL && mz_glad_glVertexAttrib3sv != NULL) mz_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)mz_glad_glVertexAttrib3sv;
    if (mz_glad_glVertexAttrib3svARB == NULL && mz_glad_glVertexAttrib3svNV != NULL) mz_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)mz_glad_glVertexAttrib3svNV;
    if (mz_glad_glVertexAttrib3svNV == NULL && mz_glad_glVertexAttrib3sv != NULL) mz_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)mz_glad_glVertexAttrib3sv;
    if (mz_glad_glVertexAttrib3svNV == NULL && mz_glad_glVertexAttrib3svARB != NULL) mz_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)mz_glad_glVertexAttrib3svARB;
    if (mz_glad_glVertexAttrib4bv == NULL && mz_glad_glVertexAttrib4bvARB != NULL) mz_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)mz_glad_glVertexAttrib4bvARB;
    if (mz_glad_glVertexAttrib4bvARB == NULL && mz_glad_glVertexAttrib4bv != NULL) mz_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)mz_glad_glVertexAttrib4bv;
    if (mz_glad_glVertexAttrib4d == NULL && mz_glad_glVertexAttrib4dNV != NULL) mz_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)mz_glad_glVertexAttrib4dNV;
    if (mz_glad_glVertexAttrib4d == NULL && mz_glad_glVertexAttrib4dARB != NULL) mz_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)mz_glad_glVertexAttrib4dARB;
    if (mz_glad_glVertexAttrib4dARB == NULL && mz_glad_glVertexAttrib4dNV != NULL) mz_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)mz_glad_glVertexAttrib4dNV;
    if (mz_glad_glVertexAttrib4dARB == NULL && mz_glad_glVertexAttrib4d != NULL) mz_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)mz_glad_glVertexAttrib4d;
    if (mz_glad_glVertexAttrib4dNV == NULL && mz_glad_glVertexAttrib4d != NULL) mz_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)mz_glad_glVertexAttrib4d;
    if (mz_glad_glVertexAttrib4dNV == NULL && mz_glad_glVertexAttrib4dARB != NULL) mz_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)mz_glad_glVertexAttrib4dARB;
    if (mz_glad_glVertexAttrib4dv == NULL && mz_glad_glVertexAttrib4dvNV != NULL) mz_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)mz_glad_glVertexAttrib4dvNV;
    if (mz_glad_glVertexAttrib4dv == NULL && mz_glad_glVertexAttrib4dvARB != NULL) mz_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)mz_glad_glVertexAttrib4dvARB;
    if (mz_glad_glVertexAttrib4dvARB == NULL && mz_glad_glVertexAttrib4dvNV != NULL) mz_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)mz_glad_glVertexAttrib4dvNV;
    if (mz_glad_glVertexAttrib4dvARB == NULL && mz_glad_glVertexAttrib4dv != NULL) mz_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)mz_glad_glVertexAttrib4dv;
    if (mz_glad_glVertexAttrib4dvNV == NULL && mz_glad_glVertexAttrib4dvARB != NULL) mz_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)mz_glad_glVertexAttrib4dvARB;
    if (mz_glad_glVertexAttrib4dvNV == NULL && mz_glad_glVertexAttrib4dv != NULL) mz_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)mz_glad_glVertexAttrib4dv;
    if (mz_glad_glVertexAttrib4f == NULL && mz_glad_glVertexAttrib4fNV != NULL) mz_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)mz_glad_glVertexAttrib4fNV;
    if (mz_glad_glVertexAttrib4f == NULL && mz_glad_glVertexAttrib4fARB != NULL) mz_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)mz_glad_glVertexAttrib4fARB;
    if (mz_glad_glVertexAttrib4fARB == NULL && mz_glad_glVertexAttrib4f != NULL) mz_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)mz_glad_glVertexAttrib4f;
    if (mz_glad_glVertexAttrib4fARB == NULL && mz_glad_glVertexAttrib4fNV != NULL) mz_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)mz_glad_glVertexAttrib4fNV;
    if (mz_glad_glVertexAttrib4fNV == NULL && mz_glad_glVertexAttrib4f != NULL) mz_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)mz_glad_glVertexAttrib4f;
    if (mz_glad_glVertexAttrib4fNV == NULL && mz_glad_glVertexAttrib4fARB != NULL) mz_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)mz_glad_glVertexAttrib4fARB;
    if (mz_glad_glVertexAttrib4fv == NULL && mz_glad_glVertexAttrib4fvARB != NULL) mz_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)mz_glad_glVertexAttrib4fvARB;
    if (mz_glad_glVertexAttrib4fv == NULL && mz_glad_glVertexAttrib4fvNV != NULL) mz_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)mz_glad_glVertexAttrib4fvNV;
    if (mz_glad_glVertexAttrib4fvARB == NULL && mz_glad_glVertexAttrib4fv != NULL) mz_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)mz_glad_glVertexAttrib4fv;
    if (mz_glad_glVertexAttrib4fvARB == NULL && mz_glad_glVertexAttrib4fvNV != NULL) mz_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)mz_glad_glVertexAttrib4fvNV;
    if (mz_glad_glVertexAttrib4fvNV == NULL && mz_glad_glVertexAttrib4fv != NULL) mz_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)mz_glad_glVertexAttrib4fv;
    if (mz_glad_glVertexAttrib4fvNV == NULL && mz_glad_glVertexAttrib4fvARB != NULL) mz_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)mz_glad_glVertexAttrib4fvARB;
    if (mz_glad_glVertexAttrib4iv == NULL && mz_glad_glVertexAttrib4ivARB != NULL) mz_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)mz_glad_glVertexAttrib4ivARB;
    if (mz_glad_glVertexAttrib4ivARB == NULL && mz_glad_glVertexAttrib4iv != NULL) mz_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)mz_glad_glVertexAttrib4iv;
    if (mz_glad_glVertexAttrib4Nbv == NULL && mz_glad_glVertexAttrib4NbvARB != NULL) mz_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)mz_glad_glVertexAttrib4NbvARB;
    if (mz_glad_glVertexAttrib4NbvARB == NULL && mz_glad_glVertexAttrib4Nbv != NULL) mz_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)mz_glad_glVertexAttrib4Nbv;
    if (mz_glad_glVertexAttrib4Niv == NULL && mz_glad_glVertexAttrib4NivARB != NULL) mz_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)mz_glad_glVertexAttrib4NivARB;
    if (mz_glad_glVertexAttrib4NivARB == NULL && mz_glad_glVertexAttrib4Niv != NULL) mz_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)mz_glad_glVertexAttrib4Niv;
    if (mz_glad_glVertexAttrib4Nsv == NULL && mz_glad_glVertexAttrib4NsvARB != NULL) mz_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)mz_glad_glVertexAttrib4NsvARB;
    if (mz_glad_glVertexAttrib4NsvARB == NULL && mz_glad_glVertexAttrib4Nsv != NULL) mz_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)mz_glad_glVertexAttrib4Nsv;
    if (mz_glad_glVertexAttrib4Nub == NULL && mz_glad_glVertexAttrib4ubNV != NULL) mz_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)mz_glad_glVertexAttrib4ubNV;
    if (mz_glad_glVertexAttrib4Nub == NULL && mz_glad_glVertexAttrib4NubARB != NULL) mz_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)mz_glad_glVertexAttrib4NubARB;
    if (mz_glad_glVertexAttrib4NubARB == NULL && mz_glad_glVertexAttrib4Nub != NULL) mz_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)mz_glad_glVertexAttrib4Nub;
    if (mz_glad_glVertexAttrib4NubARB == NULL && mz_glad_glVertexAttrib4ubNV != NULL) mz_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)mz_glad_glVertexAttrib4ubNV;
    if (mz_glad_glVertexAttrib4Nubv == NULL && mz_glad_glVertexAttrib4ubvNV != NULL) mz_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)mz_glad_glVertexAttrib4ubvNV;
    if (mz_glad_glVertexAttrib4Nubv == NULL && mz_glad_glVertexAttrib4NubvARB != NULL) mz_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)mz_glad_glVertexAttrib4NubvARB;
    if (mz_glad_glVertexAttrib4NubvARB == NULL && mz_glad_glVertexAttrib4ubvNV != NULL) mz_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)mz_glad_glVertexAttrib4ubvNV;
    if (mz_glad_glVertexAttrib4NubvARB == NULL && mz_glad_glVertexAttrib4Nubv != NULL) mz_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)mz_glad_glVertexAttrib4Nubv;
    if (mz_glad_glVertexAttrib4Nuiv == NULL && mz_glad_glVertexAttrib4NuivARB != NULL) mz_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)mz_glad_glVertexAttrib4NuivARB;
    if (mz_glad_glVertexAttrib4NuivARB == NULL && mz_glad_glVertexAttrib4Nuiv != NULL) mz_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)mz_glad_glVertexAttrib4Nuiv;
    if (mz_glad_glVertexAttrib4Nusv == NULL && mz_glad_glVertexAttrib4NusvARB != NULL) mz_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)mz_glad_glVertexAttrib4NusvARB;
    if (mz_glad_glVertexAttrib4NusvARB == NULL && mz_glad_glVertexAttrib4Nusv != NULL) mz_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)mz_glad_glVertexAttrib4Nusv;
    if (mz_glad_glVertexAttrib4s == NULL && mz_glad_glVertexAttrib4sNV != NULL) mz_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)mz_glad_glVertexAttrib4sNV;
    if (mz_glad_glVertexAttrib4s == NULL && mz_glad_glVertexAttrib4sARB != NULL) mz_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)mz_glad_glVertexAttrib4sARB;
    if (mz_glad_glVertexAttrib4sARB == NULL && mz_glad_glVertexAttrib4sNV != NULL) mz_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)mz_glad_glVertexAttrib4sNV;
    if (mz_glad_glVertexAttrib4sARB == NULL && mz_glad_glVertexAttrib4s != NULL) mz_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)mz_glad_glVertexAttrib4s;
    if (mz_glad_glVertexAttrib4sNV == NULL && mz_glad_glVertexAttrib4s != NULL) mz_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)mz_glad_glVertexAttrib4s;
    if (mz_glad_glVertexAttrib4sNV == NULL && mz_glad_glVertexAttrib4sARB != NULL) mz_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)mz_glad_glVertexAttrib4sARB;
    if (mz_glad_glVertexAttrib4sv == NULL && mz_glad_glVertexAttrib4svARB != NULL) mz_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)mz_glad_glVertexAttrib4svARB;
    if (mz_glad_glVertexAttrib4sv == NULL && mz_glad_glVertexAttrib4svNV != NULL) mz_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)mz_glad_glVertexAttrib4svNV;
    if (mz_glad_glVertexAttrib4svARB == NULL && mz_glad_glVertexAttrib4sv != NULL) mz_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)mz_glad_glVertexAttrib4sv;
    if (mz_glad_glVertexAttrib4svARB == NULL && mz_glad_glVertexAttrib4svNV != NULL) mz_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)mz_glad_glVertexAttrib4svNV;
    if (mz_glad_glVertexAttrib4svNV == NULL && mz_glad_glVertexAttrib4svARB != NULL) mz_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)mz_glad_glVertexAttrib4svARB;
    if (mz_glad_glVertexAttrib4svNV == NULL && mz_glad_glVertexAttrib4sv != NULL) mz_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)mz_glad_glVertexAttrib4sv;
    if (mz_glad_glVertexAttrib4ubNV == NULL && mz_glad_glVertexAttrib4Nub != NULL) mz_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)mz_glad_glVertexAttrib4Nub;
    if (mz_glad_glVertexAttrib4ubNV == NULL && mz_glad_glVertexAttrib4NubARB != NULL) mz_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)mz_glad_glVertexAttrib4NubARB;
    if (mz_glad_glVertexAttrib4ubv == NULL && mz_glad_glVertexAttrib4ubvARB != NULL) mz_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)mz_glad_glVertexAttrib4ubvARB;
    if (mz_glad_glVertexAttrib4ubvARB == NULL && mz_glad_glVertexAttrib4ubv != NULL) mz_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)mz_glad_glVertexAttrib4ubv;
    if (mz_glad_glVertexAttrib4ubvNV == NULL && mz_glad_glVertexAttrib4Nubv != NULL) mz_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)mz_glad_glVertexAttrib4Nubv;
    if (mz_glad_glVertexAttrib4ubvNV == NULL && mz_glad_glVertexAttrib4NubvARB != NULL) mz_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)mz_glad_glVertexAttrib4NubvARB;
    if (mz_glad_glVertexAttrib4uiv == NULL && mz_glad_glVertexAttrib4uivARB != NULL) mz_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)mz_glad_glVertexAttrib4uivARB;
    if (mz_glad_glVertexAttrib4uivARB == NULL && mz_glad_glVertexAttrib4uiv != NULL) mz_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)mz_glad_glVertexAttrib4uiv;
    if (mz_glad_glVertexAttrib4usv == NULL && mz_glad_glVertexAttrib4usvARB != NULL) mz_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)mz_glad_glVertexAttrib4usvARB;
    if (mz_glad_glVertexAttrib4usvARB == NULL && mz_glad_glVertexAttrib4usv != NULL) mz_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)mz_glad_glVertexAttrib4usv;
    if (mz_glad_glVertexAttribPointer == NULL && mz_glad_glVertexAttribPointerARB != NULL) mz_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)mz_glad_glVertexAttribPointerARB;
    if (mz_glad_glVertexAttribPointerARB == NULL && mz_glad_glVertexAttribPointer != NULL) mz_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)mz_glad_glVertexAttribPointer;
}

#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define MAZE_GLAD_GL_IS_SOME_NEW_VERSION 1
#else
#define MAZE_GLAD_GL_IS_SOME_NEW_VERSION 0
#endif

static int mz_glad_gl_get_extensions( int version, const char **out_exts, unsigned int *out_num_exts_i, char ***out_exts_i) {
#if MAZE_GLAD_GL_IS_SOME_NEW_VERSION
    if(GLAD_VERSION_MAJOR(version) < 3) {
#else
    (void) version;
    (void) out_num_exts_i;
    (void) out_exts_i;
#endif
        if (mz_glad_glGetString == NULL) {
            return 0;
        }
        *out_exts = (const char *)mz_glad_glGetString(GL_EXTENSIONS);
#if MAZE_GLAD_GL_IS_SOME_NEW_VERSION
    } else {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        if (mz_glad_glGetStringi == NULL || mz_glad_glGetIntegerv == NULL) {
            return 0;
        }
        mz_glad_glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (char **) malloc(num_exts_i * (sizeof *exts_i));
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) mz_glad_glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str != NULL) {
                memcpy(local_str, gl_str_tmp, len * sizeof(char));
            }

            exts_i[index] = local_str;
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
#endif
    return 1;
}
static void mz_glad_gl_free_extensions(char **exts_i, unsigned int num_exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int mz_glad_gl_has_extension(int version, const char *exts, unsigned int num_exts_i, char **exts_i, const char *ext) {
    if(GLAD_VERSION_MAJOR(version) < 3 || !MAZE_GLAD_GL_IS_SOME_NEW_VERSION) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}

static GLADapiproc mz_glad_gl_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int mz_glad_gl_find_extensions_gl( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!mz_glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    MAZE_GLAD_GL_ARB_copy_buffer = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_copy_buffer");
    MAZE_GLAD_GL_ARB_fragment_shader = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_fragment_shader");
    MAZE_GLAD_GL_ARB_framebuffer_object = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_framebuffer_object");
    MAZE_GLAD_GL_ARB_geometry_shader4 = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_geometry_shader4");
    MAZE_GLAD_GL_ARB_get_program_binary = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_get_program_binary");
    MAZE_GLAD_GL_ARB_imaging = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_imaging");
    MAZE_GLAD_GL_ARB_multitexture = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_multitexture");
    MAZE_GLAD_GL_ARB_separate_shader_objects = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_separate_shader_objects");
    MAZE_GLAD_GL_ARB_shader_objects = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_shader_objects");
    MAZE_GLAD_GL_ARB_shading_language_100 = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_shading_language_100");
    MAZE_GLAD_GL_ARB_texture_non_power_of_two = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_texture_non_power_of_two");
    MAZE_GLAD_GL_ARB_vertex_buffer_object = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_buffer_object");
    MAZE_GLAD_GL_ARB_vertex_program = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_program");
    MAZE_GLAD_GL_ARB_vertex_shader = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_vertex_shader");
    MAZE_GLAD_GL_EXT_blend_equation_separate = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_equation_separate");
    MAZE_GLAD_GL_EXT_blend_func_separate = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_func_separate");
    MAZE_GLAD_GL_EXT_blend_minmax = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_minmax");
    MAZE_GLAD_GL_EXT_blend_subtract = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_subtract");
    MAZE_GLAD_GL_EXT_copy_texture = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_copy_texture");
    MAZE_GLAD_GL_EXT_framebuffer_blit = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_blit");
    MAZE_GLAD_GL_EXT_framebuffer_multisample = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_multisample");
    MAZE_GLAD_GL_EXT_framebuffer_object = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_framebuffer_object");
    MAZE_GLAD_GL_EXT_geometry_shader4 = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_geometry_shader4");
    MAZE_GLAD_GL_EXT_packed_depth_stencil = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_packed_depth_stencil");
    MAZE_GLAD_GL_EXT_subtexture = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_subtexture");
    MAZE_GLAD_GL_EXT_texture_array = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_array");
    MAZE_GLAD_GL_EXT_texture_object = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_object");
    MAZE_GLAD_GL_EXT_texture_sRGB = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_sRGB");
    MAZE_GLAD_GL_EXT_vertex_array = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_vertex_array");
    MAZE_GLAD_GL_INGR_blend_func_separate = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_INGR_blend_func_separate");
    MAZE_GLAD_GL_KHR_debug = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_debug");
    MAZE_GLAD_GL_NV_geometry_program4 = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_geometry_program4");
    MAZE_GLAD_GL_NV_vertex_program = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_NV_vertex_program");
    MAZE_GLAD_GL_SGIS_texture_edge_clamp = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_SGIS_texture_edge_clamp") | mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_texture_edge_clamp");
    MAZE_GLAD_GL_OES_single_precision = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_single_precision");

    mz_glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int mz_glad_gl_find_core_gl(void) {
    int i, major, minor;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };
    version = (const char*) mz_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    MAZE_GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    MAZE_GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;

    return GLAD_MAKE_VERSION(major, minor);
}

static int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    mz_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(mz_glad_glGetString == NULL) return 0;
    if(mz_glad_glGetString(GL_VERSION) == NULL) return 0;
    version = mz_glad_gl_find_core_gl();

    mz_glad_gl_load_GL_VERSION_1_0(load, userptr);
    mz_glad_gl_load_GL_VERSION_1_1(load, userptr);

    if (!mz_glad_gl_find_extensions_gl(version)) return 0;
    mz_glad_gl_load_GL_ARB_copy_buffer(load, userptr);
    mz_glad_gl_load_GL_ARB_framebuffer_object(load, userptr);
    mz_glad_gl_load_GL_ARB_geometry_shader4(load, userptr);
    mz_glad_gl_load_GL_ARB_get_program_binary(load, userptr);
    mz_glad_gl_load_GL_ARB_imaging(load, userptr);
    mz_glad_gl_load_GL_ARB_multitexture(load, userptr);
    mz_glad_gl_load_GL_ARB_separate_shader_objects(load, userptr);
    mz_glad_gl_load_GL_ARB_shader_objects(load, userptr);
    mz_glad_gl_load_GL_ARB_vertex_buffer_object(load, userptr);
    mz_glad_gl_load_GL_ARB_vertex_program(load, userptr);
    mz_glad_gl_load_GL_ARB_vertex_shader(load, userptr);
    mz_glad_gl_load_GL_EXT_blend_equation_separate(load, userptr);
    mz_glad_gl_load_GL_EXT_blend_func_separate(load, userptr);
    mz_glad_gl_load_GL_EXT_blend_minmax(load, userptr);
    mz_glad_gl_load_GL_EXT_copy_texture(load, userptr);
    mz_glad_gl_load_GL_EXT_framebuffer_blit(load, userptr);
    mz_glad_gl_load_GL_EXT_framebuffer_multisample(load, userptr);
    mz_glad_gl_load_GL_EXT_framebuffer_object(load, userptr);
    mz_glad_gl_load_GL_EXT_geometry_shader4(load, userptr);
    mz_glad_gl_load_GL_EXT_subtexture(load, userptr);
    mz_glad_gl_load_GL_EXT_texture_array(load, userptr);
    mz_glad_gl_load_GL_EXT_texture_object(load, userptr);
    mz_glad_gl_load_GL_EXT_vertex_array(load, userptr);
    mz_glad_gl_load_GL_INGR_blend_func_separate(load, userptr);
    mz_glad_gl_load_GL_KHR_debug(load, userptr);
    mz_glad_gl_load_GL_NV_geometry_program4(load, userptr);
    mz_glad_gl_load_GL_NV_vertex_program(load, userptr);
    mz_glad_gl_load_GL_OES_single_precision(load, userptr);


    mz_glad_gl_resolve_aliases();

    return version;
}


static int gladLoadGL( GLADloadfunc load) {
    return gladLoadGLUserPtr( mz_glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

static int mz_glad_gl_find_extensions_gles1( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!mz_glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    MAZE_GLAD_GL_EXT_blend_minmax = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_blend_minmax");
    MAZE_GLAD_GL_KHR_debug = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_KHR_debug");
    MAZE_GLAD_GL_EXT_sRGB = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_EXT_sRGB");
    MAZE_GLAD_GL_OES_blend_equation_separate = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_blend_equation_separate");
    MAZE_GLAD_GL_OES_blend_func_separate = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_blend_func_separate");
    MAZE_GLAD_GL_OES_blend_subtract = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_blend_subtract");
    MAZE_GLAD_GL_OES_depth24 = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_depth24");
    MAZE_GLAD_GL_OES_depth32 = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_depth32");
    MAZE_GLAD_GL_OES_framebuffer_object = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_framebuffer_object");
    MAZE_GLAD_GL_OES_packed_depth_stencil = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_packed_depth_stencil");
    MAZE_GLAD_GL_OES_single_precision = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_single_precision");
    MAZE_GLAD_GL_OES_texture_npot = mz_glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_OES_texture_npot");

    mz_glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int mz_glad_gl_find_core_gles1(void) {
    int i, major, minor;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };
    version = (const char*) mz_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    MAZE_GLAD_GL_VERSION_ES_CM_1_0 = (major == 1 && minor >= 0) || major > 1;

    return GLAD_MAKE_VERSION(major, minor);
}

static int gladLoadGLES1UserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    mz_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(mz_glad_glGetString == NULL) return 0;
    if(mz_glad_glGetString(GL_VERSION) == NULL) return 0;
    version = mz_glad_gl_find_core_gles1();

    mz_glad_gl_load_GL_VERSION_ES_CM_1_0(load, userptr);

    if (!mz_glad_gl_find_extensions_gles1(version)) return 0;
    mz_glad_gl_load_GL_EXT_blend_minmax(load, userptr);
    mz_glad_gl_load_GL_KHR_debug(load, userptr);
    mz_glad_gl_load_GL_OES_blend_equation_separate(load, userptr);
    mz_glad_gl_load_GL_OES_blend_func_separate(load, userptr);
    mz_glad_gl_load_GL_OES_blend_subtract(load, userptr);
    mz_glad_gl_load_GL_OES_framebuffer_object(load, userptr);
    mz_glad_gl_load_GL_OES_single_precision(load, userptr);


    mz_glad_gl_resolve_aliases();

    return version;
}


static int gladLoadGLES1( GLADloadfunc load) {
    return gladLoadGLES1UserPtr( mz_glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}



 


#endif /* MAZE_GLAD_GL_IMPLEMENTATION */


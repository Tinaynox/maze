R"(
    //////////////////////////////////////////
    #type vertex

)"
#include "MazePrecisionHigh.mzglsl"
#include "MazeVertex.mzglsl"
R"(

    //////////////////////////////////////////
    IN vec3 a_position;
    IN vec2 a_texCoords0;
    IN vec4 a_color;

    //////////////////////////////////////////
    OUT vec3 v_positionOS;
    OUT vec3 v_positionWS;
    OUT vec3 v_positionVS;
    OUT vec2 v_uv0;
    OUT vec4 v_color;

    //////////////////////////////////////////
    void main()
    {
    
        int instanceId = gl_InstanceID;
    
        mat4 modelMatrix = GetModelMatrix(instanceId);

        vec4 positionOS = vec4(a_position, 1.0);
        vec4 positionWS = modelMatrix * positionOS;
		MAZE_CLIP_DISTANCE_VERTEX(positionWS);
        vec4 positionVS = u_viewMatrix * positionWS;
        vec4 positionCS = u_projectionMatrix * positionVS;
        
    #if (MAZE_LHCS)
        positionCS.z = -positionCS.z;
    #endif
    
        v_positionOS = positionOS.xyz;
        v_positionWS = positionWS.xyz;
        v_positionVS = positionVS.xyz;

        v_uv0 = a_texCoords0;
        v_color = a_color;

        gl_Position = positionCS;
    }

    //////////////////////////////////////////
    #type fragment

)"
#include "MazePrecisionHigh.mzglsl"
#include "MazeFragment.mzglsl"
R"(

    //////////////////////////////////////////
    uniform vec4 u_color;
    uniform float u_intensity;

    //////////////////////////////////////////
    IN vec2 v_uv0;
    IN vec4 v_color;

    //////////////////////////////////////////
    MAZE_LAYOUT_LOCATION(0) out vec4 out_color;

    //////////////////////////////////////////
    void main()
    {
        MAZE_CLIP_DISTANCE_FRAGMENT;

        vec4 color = v_color * u_color;
        float i = u_intensity + 1.0;

        vec4 ldr = color;
        vec4 hdr = vec4(color.rgb * i * i, color.a);

        vec2 d = vec2(0.5, 0.5) - v_uv0;
        float dist = dot(d, d) * 1.4144;
        out_color = mix(ldr, hdr, dist);
    }
)"
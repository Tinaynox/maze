R"(

    //////////////////////////////////////////
    #define MAZE_LHCS (1)


	//////////////////////////////////////////
    #if (MAZE_GLSL_VERSION >= 300)
    #    define MAZE_GET_TEXEL2D texture
    #else
    #    define MAZE_GET_TEXEL2D texture2D
    #endif


	//////////////////////////////////////////
	#if (MAZE_GLSL_VERSION > 120)
    #    define IN in
    #    define OUT out
    #else
    #    define IN attribute
    #    define OUT varying
    #endif


	//////////////////////////////////////////
	#if defined(GL_ES)
	#    define MAZE_LOWP lowp
	#    define MAZE_MEDIUMP mediump
    #    define MAZE_HIGHP highp
    #else
    #    define MAZE_LOWP
	#    define MAZE_MEDIUMP
    #    define MAZE_HIGHP
    #endif


	//////////////////////////////////////////
	#if (MAZE_GLSL_VERSION >= 330)
	#	define MAZE_LAYOUT_LOCATION(__location) layout(location=__location)
	#else
	#	define MAZE_LAYOUT_LOCATION(__location)
	#endif


	//////////////////////////////////////////
	#if (MAZE_GLSL_VERSION >= 330)
	#	define MAZE_INVERSE(m) inverse(m)
	#else
	#	define MAZE_INVERSE(m) maze_inverse(m)
	#endif


	//////////////////////////////////////////
	MAZE_HIGHP float maze_inverse(MAZE_HIGHP float m)
	{
		return 1.0 / m;
	}

	MAZE_HIGHP mat2 maze_inverse(MAZE_HIGHP mat2 m)
	{
	  return mat2(m[1][1], -m[0][1],
				 -m[1][0], m[0][0]) / (m[0][0] * m[1][1] - m[0][1] * m[1][0]);
	}

	MAZE_HIGHP mat3 maze_inverse(MAZE_HIGHP mat3 m)
	{
	  MAZE_HIGHP float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
	  MAZE_HIGHP float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
	  MAZE_HIGHP float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

	  MAZE_HIGHP float b01 = a22 * a11 - a12 * a21;
	  MAZE_HIGHP float b11 = -a22 * a10 + a12 * a20;
	  MAZE_HIGHP float b21 = a21 * a10 - a11 * a20;

	  MAZE_HIGHP float det = a00 * b01 + a01 * b11 + a02 * b21;

	  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
				  b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
				  b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
	}

	MAZE_HIGHP mat4 maze_inverse(MAZE_HIGHP mat4 m)
	{
	  MAZE_HIGHP float
		  a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
		  a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
		  a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
		  a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

		  b00 = a00 * a11 - a01 * a10,
		  b01 = a00 * a12 - a02 * a10,
		  b02 = a00 * a13 - a03 * a10,
		  b03 = a01 * a12 - a02 * a11,
		  b04 = a01 * a13 - a03 * a11,
		  b05 = a02 * a13 - a03 * a12,
		  b06 = a20 * a31 - a21 * a30,
		  b07 = a20 * a32 - a22 * a30,
		  b08 = a20 * a33 - a23 * a30,
		  b09 = a21 * a32 - a22 * a31,
		  b10 = a21 * a33 - a23 * a31,
		  b11 = a22 * a33 - a23 * a32,

		  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	  return mat4(
		  a11 * b11 - a12 * b10 + a13 * b09,
		  a02 * b10 - a01 * b11 - a03 * b09,
		  a31 * b05 - a32 * b04 + a33 * b03,
		  a22 * b04 - a21 * b05 - a23 * b03,
		  a12 * b08 - a10 * b11 - a13 * b07,
		  a00 * b11 - a02 * b08 + a03 * b07,
		  a32 * b02 - a30 * b05 - a33 * b01,
		  a20 * b05 - a22 * b02 + a23 * b01,
		  a10 * b10 - a11 * b08 + a13 * b06,
		  a01 * b08 - a00 * b10 - a03 * b06,
		  a30 * b04 - a31 * b02 + a33 * b00,
		  a21 * b02 - a20 * b04 - a23 * b00,
		  a11 * b07 - a10 * b09 - a12 * b06,
		  a00 * b09 - a01 * b07 + a02 * b06,
		  a31 * b01 - a30 * b03 - a32 * b00,
		  a20 * b03 - a21 * b01 + a22 * b00) / det;
	}
)"

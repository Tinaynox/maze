R"(

    //////////////////////////////////////////
    #if (MAZE_MODEL_MATRICES_VIA_TEXTURE)
        uniform sampler2D u_modelMatricesTexture;
        uniform int u_modelMatricesTextureSize;
        uniform int u_modelMatriciesOffset;


        //////////////////////////////////////////
        mat4 GetModelMatrix(int instanceId)
        {
            int modelMatrixIndex = instanceId + u_modelMatriciesOffset;
            int r = 4 * modelMatrixIndex / u_modelMatricesTextureSize;
            int c = 4 * modelMatrixIndex % u_modelMatricesTextureSize;
    
            ivec2 pos0 = ivec2(c + 0, r);
            ivec2 pos1 = ivec2(c + 1, r);
            ivec2 pos2 = ivec2(c + 2, r);
        
            return mat4( 
                texelFetch(u_modelMatricesTexture, pos0, 0).xyzw,
                texelFetch(u_modelMatricesTexture, pos1, 0).xyzw,
                texelFetch(u_modelMatricesTexture, pos2, 0).xyzw,
                vec4(0, 0, 0, 1 ));
        }
    
    #elif (MAZE_MODEL_MATRICES_VIA_ARRAY)
        uniform mat4 u_modelMatrices[32];

        //////////////////////////////////////////
        mat4 GetModelMatrix(int instanceId)
        {
            return u_modelMatrices[instanceId];
        }

    #endif
    

    //////////////////////////////////////////
    #if (MAZE_INSTANCE_STREAM_VIA_TEXTURE)
        uniform sampler2D u_colorsStreamTexture;
        uniform int u_colorsStreamTextureSize;
        uniform int u_colorsStreamOffset;


        //////////////////////////////////////////
        vec4 GetColorStream(int instanceId)
        {
            int colorIndex = instanceId + u_colorsStreamOffset;
            int r = colorIndex / u_colorsStreamTextureSize;
            int c = colorIndex % u_colorsStreamTextureSize;
    
            ivec2 pos = ivec2(c, r);
        
            return texelFetch(u_colorsStreamTexture, pos, 0).xyzw;
        }
    
    #elif (MAZE_INSTANCE_STREAM_VIA_ARRAY)
        uniform vec4 u_colorsStream[32];

        //////////////////////////////////////////
        vec4 GetColorStream(int instanceId)
        {
            return u_colorsStream[instanceId];
        }

    #endif


    //////////////////////////////////////////
    #if (MAZE_INSTANCE_STREAM_VIA_TEXTURE)
        uniform sampler2D u_uv0StreamTexture;
        uniform int u_uv0StreamTextureSize;
        uniform int u_uv0StreamOffset;


        //////////////////////////////////////////
        vec4 GetUV0Stream(int instanceId)
        {
            int uvIndex = instanceId + u_uv0StreamOffset;
            int r = uvIndex / u_uv0StreamTextureSize;
            int c = uvIndex % u_uv0StreamTextureSize;
    
            ivec2 pos = ivec2(c, r);
        
            return texelFetch(u_uv0StreamTexture, pos, 0).xyzw;
        }
    
    #elif (MAZE_INSTANCE_STREAM_VIA_ARRAY)
        uniform vec4 u_uv0Stream[32];

        //////////////////////////////////////////
        vec4 GetUV0Stream(int instanceId)
        {
            return u_uv0Stream[instanceId];
        }

    #endif


	//////////////////////////////////////////
    #if (MAZE_INSTANCE_STREAM_VIA_TEXTURE)
        uniform sampler2D u_uv1StreamTexture;
        uniform int u_uv1StreamTextureSize;
        uniform int u_uv1StreamOffset;


        //////////////////////////////////////////
        vec4 GetUV1Stream(int instanceId)
        {
            int uvIndex = instanceId + u_uv1StreamOffset;
            int r = uvIndex / u_uv1StreamTextureSize;
            int c = uvIndex % u_uv1StreamTextureSize;
    
            ivec2 pos = ivec2(c, r);
        
            return texelFetch(u_uv1StreamTexture, pos, 0).xyzw;
        }
    
    #elif (MAZE_INSTANCE_STREAM_VIA_ARRAY)
        uniform vec4 u_uv1Stream[32];

        //////////////////////////////////////////
        vec4 GetUV1Stream(int instanceId)
        {
            return u_uv1Stream[instanceId];
        }

    #endif
)"